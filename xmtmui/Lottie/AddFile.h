#pragma once
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//       LottieGen version:
//           7.1.1
//       
//       Command:
//           LottieGen -GenerateColorBindings -Language Cppwinrt -Namespace xmtmui -RootNamespace xmtmui -WinUIVersion 2.4 -InputFile AddFile.json
//       
//       Input file:
//           AddFile.json (31743 bytes created 15:03+07:00 Jun 7 2022)
//       
//       LottieGen source:
//           http://aka.ms/Lottie
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#include "AddFile.g.h"

namespace winrt::xmtmui
{
    // Name:        AddFile
    // Frame rate:  60 fps
    // Frame count: 180.999999046326
    // Duration:    3016.7 mS
    // ___________________________________________________________
    // | Theme property |   Accessor   | Type  |  Default value  |
    // |________________|______________|_______|_________________|
    // | #0077D4        | Color_0077D4 | Color |    #FF0077D4    |
    // | #CCCCCC        | Color_CCCCCC | Color |    #FFCCCCCC    |
    // | #E6E6E6        | Color_E6E6E6 | Color |    #FFE6E6E6    |
    // | #F2F2F2        | Color_F2F2F2 | Color |    #FFF2F2F2    |
    // | #FFFFFF        | Color_FFFFFF | Color | #FFFFFFFF White |
    // -----------------------------------------------------------
    namespace implementation
    {
        class AddFile
            : public AddFileT<AddFile>
        {
            winrt::Windows::UI::Composition::CompositionPropertySet _themeProperties{ nullptr };
            winrt::Windows::UI::Color _themeColor_0077D4{ 0xFF, 0x00, 0x77, 0xD4 };
            winrt::Windows::UI::Color _themeColor_CCCCCC{ 0xFF, 0xCC, 0xCC, 0xCC };
            winrt::Windows::UI::Color _themeColor_E6E6E6{ 0xFF, 0xE6, 0xE6, 0xE6 };
            winrt::Windows::UI::Color _themeColor_F2F2F2{ 0xFF, 0xF2, 0xF2, 0xF2 };
            winrt::Windows::UI::Color _themeColor_FFFFFF{ 0xFF, 0xFF, 0xFF, 0xFF };
            winrt::Windows::UI::Composition::CompositionPropertySet EnsureThemeProperties(winrt::Windows::UI::Composition::Compositor compositor);

            static winrt::Windows::Foundation::Numerics::float4 ColorAsVector4(winrt::Windows::UI::Color color);
        public:
            // Animation duration: 3.017 seconds.
            static constexpr int64_t c_durationTicks{ 30166666L };

            // Theme property: Color_0077D4.
            static inline const winrt::Windows::UI::Color c_themeColor_0077D4{ 0xFF, 0x00, 0x77, 0xD4 };

            // Theme property: Color_CCCCCC.
            static inline const winrt::Windows::UI::Color c_themeColor_CCCCCC{ 0xFF, 0xCC, 0xCC, 0xCC };

            // Theme property: Color_E6E6E6.
            static inline const winrt::Windows::UI::Color c_themeColor_E6E6E6{ 0xFF, 0xE6, 0xE6, 0xE6 };

            // Theme property: Color_F2F2F2.
            static inline const winrt::Windows::UI::Color c_themeColor_F2F2F2{ 0xFF, 0xF2, 0xF2, 0xF2 };

            // Theme property: Color_FFFFFF.
            static inline const winrt::Windows::UI::Color c_themeColor_FFFFFF{ 0xFF, 0xFF, 0xFF, 0xFF };


            winrt::Windows::UI::Color Color_0077D4();
            void Color_0077D4(winrt::Windows::UI::Color value);

            winrt::Windows::UI::Color Color_CCCCCC();
            void Color_CCCCCC(winrt::Windows::UI::Color value);

            winrt::Windows::UI::Color Color_E6E6E6();
            void Color_E6E6E6(winrt::Windows::UI::Color value);

            winrt::Windows::UI::Color Color_F2F2F2();
            void Color_F2F2F2(winrt::Windows::UI::Color value);

            winrt::Windows::UI::Color Color_FFFFFF();
            void Color_FFFFFF(winrt::Windows::UI::Color value);

            winrt::Microsoft::UI::Xaml::Controls::IAnimatedVisual TryCreateAnimatedVisual(
                winrt::Windows::UI::Composition::Compositor const& compositor);

            winrt::Microsoft::UI::Xaml::Controls::IAnimatedVisual TryCreateAnimatedVisual(
                winrt::Windows::UI::Composition::Compositor const& compositor,
                winrt::Windows::Foundation::IInspectable& diagnostics);

            // Gets the number of frames in the animation.
            double FrameCount();

            // Gets the framerate of the animation.
            double Framerate();

            // Gets the duration of the animation.
            winrt::Windows::Foundation::TimeSpan Duration();

            // Converts a zero-based frame number to the corresponding progress value denoting the
            // start of the frame.
            double FrameToProgress(double frameNumber);

            // Returns a map from marker names to corresponding progress values.
            winrt::Windows::Foundation::Collections::IMapView<hstring, double> Markers();

            // Sets the color property with the given name, or does nothing if no such property
            // exists.
            void SetColorProperty(hstring const& propertyName, winrt::Windows::UI::Color value);

            // Sets the scalar property with the given name, or does nothing if no such property
            // exists.
            void SetScalarProperty(hstring const& propertyName, double value);
        };
    }

    namespace factory_implementation
    {
        struct AddFile : AddFileT<AddFile, implementation::AddFile>
        {
        };
    }
}
