//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//       LottieGen version:
//           7.1.1
//       
//       Command:
//           LottieGen -GenerateColorBindings -Language Cppwinrt -MinimumUapVersion 8 -Namespace xmtmui -RootNamespace xmtmui -WinUIVersion 2.4 -InputFile UnderConstruction.json
//       
//       Input file:
//           UnderConstruction.json (21335 bytes created 10:15+07:00 May 29 2022)
//       
//       LottieGen source:
//           http://aka.ms/Lottie
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
// ____________________________________
// |       Object stats       | Count |
// |__________________________|_______|
// | All CompositionObjects   |   215 |
// |--------------------------+-------|
// | Expression animators     |    12 |
// | KeyFrame animators       |     8 |
// | Reference parameters     |    12 |
// | Expression operations    |     8 |
// |--------------------------+-------|
// | Animated brushes         |     2 |
// | Animated gradient stops  |     - |
// | ExpressionAnimations     |     3 |
// | PathKeyFrameAnimations   |     - |
// |--------------------------+-------|
// | ContainerVisuals         |     8 |
// | ShapeVisuals             |     6 |
// |--------------------------+-------|
// | ContainerShapes          |     3 |
// | CompositionSpriteShapes  |    14 |
// |--------------------------+-------|
// | Brushes                  |    17 |
// | Gradient stops           |    15 |
// | CompositionVisualSurface |     4 |
// ------------------------------------
#include "pch.h"
#include "UnderConstruction.h"
#if __has_include ("UnderConstruction.g.cpp")
#include "UnderConstruction.g.cpp"
#endif
#include <winrt/Windows.Foundation.Metadata.h>
#include <winrt/Windows.Foundation.Collections.h>
#include <winrt/Windows.UI.Composition.h>
#include "d2d1.h"
#include <d2d1_1.h>
#include <d2d1helper.h>
#include <Windows.Graphics.Interop.h>
#ifdef BUILD_WINDOWS
namespace ABI
{
#include <Windows.Graphics.Effects.Interop.h>
}
#else
#include <Windows.Graphics.Effects.Interop.h>
#endif
#include <winrt/Windows.Graphics.Effects.h>
#include <vector>

using namespace winrt::Microsoft::UI::Xaml::Controls;
using namespace winrt::Windows::Foundation;
using namespace winrt::Windows::Foundation::Numerics;
using namespace winrt::Windows::Graphics;
using namespace winrt::Windows::UI;
using namespace winrt::Windows::UI::Composition;
using TimeSpan = winrt::Windows::Foundation::TimeSpan;

namespace winrt::xmtmui::implementation
{
    class CanvasGeometry : public winrt::implements<CanvasGeometry,
        IGeometrySource2D,
        ::ABI::Windows::Graphics::IGeometrySource2DInterop>
    {
        winrt::com_ptr<ID2D1Geometry> _geometry{ nullptr };

    public:
        CanvasGeometry(winrt::com_ptr<ID2D1Geometry> geometry)
            : _geometry{ geometry }
        { }

        // IGeometrySource2D.
        winrt::com_ptr<ID2D1Geometry> Geometry() { return _geometry; }

        // IGeometrySource2DInterop.
        IFACEMETHODIMP GetGeometry(ID2D1Geometry** value) override
        {
            _geometry.copy_to(value);
            return S_OK;
        }

        // IGeometrySource2DInterop.
        IFACEMETHODIMP TryGetGeometryUsingFactory(ID2D1Factory*, ID2D1Geometry**) override
        {
            return E_NOTIMPL;
        }
    };
    
    enum class CanvasComposite : int
    {
        SourceOver = 0,
        DestinationOver = 1,
        SourceIn = 2,
        DestinationIn = 3,
        SourceOut = 4,
        DestinationOut = 5,
        SourceAtop = 6,
        DestinationAtop = 7,
        Xor = 8,
        Add = 9,
        Copy = 10,
        BoundedCopy = 11,
        MaskInvert = 12,
    };

    // This class is a substitute for the Microsoft::Graphics::Canvas::Effects::CompositeEffect
    // class so that composite effects can be used with 
    // Windows::UI::Composition::CompositionEffectBrush without requiring Win2d.
    class CompositeEffect : public winrt::implements<CompositeEffect,
        winrt::Windows::Graphics::Effects::IGraphicsEffect,
        winrt::Windows::Graphics::Effects::IGraphicsEffectSource,
        ::ABI::Windows::Graphics::Effects::IGraphicsEffectD2D1Interop>
    {
        winrt::hstring m_name{};
        CanvasComposite m_mode{};
        std::vector<winrt::Windows::Graphics::Effects::IGraphicsEffectSource> m_sources{};

    public:
        void Mode(CanvasComposite mode) { m_mode = mode; }
        CanvasComposite Mode(){ return m_mode; }

        void AddSource(winrt::Windows::Graphics::Effects::IGraphicsEffectSource source)
        {
            m_sources.emplace_back(source);
        }

        // IGraphicsEffect.
        void Name(winrt::hstring name) { m_name = name; }
        winrt::hstring Name() { return m_name; }

        // IGraphicsEffectD2D1Interop.
        IFACEMETHODIMP GetEffectId(GUID* id) override
        {
            if (id != nullptr)
            {
                // CLSID_D2D1Composite.
                *id = { 0x48fc9f51, 0xf6ac, 0x48f1, { 0x8b, 0x58, 0x3b, 0x28, 0xac, 0x46, 0xf7, 0x6d } };
            }

            return S_OK;
        }

        // IGraphicsEffectD2D1Interop.
        IFACEMETHODIMP GetSourceCount(UINT* count) override
        {
            if (count != nullptr)
            {
                *count = static_cast<UINT>(m_sources.size());
            }

            return S_OK;
        }

        // IGraphicsEffectD2D1Interop.
        IFACEMETHODIMP GetSource(
            UINT index,
            ::ABI::Windows::Graphics::Effects::IGraphicsEffectSource** source) override
        {
            if (index >= m_sources.size() ||
                source == nullptr)
            {
                return E_INVALIDARG;
            }

            m_sources.at(index).as<::ABI::Windows::Graphics::Effects::IGraphicsEffectSource>().copy_to(source);

            return S_OK;
        }

        // IGraphicsEffectD2D1Interop.
        IFACEMETHODIMP GetPropertyCount(UINT* count) override { *count = 1; return S_OK; }

        // IGraphicsEffectD2D1Interop.
        IFACEMETHODIMP GetProperty(
            UINT index,
            ::ABI::Windows::Foundation::IPropertyValue** value) override
        {
            switch (index)
            {
            case D2D1_COMPOSITE_PROP_MODE:
                winrt::Windows::Foundation::PropertyValue::CreateUInt32(
                    static_cast<uint32_t>(m_mode)).as<::ABI::Windows::Foundation::IPropertyValue>().copy_to(value);
                return S_OK;
            default:
                *value = nullptr;
                return E_INVALIDARG;
            }
        }

        // IGraphicsEffectD2D1Interop.
        IFACEMETHODIMP GetNamedPropertyMapping(
            LPCWSTR,
            UINT*,
            ::ABI::Windows::Graphics::Effects::GRAPHICS_EFFECT_PROPERTY_MAPPING*) override
        {
            return E_INVALIDARG;
        }
    };

    class UnderConstruction_AnimatedVisual : public winrt::implements<UnderConstruction_AnimatedVisual,
            winrt::Microsoft::UI::Xaml::Controls::IAnimatedVisual,
            IClosable>
    {
        winrt::com_ptr<ID2D1Factory> _d2dFactory{ nullptr };
        static constexpr int64_t c_durationTicks{ 43333333L };
        Compositor const _c{ nullptr };
        ExpressionAnimation const _reusableExpressionAnimation{ nullptr };
        CompositionPropertySet const _themeProperties{ nullptr };
        CompositionColorBrush _themeColor_Color_F7F8F9{ nullptr };
        CompositionColorBrush _themeColor_Color_FFFFFF{ nullptr };
        CompositionColorGradientStop _gradientStop_0_AlmostLavender_FFEBEBEB{ nullptr };
        CompositionColorGradientStop _gradientStop_0_AlmostTomato_FFEB6B38{ nullptr };
        CompositionColorGradientStop _gradientStop_0p004_AlmostDarkSlateGray_FF232934{ nullptr };
        CompositionColorGradientStop _gradientStop_0p184_AlmostChocolate_FFEF7C2C{ nullptr };
        CompositionColorGradientStop _gradientStop_0p254_AlmostDarkSlateGray_FF272B37{ nullptr };
        CompositionColorGradientStop _gradientStop_0p367_AlmostDarkOrange_FFF58E1F{ nullptr };
        CompositionColorGradientStop _gradientStop_0p504_AlmostDarkSlateGray_FF2A2D39{ nullptr };
        CompositionColorGradientStop _gradientStop_0p833_AlmostSilver_FFC5C7CF{ nullptr };
        CompositionColorGradientStop _gradientStop_0p916_AlmostSilver_FFB4B7C1{ nullptr };
        CompositionColorGradientStop _gradientStop_1_AlmostDarkGray_FFA1A6B3{ nullptr };
        CompositionColorGradientStop _gradientStop_1_AlmostDarkSlateGray_FF2E3440{ nullptr };
        CompositionColorGradientStop _gradientStop_1_AlmostOrange_FFFFAF06{ nullptr };
        CompositionPathGeometry _pathGeometry_00{ nullptr };
        CompositionPathGeometry _pathGeometry_06{ nullptr };
        ContainerVisual _root{ nullptr };
        CubicBezierEasingFunction _cubicBezierEasingFunction_0{ nullptr };
        CubicBezierEasingFunction _cubicBezierEasingFunction_1{ nullptr };
        CubicBezierEasingFunction _cubicBezierEasingFunction_2{ nullptr };
        CubicBezierEasingFunction _cubicBezierEasingFunction_3{ nullptr };
        ExpressionAnimation _rootProgress{ nullptr };
        InsetClip _insetClip_0{ nullptr };
        StepEasingFunction _holdThenStepEasingFunction{ nullptr };
        StepEasingFunction _stepThenHoldEasingFunction{ nullptr };
        Vector2KeyFrameAnimation _scaleVector2Animation_1{ nullptr };

        static void StartProgressBoundAnimation(
            CompositionObject target,
            winrt::hstring animatedPropertyName,
            CompositionAnimation animation,
            ExpressionAnimation controllerProgressExpression)
        {
            target.StartAnimation(animatedPropertyName, animation);
            const auto controller = target.TryGetAnimationController(animatedPropertyName);
            controller.Pause();
            controller.StartAnimation(L"Progress", controllerProgressExpression);
        }

        void BindProperty(
            CompositionObject target,
            winrt::hstring animatedPropertyName,
            winrt::hstring expression,
            winrt::hstring referenceParameterName,
            CompositionObject referencedObject)
        {
            _reusableExpressionAnimation.ClearAllParameters();
            _reusableExpressionAnimation.Expression(expression);
            _reusableExpressionAnimation.SetReferenceParameter(referenceParameterName, referencedObject);
            target.StartAnimation(animatedPropertyName, _reusableExpressionAnimation);
        }

        ScalarKeyFrameAnimation CreateScalarKeyFrameAnimation(float initialProgress, float initialValue, CompositionEasingFunction initialEasingFunction)
        {
            const auto result = _c.CreateScalarKeyFrameAnimation();
            result.Duration(TimeSpan{ c_durationTicks });
            result.InsertKeyFrame(initialProgress, initialValue, initialEasingFunction);
            return result;
        }

        Vector2KeyFrameAnimation CreateVector2KeyFrameAnimation(float initialProgress, float2 initialValue, CompositionEasingFunction initialEasingFunction)
        {
            const auto result = _c.CreateVector2KeyFrameAnimation();
            result.Duration(TimeSpan{ c_durationTicks });
            result.InsertKeyFrame(initialProgress, initialValue, initialEasingFunction);
            return result;
        }

        Vector3KeyFrameAnimation CreateVector3KeyFrameAnimation(float initialProgress, float3 initialValue, CompositionEasingFunction initialEasingFunction)
        {
            const auto result = _c.CreateVector3KeyFrameAnimation();
            result.Duration(TimeSpan{ c_durationTicks });
            result.InsertKeyFrame(initialProgress, initialValue, initialEasingFunction);
            return result;
        }

        CompositionSpriteShape CreateSpriteShape(CompositionGeometry geometry, float3x2 transformMatrix, CompositionBrush fillBrush)
        {
            const auto result = _c.CreateSpriteShape(geometry);
            result.TransformMatrix(transformMatrix);
            result.FillBrush(fillBrush);
            return result;
        }

        winrt::com_ptr<CanvasGeometry> Geometry_00()
        {
            winrt::com_ptr<ID2D1PathGeometry> path{ nullptr };
            winrt::check_hresult(_d2dFactory->CreatePathGeometry(path.put()));
            winrt::com_ptr<ID2D1GeometrySink> sink{ nullptr };
            winrt::check_hresult(path->Open(sink.put()));
            sink->SetFillMode(D2D1_FILL_MODE_WINDING);
            sink->BeginFigure({ 274.723999F, 252.177002F }, D2D1_FIGURE_BEGIN_FILLED);
            sink->AddBezier({ { 274.723999F, 269.579987F }, { 213.569F, 284.661011F }, { 124.304001F, 292.036987F } });
            sink->AddBezier({ { 86.9779968F, 295.132996F }, { 44.737999F, 296.868011F }, { 0.0F, 296.868011F } });
            sink->AddBezier({ { -44.737999F, 296.868011F }, { -86.9779968F, 295.132996F }, { -124.304001F, 292.036987F } });
            sink->AddBezier({ { -213.569F, 284.661011F }, { -274.723999F, 269.579987F }, { -274.723999F, 252.177002F } });
            sink->AddBezier({ { -274.723999F, 234.774002F }, { -213.569F, 219.682007F }, { -124.304001F, 212.306F } });
            sink->AddBezier({ { -86.9779968F, 209.210007F }, { -44.737999F, 207.475006F }, { 0.0F, 207.475006F } });
            sink->AddBezier({ { 44.737999F, 207.475006F }, { 86.9779968F, 209.210007F }, { 124.304001F, 212.306F } });
            sink->AddBezier({ { 213.569F, 219.682007F }, { 274.723999F, 234.774002F }, { 274.723999F, 252.177002F } });
            sink->EndFigure(D2D1_FIGURE_END_CLOSED);
            winrt::check_hresult(sink->Close());
            auto result = winrt::make_self<CanvasGeometry>(path);
            return result;
        }

        // - - - - - PreComp layer: Creature
        // - - - Shape tree root for layer: Layer 4
        // - -  Offset:<600, 600>
        winrt::com_ptr<CanvasGeometry> Geometry_01()
        {
            winrt::com_ptr<ID2D1PathGeometry> path{ nullptr };
            winrt::check_hresult(_d2dFactory->CreatePathGeometry(path.put()));
            winrt::com_ptr<ID2D1GeometrySink> sink{ nullptr };
            winrt::check_hresult(path->Open(sink.put()));
            sink->SetFillMode(D2D1_FILL_MODE_WINDING);
            sink->BeginFigure({ 124.304001F, 149.332993F }, D2D1_FIGURE_BEGIN_FILLED);
            sink->AddLine({ 120.806F, 350.946991F });
            sink->AddBezier({ { 83.4789963F, 354.042999F }, { 44.737999F, 360.868011F }, { 0.0F, 360.868011F } });
            sink->AddBezier({ { -44.737999F, 360.868011F }, { -86.8889999F, 355.132996F }, { -124.216003F, 352.036987F } });
            sink->AddLine({ -124.304001F, 149.332993F });
            sink->AddBezier({ { -124.304001F, 80.6729965F }, { -68.6490021F, 25.0289993F }, { 0.0F, 25.0289993F } });
            sink->AddBezier({ { 34.3240013F, 25.0289993F }, { 65.4000015F, 38.9370003F }, { 87.8919983F, 61.4290009F } });
            sink->AddBezier({ { 110.396004F, 83.9209976F }, { 124.304001F, 114.997002F }, { 124.304001F, 149.332993F } });
            sink->EndFigure(D2D1_FIGURE_END_CLOSED);
            winrt::check_hresult(sink->Close());
            auto result = winrt::make_self<CanvasGeometry>(path);
            return result;
        }

        // - - - - - - - - - - PreComp layer: Creature
        // - - - Shape tree root for layer: Layer 3
        // - -  Offset:<600, 600>
        winrt::com_ptr<CanvasGeometry> Geometry_02()
        {
            winrt::com_ptr<ID2D1PathGeometry> path{ nullptr };
            winrt::check_hresult(_d2dFactory->CreatePathGeometry(path.put()));
            winrt::com_ptr<ID2D1GeometrySink> sink{ nullptr };
            winrt::check_hresult(path->Open(sink.put()));
            sink->SetFillMode(D2D1_FILL_MODE_WINDING);
            sink->BeginFigure({ 82.2860031F, 178.966995F }, D2D1_FIGURE_BEGIN_FILLED);
            sink->AddBezier({ { 82.2860031F, 194.712006F }, { 69.5230026F, 207.475006F }, { 53.7779999F, 207.475006F } });
            sink->AddBezier({ { 38.0330009F, 207.475006F }, { 25.2700005F, 194.712006F }, { 25.2700005F, 178.966995F } });
            sink->AddBezier({ { 25.2700005F, 163.222F }, { 38.0330009F, 150.459F }, { 53.7779999F, 150.459F } });
            sink->AddBezier({ { 69.5230026F, 150.459F }, { 82.2860031F, 163.222F }, { 82.2860031F, 178.966995F } });
            sink->EndFigure(D2D1_FIGURE_END_CLOSED);
            winrt::check_hresult(sink->Close());
            auto result = winrt::make_self<CanvasGeometry>(path);
            return result;
        }

        // - - - - - - - - - - PreComp layer: Creature
        // - - - Shape tree root for layer: Layer 3
        // - -  Offset:<600, 600>
        winrt::com_ptr<CanvasGeometry> Geometry_03()
        {
            winrt::com_ptr<ID2D1PathGeometry> path{ nullptr };
            winrt::check_hresult(_d2dFactory->CreatePathGeometry(path.put()));
            winrt::com_ptr<ID2D1GeometrySink> sink{ nullptr };
            winrt::check_hresult(path->Open(sink.put()));
            sink->SetFillMode(D2D1_FILL_MODE_WINDING);
            sink->BeginFigure({ 61.7639999F, 182.707993F }, D2D1_FIGURE_BEGIN_FILLED);
            sink->AddBezier({ { 61.7639999F, 187.119003F }, { 58.1889992F, 190.694F }, { 53.7779999F, 190.694F } });
            sink->AddBezier({ { 49.3670006F, 190.694F }, { 45.7919998F, 187.119003F }, { 45.7919998F, 182.707993F } });
            sink->AddBezier({ { 45.7919998F, 178.296997F }, { 49.3670006F, 174.722F }, { 53.7779999F, 174.722F } });
            sink->AddBezier({ { 58.1889992F, 174.722F }, { 61.7639999F, 178.296997F }, { 61.7639999F, 182.707993F } });
            sink->EndFigure(D2D1_FIGURE_END_CLOSED);
            winrt::check_hresult(sink->Close());
            auto result = winrt::make_self<CanvasGeometry>(path);
            return result;
        }

        // - - - - - - - - - - PreComp layer: Creature
        // - - - Shape tree root for layer: Layer 3
        // - -  Offset:<600, 600>
        winrt::com_ptr<CanvasGeometry> Geometry_04()
        {
            winrt::com_ptr<ID2D1PathGeometry> path{ nullptr };
            winrt::check_hresult(_d2dFactory->CreatePathGeometry(path.put()));
            winrt::com_ptr<ID2D1GeometrySink> sink{ nullptr };
            winrt::check_hresult(path->Open(sink.put()));
            sink->SetFillMode(D2D1_FILL_MODE_WINDING);
            sink->BeginFigure({ -25.2700005F, 178.966995F }, D2D1_FIGURE_BEGIN_FILLED);
            sink->AddBezier({ { -25.2700005F, 194.712006F }, { -38.0330009F, 207.475006F }, { -53.7779999F, 207.475006F } });
            sink->AddBezier({ { -69.5230026F, 207.475006F }, { -82.2860031F, 194.712006F }, { -82.2860031F, 178.966995F } });
            sink->AddBezier({ { -82.2860031F, 163.222F }, { -69.5230026F, 150.459F }, { -53.7779999F, 150.459F } });
            sink->AddBezier({ { -38.0330009F, 150.459F }, { -25.2700005F, 163.222F }, { -25.2700005F, 178.966995F } });
            sink->EndFigure(D2D1_FIGURE_END_CLOSED);
            winrt::check_hresult(sink->Close());
            auto result = winrt::make_self<CanvasGeometry>(path);
            return result;
        }

        // - - - - - - - - - - PreComp layer: Creature
        // - - - Shape tree root for layer: Layer 3
        // - -  Offset:<600, 600>
        winrt::com_ptr<CanvasGeometry> Geometry_05()
        {
            winrt::com_ptr<ID2D1PathGeometry> path{ nullptr };
            winrt::check_hresult(_d2dFactory->CreatePathGeometry(path.put()));
            winrt::com_ptr<ID2D1GeometrySink> sink{ nullptr };
            winrt::check_hresult(path->Open(sink.put()));
            sink->SetFillMode(D2D1_FILL_MODE_WINDING);
            sink->BeginFigure({ -45.7919998F, 186.953003F }, D2D1_FIGURE_BEGIN_FILLED);
            sink->AddBezier({ { -45.7919998F, 191.363998F }, { -49.3670006F, 194.938995F }, { -53.7779999F, 194.938995F } });
            sink->AddBezier({ { -58.1889992F, 194.938995F }, { -61.7639999F, 191.363998F }, { -61.7639999F, 186.953003F } });
            sink->AddBezier({ { -61.7639999F, 182.542007F }, { -58.1889992F, 178.966995F }, { -53.7779999F, 178.966995F } });
            sink->AddBezier({ { -49.3670006F, 178.966995F }, { -45.7919998F, 182.542007F }, { -45.7919998F, 186.953003F } });
            sink->EndFigure(D2D1_FIGURE_END_CLOSED);
            winrt::check_hresult(sink->Close());
            auto result = winrt::make_self<CanvasGeometry>(path);
            return result;
        }

        winrt::com_ptr<CanvasGeometry> Geometry_06()
        {
            winrt::com_ptr<ID2D1PathGeometry> path{ nullptr };
            winrt::check_hresult(_d2dFactory->CreatePathGeometry(path.put()));
            winrt::com_ptr<ID2D1GeometrySink> sink{ nullptr };
            winrt::check_hresult(path->Open(sink.put()));
            sink->SetFillMode(D2D1_FILL_MODE_WINDING);
            sink->BeginFigure({ 0.0F, -25.75F }, D2D1_FIGURE_BEGIN_FILLED);
            sink->AddBezier({ { 14.2209997F, -25.75F }, { 25.75F, -14.2209997F }, { 25.75F, 0.0F } });
            sink->AddBezier({ { 25.75F, 14.2209997F }, { 14.2209997F, 25.75F }, { 0.0F, 25.75F } });
            sink->AddBezier({ { -14.2209997F, 25.75F }, { -25.75F, 14.2209997F }, { -25.75F, 0.0F } });
            sink->AddBezier({ { -25.75F, -14.2209997F }, { -14.2209997F, -25.75F }, { 0.0F, -25.75F } });
            sink->EndFigure(D2D1_FIGURE_END_CLOSED);
            winrt::check_hresult(sink->Close());
            auto result = winrt::make_self<CanvasGeometry>(path);
            return result;
        }

        // - - - Shape tree root for layer: mask
        // - -  Offset:<600, 600>
        winrt::com_ptr<CanvasGeometry> Geometry_07()
        {
            winrt::com_ptr<ID2D1PathGeometry> path{ nullptr };
            winrt::check_hresult(_d2dFactory->CreatePathGeometry(path.put()));
            winrt::com_ptr<ID2D1GeometrySink> sink{ nullptr };
            winrt::check_hresult(path->Open(sink.put()));
            sink->SetFillMode(D2D1_FILL_MODE_WINDING);
            sink->BeginFigure({ 272.0F, -188.0F }, D2D1_FIGURE_BEGIN_FILLED);
            sink->AddLine({ 282.0F, 158.0F });
            sink->AddLine({ -282.0F, 158.0F });
            sink->AddLine({ -281.5F, -189.0F });
            sink->AddBezier({ { -281.5F, -189.0F }, { -213.641006F, -159.311005F }, { -177.0F, -155.0F } });
            sink->AddBezier({ { -151.5F, -152.0F }, { -63.0F, -145.0F }, { 17.0F, -145.0F } });
            sink->AddBezier({ { 72.8909988F, -145.0F }, { 128.641006F, -150.311005F }, { 184.0F, -158.0F } });
            sink->AddBezier({ { 238.0F, -165.5F }, { 272.0F, -188.0F }, { 272.0F, -188.0F } });
            sink->EndFigure(D2D1_FIGURE_END_CLOSED);
            winrt::check_hresult(sink->Close());
            auto result = winrt::make_self<CanvasGeometry>(path);
            return result;
        }

        // - - - - Shape tree root for layer: Layer 2
        // - - ShapeGroup: Group 6
        winrt::com_ptr<CanvasGeometry> Geometry_08()
        {
            winrt::com_ptr<ID2D1PathGeometry> path{ nullptr };
            winrt::check_hresult(_d2dFactory->CreatePathGeometry(path.put()));
            winrt::com_ptr<ID2D1GeometrySink> sink{ nullptr };
            winrt::check_hresult(path->Open(sink.put()));
            sink->SetFillMode(D2D1_FILL_MODE_WINDING);
            sink->BeginFigure({ 190.511993F, 70.7949982F }, D2D1_FIGURE_BEGIN_FILLED);
            sink->AddLine({ -200.445007F, 193.477997F });
            sink->AddLine({ -198.828995F, 95.2389984F });
            sink->AddLine({ -197.835999F, 34.1010017F });
            sink->AddLine({ -197.464005F, 11.658F });
            sink->AddLine({ -195.660004F, -98.3919983F });
            sink->AddLine({ -194.294998F, -181.973007F });
            sink->AddLine({ -192.623001F, -283.875F });
            sink->AddBezier({ { -192.496002F, -291.77301F }, { -187.326004F, -298.703003F }, { -179.781006F, -301.070007F } });
            sink->AddLine({ -109.002998F, -323.281006F });
            sink->AddBezier({ { -101.458F, -325.64801F }, { -93.2559967F, -322.914001F }, { -88.6389999F, -316.505005F } });
            sink->AddLine({ -29.0459995F, -233.828995F });
            sink->AddLine({ 19.8279991F, -166.013F });
            sink->AddLine({ 84.1849976F, -76.723999F });
            sink->AddLine({ 97.3119965F, -58.5169983F });
            sink->AddLine({ 133.057999F, -8.90799999F });
            sink->AddLine({ 190.511993F, 70.7949982F });
            sink->EndFigure(D2D1_FIGURE_END_CLOSED);
            winrt::check_hresult(sink->Close());
            auto result = winrt::make_self<CanvasGeometry>(path);
            return result;
        }

        // - - - - Shape tree root for layer: Layer 2
        // - - ShapeGroup: Group 6
        winrt::com_ptr<CanvasGeometry> Geometry_09()
        {
            winrt::com_ptr<ID2D1PathGeometry> path{ nullptr };
            winrt::check_hresult(_d2dFactory->CreatePathGeometry(path.put()));
            winrt::com_ptr<ID2D1GeometrySink> sink{ nullptr };
            winrt::check_hresult(path->Open(sink.put()));
            sink->SetFillMode(D2D1_FILL_MODE_WINDING);
            sink->BeginFigure({ 271.661011F, 97.8919983F }, D2D1_FIGURE_BEGIN_FILLED);
            sink->AddBezier({ { 271.661011F, 97.8919983F }, { 203.403F, 136.667999F }, { 173.477997F, 149.960007F } });
            sink->AddBezier({ { 148.197006F, 161.188995F }, { 96.3119965F, 179.809998F }, { 48.0940018F, 196.401001F } });
            sink->AddBezier({ { 13.0740004F, 208.451004F }, { -34.3989983F, 223.201004F }, { -101.344002F, 237.839005F } });
            sink->AddBezier({ { -169.210007F, 252.679001F }, { -263.195007F, 269.352997F }, { -263.195007F, 269.352997F } });
            sink->AddBezier({ { -277.423004F, 257.006989F }, { -278.303009F, 244.373001F }, { -281.04599F, 235.630997F } });
            sink->AddBezier({ { -283.789001F, 226.889008F }, { -278.925995F, 217.578995F }, { -270.18399F, 214.835999F } });
            sink->AddLine({ 259.958008F, 48.4760017F });
            sink->AddBezier({ { 268.700012F, 45.7330017F }, { 278.01001F, 50.5960007F }, { 280.752991F, 59.3380013F } });
            sink->AddBezier({ { 283.496002F, 68.0800018F }, { 284.377991F, 80.0179977F }, { 271.661011F, 97.8919983F } });
            sink->EndFigure(D2D1_FIGURE_END_CLOSED);
            winrt::check_hresult(sink->Close());
            auto result = winrt::make_self<CanvasGeometry>(path);
            return result;
        }

        // - - - - Shape tree root for layer: Layer 2
        // - - ShapeGroup: Group 6
        winrt::com_ptr<CanvasGeometry> Geometry_10()
        {
            winrt::com_ptr<ID2D1PathGeometry> path{ nullptr };
            winrt::check_hresult(_d2dFactory->CreatePathGeometry(path.put()));
            winrt::com_ptr<ID2D1GeometrySink> sink{ nullptr };
            winrt::check_hresult(path->Open(sink.put()));
            sink->SetFillMode(D2D1_FILL_MODE_WINDING);
            sink->BeginFigure({ 19.8260002F, -166.016998F }, D2D1_FIGURE_BEGIN_FILLED);
            sink->AddLine({ -195.662003F, -98.3970032F });
            sink->AddLine({ -194.296997F, -181.977997F });
            sink->AddLine({ -29.0470009F, -233.832993F });
            sink->AddLine({ 19.8260002F, -166.016998F });
            sink->EndFigure(D2D1_FIGURE_END_CLOSED);
            winrt::check_hresult(sink->Close());
            auto result = winrt::make_self<CanvasGeometry>(path);
            return result;
        }

        // - - - - Shape tree root for layer: Layer 2
        // - - ShapeGroup: Group 6
        winrt::com_ptr<CanvasGeometry> Geometry_11()
        {
            winrt::com_ptr<ID2D1PathGeometry> path{ nullptr };
            winrt::check_hresult(_d2dFactory->CreatePathGeometry(path.put()));
            winrt::com_ptr<ID2D1GeometrySink> sink{ nullptr };
            winrt::check_hresult(path->Open(sink.put()));
            sink->SetFillMode(D2D1_FILL_MODE_WINDING);
            sink->BeginFigure({ 133.057007F, -8.91300011F }, D2D1_FIGURE_BEGIN_FILLED);
            sink->AddLine({ -198.830994F, 95.2340012F });
            sink->AddLine({ -197.466003F, 11.6529999F });
            sink->AddLine({ 84.1829987F, -76.7279968F });
            sink->AddLine({ 133.057007F, -8.91300011F });
            sink->EndFigure(D2D1_FIGURE_END_CLOSED);
            winrt::check_hresult(sink->Close());
            auto result = winrt::make_self<CanvasGeometry>(path);
            return result;
        }

        // Color bound to theme property value: Color_F7F8F9
        CompositionColorBrush ThemeColor_Color_F7F8F9()
        {
            const auto result = _themeColor_Color_F7F8F9 = _c.CreateColorBrush();
            BindProperty(result, L"Color", L"ColorRGB(_theme.Color_F7F8F9.W,_theme.Color_F7F8F9.X,_theme.Color_F7F8F9.Y,_theme.Color_F7F8F9.Z)", L"_theme", _themeProperties);
            return result;
        }

        // Color bound to theme property value: Color_FFFFFF
        CompositionColorBrush ThemeColor_Color_FFFFFF()
        {
            const auto result = _themeColor_Color_FFFFFF = _c.CreateColorBrush();
            BindProperty(result, L"Color", L"ColorRGB(_theme.Color_FFFFFF.W,_theme.Color_FFFFFF.X,_theme.Color_FFFFFF.Y,_theme.Color_FFFFFF.Z)", L"_theme", _themeProperties);
            return result;
        }

        // Stop 0
        CompositionColorGradientStop GradientStop_0_AlmostLavender_FFEBEBEB()
        {
            return _gradientStop_0_AlmostLavender_FFEBEBEB = _c.CreateColorGradientStop(0.0F, { 0xFF, 0xEB, 0xEB, 0xEB });
        }

        // Stop 0
        CompositionColorGradientStop GradientStop_0_AlmostTomato_FFEB6B38()
        {
            return _gradientStop_0_AlmostTomato_FFEB6B38 = _c.CreateColorGradientStop(0.0F, { 0xFF, 0xEB, 0x6B, 0x38 });
        }

        // - - Layer aggregator
        // - ShapeGroup: Group 2
        // Stop 0
        CompositionColorGradientStop GradientStop_0_SemiTransparentAlmostDarkSlateGray_422F2F2F()
        {
            return _c.CreateColorGradientStop(0.0F, { 0x42, 0x2F, 0x2F, 0x2F });
        }

        // Stop 0
        CompositionColorGradientStop GradientStop_0p004_AlmostDarkSlateGray_FF232934()
        {
            return _gradientStop_0p004_AlmostDarkSlateGray_FF232934 = _c.CreateColorGradientStop(0.00400000019F, { 0xFF, 0x23, 0x29, 0x34 });
        }

        // Stop 1
        CompositionColorGradientStop GradientStop_0p184_AlmostChocolate_FFEF7C2C()
        {
            return _gradientStop_0p184_AlmostChocolate_FFEF7C2C = _c.CreateColorGradientStop(0.184F, { 0xFF, 0xEF, 0x7C, 0x2C });
        }

        // Stop 1
        CompositionColorGradientStop GradientStop_0p254_AlmostDarkSlateGray_FF272B37()
        {
            return _gradientStop_0p254_AlmostDarkSlateGray_FF272B37 = _c.CreateColorGradientStop(0.254000008F, { 0xFF, 0x27, 0x2B, 0x37 });
        }

        // Stop 2
        CompositionColorGradientStop GradientStop_0p367_AlmostDarkOrange_FFF58E1F()
        {
            return _gradientStop_0p367_AlmostDarkOrange_FFF58E1F = _c.CreateColorGradientStop(0.367000014F, { 0xFF, 0xF5, 0x8E, 0x1F });
        }

        // Stop 2
        CompositionColorGradientStop GradientStop_0p504_AlmostDarkSlateGray_FF2A2D39()
        {
            return _gradientStop_0p504_AlmostDarkSlateGray_FF2A2D39 = _c.CreateColorGradientStop(0.504000008F, { 0xFF, 0x2A, 0x2D, 0x39 });
        }

        // - - Layer aggregator
        // - ShapeGroup: Group 2
        // Stop 1
        CompositionColorGradientStop GradientStop_0p535_SemiTransparentAlmostDimGray_42626262()
        {
            return _c.CreateColorGradientStop(0.535000026F, { 0x42, 0x62, 0x62, 0x62 });
        }

        // Stop 1
        CompositionColorGradientStop GradientStop_0p833_AlmostSilver_FFC5C7CF()
        {
            return _gradientStop_0p833_AlmostSilver_FFC5C7CF = _c.CreateColorGradientStop(0.833000004F, { 0xFF, 0xC5, 0xC7, 0xCF });
        }

        // Stop 2
        CompositionColorGradientStop GradientStop_0p916_AlmostSilver_FFB4B7C1()
        {
            return _gradientStop_0p916_AlmostSilver_FFB4B7C1 = _c.CreateColorGradientStop(0.916000009F, { 0xFF, 0xB4, 0xB7, 0xC1 });
        }

        // Stop 3
        CompositionColorGradientStop GradientStop_1_AlmostDarkGray_FFA1A6B3()
        {
            return _gradientStop_1_AlmostDarkGray_FFA1A6B3 = _c.CreateColorGradientStop(1.0F, { 0xFF, 0xA1, 0xA6, 0xB3 });
        }

        // Stop 3
        CompositionColorGradientStop GradientStop_1_AlmostDarkSlateGray_FF2E3440()
        {
            return _gradientStop_1_AlmostDarkSlateGray_FF2E3440 = _c.CreateColorGradientStop(1.0F, { 0xFF, 0x2E, 0x34, 0x40 });
        }

        // Stop 3
        CompositionColorGradientStop GradientStop_1_AlmostOrange_FFFFAF06()
        {
            return _gradientStop_1_AlmostOrange_FFFFAF06 = _c.CreateColorGradientStop(1.0F, { 0xFF, 0xFF, 0xAF, 0x06 });
        }

        // - - Layer aggregator
        // - ShapeGroup: Group 2
        // Stop 2
        CompositionColorGradientStop GradientStop_1_SemiTransparentAlmostLightSlateGray_42959595()
        {
            return _c.CreateColorGradientStop(1.0F, { 0x42, 0x95, 0x95, 0x95 });
        }

        // - - - - - - - - PreComp layer: Creature
        // - PreComp layer: Eyelids_01
        // Layer aggregator
        CompositionContainerShape ContainerShape_0()
        {
            const auto result = _c.CreateContainerShape();
            result.CenterPoint({ -54.25F, 180.0F });
            result.Offset({ 102.5F, -126.0F });
            // ShapeGroup: Ellipse 1 Scale:1.14583,1.14583, Offset:<-54.25, 180>
            result.Shapes().Append(SpriteShape_07());
            StartProgressBoundAnimation(result, L"Scale", ScaleVector2Animation_1(), _rootProgress);
            return result;
        }

        // - - - - - - - - PreComp layer: Creature
        // - PreComp layer: Eyelids_01
        // Layer aggregator
        CompositionContainerShape ContainerShape_1()
        {
            const auto result = _c.CreateContainerShape();
            result.CenterPoint({ -54.25F, 180.0F });
            result.Offset({ 200.0F, -126.0F });
            // ShapeGroup: Ellipse 1 Scale:1.14583,1.14583, Offset:<-54.25, 180>
            result.Shapes().Append(SpriteShape_08());
            StartProgressBoundAnimation(result, L"Scale", _scaleVector2Animation_1, _rootProgress);
            return result;
        }

        // Shape tree root for layer: Layer 2
        CompositionContainerShape ContainerShape_2()
        {
            const auto result = _c.CreateContainerShape();
            result.CenterPoint({ -274.0F, 234.0F });
            const auto shapes = result.Shapes();
            // ShapeGroup: Group 6
            shapes.Append(SpriteShape_10());
            // ShapeGroup: Group 6
            shapes.Append(SpriteShape_11());
            // ShapeGroup: Group 6
            shapes.Append(SpriteShape_12());
            // ShapeGroup: Group 6
            shapes.Append(SpriteShape_13());
            StartProgressBoundAnimation(result, L"RotationAngleInDegrees", RotationAngleInDegreesScalarAnimation_17_to_17(), _rootProgress);
            StartProgressBoundAnimation(result, L"Offset", OffsetVector2Animation_1(), _rootProgress);
            return result;
        }

        CompositionEffectBrush EffectBrush_0()
        {
            auto compositeEffect = winrt::make_self<CompositeEffect>();
            compositeEffect->Mode(CanvasComposite::DestinationOut);
            compositeEffect->AddSource(CompositionEffectSourceParameter(L"destination"));
            compositeEffect->AddSource(CompositionEffectSourceParameter(L"source"));
            const auto effectFactory = _c.CreateEffectFactory(*compositeEffect);
            const auto result = effectFactory.CreateBrush();
            result.SetSourceParameter(L"destination", SurfaceBrush_0());
            result.SetSourceParameter(L"source", SurfaceBrush_3());
            return result;
        }

        // - - PreComp layer: Creature
        CompositionEffectBrush EffectBrush_1()
        {
            auto compositeEffect = winrt::make_self<CompositeEffect>();
            compositeEffect->Mode(CanvasComposite::DestinationIn);
            compositeEffect->AddSource(CompositionEffectSourceParameter(L"destination"));
            compositeEffect->AddSource(CompositionEffectSourceParameter(L"source"));
            const auto effectFactory = _c.CreateEffectFactory(*compositeEffect);
            const auto result = effectFactory.CreateBrush();
            result.SetSourceParameter(L"destination", SurfaceBrush_1());
            result.SetSourceParameter(L"source", SurfaceBrush_2());
            return result;
        }

        // - Layer aggregator
        // Offset:<600, 600>
        CompositionLinearGradientBrush LinearGradientBrush_0()
        {
            const auto result = _c.CreateLinearGradientBrush();
            const auto colorStops = result.ColorStops();
            colorStops.Append(GradientStop_0p004_AlmostDarkSlateGray_FF232934());
            colorStops.Append(GradientStop_0p254_AlmostDarkSlateGray_FF272B37());
            colorStops.Append(GradientStop_0p504_AlmostDarkSlateGray_FF2A2D39());
            colorStops.Append(GradientStop_1_AlmostDarkSlateGray_FF2E3440());
            result.MappingMode(CompositionMappingMode::Absolute);
            result.StartPoint({ 0.0F, 305.0F });
            result.EndPoint({ 0.0F, 169.350006F });
            return result;
        }

        // - Layer aggregator
        // ShapeGroup: Group 2
        CompositionLinearGradientBrush LinearGradientBrush_1()
        {
            const auto result = _c.CreateLinearGradientBrush();
            const auto colorStops = result.ColorStops();
            colorStops.Append(GradientStop_0_SemiTransparentAlmostDarkSlateGray_422F2F2F());
            colorStops.Append(GradientStop_0p535_SemiTransparentAlmostDimGray_42626262());
            colorStops.Append(GradientStop_1_SemiTransparentAlmostLightSlateGray_42959595());
            result.MappingMode(CompositionMappingMode::Absolute);
            result.StartPoint({ 0.0F, 305.0F });
            result.EndPoint({ 0.0F, 169.350006F });
            return result;
        }

        // - - - PreComp layer: Creature
        // - Shape tree root for layer: Layer 4
        // Offset:<600, 600>
        CompositionLinearGradientBrush LinearGradientBrush_2()
        {
            const auto result = _c.CreateLinearGradientBrush();
            const auto colorStops = result.ColorStops();
            colorStops.Append(_gradientStop_0p004_AlmostDarkSlateGray_FF232934);
            colorStops.Append(_gradientStop_0p254_AlmostDarkSlateGray_FF272B37);
            colorStops.Append(_gradientStop_0p504_AlmostDarkSlateGray_FF2A2D39);
            colorStops.Append(_gradientStop_1_AlmostDarkSlateGray_FF2E3440);
            result.MappingMode(CompositionMappingMode::Absolute);
            result.StartPoint({ -92.0F, 277.0F });
            result.EndPoint({ 132.072006F, 70.8160019F });
            return result;
        }

        // - - - - - - - - PreComp layer: Creature
        // - Shape tree root for layer: Layer 3
        // Offset:<600, 600>
        CompositionLinearGradientBrush LinearGradientBrush_3()
        {
            const auto result = _c.CreateLinearGradientBrush();
            const auto colorStops = result.ColorStops();
            colorStops.Append(_gradientStop_0p004_AlmostDarkSlateGray_FF232934);
            colorStops.Append(_gradientStop_0p254_AlmostDarkSlateGray_FF272B37);
            colorStops.Append(_gradientStop_0p504_AlmostDarkSlateGray_FF2A2D39);
            colorStops.Append(_gradientStop_1_AlmostDarkSlateGray_FF2E3440);
            result.MappingMode(CompositionMappingMode::Absolute);
            result.StartPoint({ 45.0F, 182.0F });
            result.EndPoint({ 60.9720001F, 182.0F });
            return result;
        }

        // - - - - - - - - PreComp layer: Creature
        // - Shape tree root for layer: Layer 3
        // Offset:<600, 600>
        CompositionLinearGradientBrush LinearGradientBrush_4()
        {
            const auto result = _c.CreateLinearGradientBrush();
            const auto colorStops = result.ColorStops();
            colorStops.Append(_gradientStop_0p004_AlmostDarkSlateGray_FF232934);
            colorStops.Append(_gradientStop_0p254_AlmostDarkSlateGray_FF272B37);
            colorStops.Append(_gradientStop_0p504_AlmostDarkSlateGray_FF2A2D39);
            colorStops.Append(_gradientStop_1_AlmostDarkSlateGray_FF2E3440);
            result.MappingMode(CompositionMappingMode::Absolute);
            result.StartPoint({ -62.0F, 186.0F });
            result.EndPoint({ -46.0279999F, 186.0F });
            return result;
        }

        // - - Shape tree root for layer: Layer 2
        // ShapeGroup: Group 6
        CompositionLinearGradientBrush LinearGradientBrush_5()
        {
            const auto result = _c.CreateLinearGradientBrush();
            const auto colorStops = result.ColorStops();
            colorStops.Append(GradientStop_0_AlmostTomato_FFEB6B38());
            colorStops.Append(GradientStop_0p184_AlmostChocolate_FFEF7C2C());
            colorStops.Append(GradientStop_0p367_AlmostDarkOrange_FFF58E1F());
            colorStops.Append(GradientStop_1_AlmostOrange_FFFFAF06());
            result.MappingMode(CompositionMappingMode::Absolute);
            result.StartPoint({ -408.569F, -309.342987F });
            result.EndPoint({ -127.420998F, -419.687012F });
            return result;
        }

        // - - Shape tree root for layer: Layer 2
        // ShapeGroup: Group 6
        CompositionLinearGradientBrush LinearGradientBrush_6()
        {
            const auto result = _c.CreateLinearGradientBrush();
            const auto colorStops = result.ColorStops();
            colorStops.Append(_gradientStop_0_AlmostTomato_FFEB6B38);
            colorStops.Append(_gradientStop_0p184_AlmostChocolate_FFEF7C2C);
            colorStops.Append(_gradientStop_0p367_AlmostDarkOrange_FFF58E1F);
            colorStops.Append(_gradientStop_1_AlmostOrange_FFFFAF06);
            result.MappingMode(CompositionMappingMode::Absolute);
            result.StartPoint({ -528.679016F, -37.1949997F });
            result.EndPoint({ 33.1199989F, -213.541F });
            return result;
        }

        CompositionPathGeometry PathGeometry_00()
        {
            return _pathGeometry_00 = _c.CreatePathGeometry(CompositionPath(CanvasGeometryToIGeometrySource2D(Geometry_00())));
        }

        // - - - PreComp layer: Creature
        // - Shape tree root for layer: Layer 4
        // Offset:<600, 600>
        CompositionPathGeometry PathGeometry_01()
        {
            return _c.CreatePathGeometry(CompositionPath(CanvasGeometryToIGeometrySource2D(Geometry_01())));
        }

        // - - - - - - - - PreComp layer: Creature
        // - Shape tree root for layer: Layer 3
        // Offset:<600, 600>
        CompositionPathGeometry PathGeometry_02()
        {
            return _c.CreatePathGeometry(CompositionPath(CanvasGeometryToIGeometrySource2D(Geometry_02())));
        }

        // - - - - - - - - PreComp layer: Creature
        // - Shape tree root for layer: Layer 3
        // Offset:<600, 600>
        CompositionPathGeometry PathGeometry_03()
        {
            return _c.CreatePathGeometry(CompositionPath(CanvasGeometryToIGeometrySource2D(Geometry_03())));
        }

        // - - - - - - - - PreComp layer: Creature
        // - Shape tree root for layer: Layer 3
        // Offset:<600, 600>
        CompositionPathGeometry PathGeometry_04()
        {
            return _c.CreatePathGeometry(CompositionPath(CanvasGeometryToIGeometrySource2D(Geometry_04())));
        }

        // - - - - - - - - PreComp layer: Creature
        // - Shape tree root for layer: Layer 3
        // Offset:<600, 600>
        CompositionPathGeometry PathGeometry_05()
        {
            return _c.CreatePathGeometry(CompositionPath(CanvasGeometryToIGeometrySource2D(Geometry_05())));
        }

        CompositionPathGeometry PathGeometry_06()
        {
            return _pathGeometry_06 = _c.CreatePathGeometry(CompositionPath(CanvasGeometryToIGeometrySource2D(Geometry_06())));
        }

        // - Shape tree root for layer: mask
        // Offset:<600, 600>
        CompositionPathGeometry PathGeometry_07()
        {
            return _c.CreatePathGeometry(CompositionPath(CanvasGeometryToIGeometrySource2D(Geometry_07())));
        }

        // - - Shape tree root for layer: Layer 2
        // ShapeGroup: Group 6
        CompositionPathGeometry PathGeometry_08()
        {
            return _c.CreatePathGeometry(CompositionPath(CanvasGeometryToIGeometrySource2D(Geometry_08())));
        }

        // - - Shape tree root for layer: Layer 2
        // ShapeGroup: Group 6
        CompositionPathGeometry PathGeometry_09()
        {
            return _c.CreatePathGeometry(CompositionPath(CanvasGeometryToIGeometrySource2D(Geometry_09())));
        }

        // - - Shape tree root for layer: Layer 2
        // ShapeGroup: Group 6
        CompositionPathGeometry PathGeometry_10()
        {
            return _c.CreatePathGeometry(CompositionPath(CanvasGeometryToIGeometrySource2D(Geometry_10())));
        }

        // - - Shape tree root for layer: Layer 2
        // ShapeGroup: Group 6
        CompositionPathGeometry PathGeometry_11()
        {
            return _c.CreatePathGeometry(CompositionPath(CanvasGeometryToIGeometrySource2D(Geometry_11())));
        }

        // - - - - - - - - PreComp layer: Creature
        // - Shape tree root for layer: Layer 3
        // Offset:<600, 600>
        CompositionRadialGradientBrush RadialGradientBrush_0()
        {
            const auto result = _c.CreateRadialGradientBrush();
            const auto colorStops = result.ColorStops();
            colorStops.Append(GradientStop_0_AlmostLavender_FFEBEBEB());
            colorStops.Append(GradientStop_0p833_AlmostSilver_FFC5C7CF());
            colorStops.Append(GradientStop_0p916_AlmostSilver_FFB4B7C1());
            colorStops.Append(GradientStop_1_AlmostDarkGray_FFA1A6B3());
            result.MappingMode(CompositionMappingMode::Absolute);
            result.EllipseCenter({ 56.0F, 171.0F });
            result.EllipseRadius({ 41.8759995F, 41.8759995F });
            return result;
        }

        // - - - - - - - - PreComp layer: Creature
        // - Shape tree root for layer: Layer 3
        // Offset:<600, 600>
        CompositionRadialGradientBrush RadialGradientBrush_1()
        {
            const auto result = _c.CreateRadialGradientBrush();
            const auto colorStops = result.ColorStops();
            colorStops.Append(_gradientStop_0_AlmostLavender_FFEBEBEB);
            colorStops.Append(_gradientStop_0p833_AlmostSilver_FFC5C7CF);
            colorStops.Append(_gradientStop_0p916_AlmostSilver_FFB4B7C1);
            colorStops.Append(_gradientStop_1_AlmostDarkGray_FFA1A6B3);
            result.MappingMode(CompositionMappingMode::Absolute);
            result.EllipseCenter({ -51.0F, 171.0F });
            result.EllipseRadius({ 41.8759995F, 41.8759995F });
            return result;
        }

        // Layer aggregator
        // Path 1
        CompositionSpriteShape SpriteShape_00()
        {
            // Offset:<600, 600>
            const auto geometry = PathGeometry_00();
            const auto result = CreateSpriteShape(geometry, { 1.0F, 0.0F, 0.0F, 1.0F, 600.0F, 600.0F }, LinearGradientBrush_0());;
            return result;
        }

        // Layer aggregator
        // Path 1
        CompositionSpriteShape SpriteShape_01()
        {
            const auto result = _c.CreateSpriteShape(_pathGeometry_00);
            result.CenterPoint({ -1.83299994F, 259.407013F });
            result.FillBrush(LinearGradientBrush_1());
            StartProgressBoundAnimation(result, L"Scale", ScaleVector2Animation_0(), RootProgress());
            StartProgressBoundAnimation(result, L"Offset", OffsetVector2Animation_0(), _rootProgress);
            return result;
        }

        // - - PreComp layer: Creature
        // Shape tree root for layer: Layer 4
        // Path 1
        CompositionSpriteShape SpriteShape_02()
        {
            // Offset:<600, 600>
            const auto geometry = PathGeometry_01();
            const auto result = CreateSpriteShape(geometry, { 1.0F, 0.0F, 0.0F, 1.0F, 600.0F, 600.0F }, LinearGradientBrush_2());;
            return result;
        }

        // - - - - - - - PreComp layer: Creature
        // Shape tree root for layer: Layer 3
        // Path 1
        CompositionSpriteShape SpriteShape_03()
        {
            // Offset:<600, 600>
            const auto geometry = PathGeometry_02();
            const auto result = CreateSpriteShape(geometry, { 1.0F, 0.0F, 0.0F, 1.0F, 600.0F, 600.0F }, RadialGradientBrush_0());;
            return result;
        }

        // - - - - - - - PreComp layer: Creature
        // Shape tree root for layer: Layer 3
        // Path 1
        CompositionSpriteShape SpriteShape_04()
        {
            // Offset:<600, 600>
            const auto geometry = PathGeometry_03();
            const auto result = CreateSpriteShape(geometry, { 1.0F, 0.0F, 0.0F, 1.0F, 600.0F, 600.0F }, LinearGradientBrush_3());;
            return result;
        }

        // - - - - - - - PreComp layer: Creature
        // Shape tree root for layer: Layer 3
        // Path 1
        CompositionSpriteShape SpriteShape_05()
        {
            // Offset:<600, 600>
            const auto geometry = PathGeometry_04();
            const auto result = CreateSpriteShape(geometry, { 1.0F, 0.0F, 0.0F, 1.0F, 600.0F, 600.0F }, RadialGradientBrush_1());;
            return result;
        }

        // - - - - - - - PreComp layer: Creature
        // Shape tree root for layer: Layer 3
        // Path 1
        CompositionSpriteShape SpriteShape_06()
        {
            // Offset:<600, 600>
            const auto geometry = PathGeometry_05();
            const auto result = CreateSpriteShape(geometry, { 1.0F, 0.0F, 0.0F, 1.0F, 600.0F, 600.0F }, LinearGradientBrush_4());;
            return result;
        }

        // - - - - - - - - - PreComp layer: Creature
        // - - PreComp layer: Eyelids_01
        // - Layer aggregator
        // Path 1
        CompositionSpriteShape SpriteShape_07()
        {
            // Offset:<-54.25, 180>, Scale:<1.14583, 1.14583>
            const auto geometry = PathGeometry_06();
            const auto result = CreateSpriteShape(geometry, { 1.14583004F, 0.0F, 0.0F, 1.14583004F, -54.25F, 180.0F }, ThemeColor_Color_FFFFFF());;
            return result;
        }

        // - - - - - - - - - PreComp layer: Creature
        // - - PreComp layer: Eyelids_01
        // - Layer aggregator
        // Path 1
        CompositionSpriteShape SpriteShape_08()
        {
            // Offset:<-54.25, 180>, Scale:<1.14583, 1.14583>
            const auto geometry = _pathGeometry_06;
            const auto result = CreateSpriteShape(geometry, { 1.14583004F, 0.0F, 0.0F, 1.14583004F, -54.25F, 180.0F }, _themeColor_Color_FFFFFF);;
            return result;
        }

        // Shape tree root for layer: mask
        // Path 1
        CompositionSpriteShape SpriteShape_09()
        {
            // Offset:<604, 1042>
            const auto geometry = PathGeometry_07();
            const auto result = CreateSpriteShape(geometry, { 1.0F, 0.0F, 0.0F, 1.0F, 604.0F, 1042.0F }, _themeColor_Color_FFFFFF);;
            return result;
        }

        // - Shape tree root for layer: Layer 2
        // Path 1
        CompositionSpriteShape SpriteShape_10()
        {
            const auto result = _c.CreateSpriteShape(PathGeometry_08());
            result.FillBrush(LinearGradientBrush_5());
            return result;
        }

        // - Shape tree root for layer: Layer 2
        // Path 1
        CompositionSpriteShape SpriteShape_11()
        {
            const auto result = _c.CreateSpriteShape(PathGeometry_09());
            result.FillBrush(LinearGradientBrush_6());
            return result;
        }

        // - Shape tree root for layer: Layer 2
        // Path 1
        CompositionSpriteShape SpriteShape_12()
        {
            const auto result = _c.CreateSpriteShape(PathGeometry_10());
            result.FillBrush(ThemeColor_Color_F7F8F9());
            return result;
        }

        // - Shape tree root for layer: Layer 2
        // Path 1
        CompositionSpriteShape SpriteShape_13()
        {
            const auto result = _c.CreateSpriteShape(PathGeometry_11());
            result.FillBrush(_themeColor_Color_F7F8F9);
            return result;
        }

        CompositionSurfaceBrush SurfaceBrush_0()
        {
            return _c.CreateSurfaceBrush(VisualSurface_0());
        }

        // - - - PreComp layer: Creature
        CompositionSurfaceBrush SurfaceBrush_1()
        {
            return _c.CreateSurfaceBrush(VisualSurface_1());
        }

        // - - - PreComp layer: Creature
        CompositionSurfaceBrush SurfaceBrush_2()
        {
            return _c.CreateSurfaceBrush(VisualSurface_2());
        }

        CompositionSurfaceBrush SurfaceBrush_3()
        {
            return _c.CreateSurfaceBrush(VisualSurface_3());
        }

        CompositionVisualSurface VisualSurface_0()
        {
            const auto result = _c.CreateVisualSurface();
            result.SourceVisual(ContainerVisual_0());
            result.SourceSize({ 1200.0F, 1200.0F });
            return result;
        }

        // - - - - PreComp layer: Creature
        CompositionVisualSurface VisualSurface_1()
        {
            const auto result = _c.CreateVisualSurface();
            result.SourceVisual(ContainerVisual_3());
            result.SourceSize({ 1200.0F, 1200.0F });
            return result;
        }

        // - - - - PreComp layer: Creature
        CompositionVisualSurface VisualSurface_2()
        {
            const auto result = _c.CreateVisualSurface();
            result.SourceVisual(ContainerVisual_4());
            result.SourceSize({ 1200.0F, 1200.0F });
            return result;
        }

        CompositionVisualSurface VisualSurface_3()
        {
            const auto result = _c.CreateVisualSurface();
            result.SourceVisual(ContainerVisual_6());
            result.SourceSize({ 1200.0F, 1200.0F });
            return result;
        }

        ContainerVisual ContainerVisual_0()
        {
            const auto result = _c.CreateContainerVisual();
            result.BorderMode(CompositionBorderMode::Soft);
            // PreComp layer: Creature
            result.Children().InsertAtTop(ContainerVisual_1());
            return result;
        }

        // Transforms for Creature
        ContainerVisual ContainerVisual_1()
        {
            const auto result = _c.CreateContainerVisual();
            result.CenterPoint({ 600.0F, 600.0F, 0.0F });
            result.Scale({ 1.0F, 1.0F, 0.0F });
            result.Children().InsertAtTop(ContainerVisual_2());
            StartProgressBoundAnimation(result, L"Offset", OffsetVector3Animation(), _rootProgress);
            return result;
        }

        // PreComp layer: Creature
        ContainerVisual ContainerVisual_2()
        {
            const auto result = _c.CreateContainerVisual();
            result.Clip(InsetClip_0());
            result.Size({ 1200.0F, 1200.0F });
            const auto children = result.Children();
            // Shape tree root for layer: Layer 4
            children.InsertAtTop(ShapeVisual_1());
            children.InsertAtTop(SpriteVisual_1());
            return result;
        }

        // - - - - - PreComp layer: Creature
        ContainerVisual ContainerVisual_3()
        {
            const auto result = _c.CreateContainerVisual();
            result.BorderMode(CompositionBorderMode::Soft);
            // Shape tree root for layer: Layer 3
            result.Children().InsertAtTop(ShapeVisual_2());
            return result;
        }

        // - - - - - PreComp layer: Creature
        ContainerVisual ContainerVisual_4()
        {
            const auto result = _c.CreateContainerVisual();
            result.BorderMode(CompositionBorderMode::Soft);
            // PreComp layer: Eyelids_01
            result.Children().InsertAtTop(ContainerVisual_5());
            return result;
        }

        // - - - - - - PreComp layer: Creature
        // Transforms for Eyelids_01 Scale(1.1068,1.1068,0), Offset(504,724.75,0)
        ContainerVisual ContainerVisual_5()
        {
            const auto result = _c.CreateContainerVisual();
            result.Clip(_insetClip_0);
            result.Size({ 208.0F, 103.0F });
            // Offset:<492.8928, 719.2498>, Scale:<1.1068, 1.1068>
            result.TransformMatrix({ 1.10679996F, 0.0F, 0.0F, 0.0F, 0.0F, 1.10679996F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 492.892792F, 719.249817F, 0.0F, 1.0F });
            // Layer aggregator
            result.Children().InsertAtTop(ShapeVisual_3());
            return result;
        }

        ContainerVisual ContainerVisual_6()
        {
            const auto result = _c.CreateContainerVisual();
            result.BorderMode(CompositionBorderMode::Soft);
            // Shape tree root for layer: mask
            result.Children().InsertAtTop(ShapeVisual_4());
            return result;
        }

        // The root of the composition.
        ContainerVisual Root()
        {
            const auto result = _root = _c.CreateContainerVisual();
            const auto propertySet = result.Properties();
            propertySet.InsertScalar(L"Progress", 0.0F);
            propertySet.InsertScalar(L"t0", 0.0F);
            const auto children = result.Children();
            // Layer aggregator
            children.InsertAtTop(ShapeVisual_0());
            children.InsertAtTop(SpriteVisual_0());
            // Shape tree root for layer: Layer 2
            children.InsertAtTop(ShapeVisual_5());
            StartProgressBoundAnimation(result.Properties(), L"t0", t0ScalarAnimation_0_to_1(), _rootProgress);
            return result;
        }

        CubicBezierEasingFunction CubicBezierEasingFunction_0()
        {
            return _cubicBezierEasingFunction_0 = _c.CreateCubicBezierEasingFunction({ 0.333000004F, 0.0F }, { 0.666999996F, 1.0F });
        }

        CubicBezierEasingFunction CubicBezierEasingFunction_1()
        {
            return _cubicBezierEasingFunction_1 = _c.CreateCubicBezierEasingFunction({ 0.333000004F, 0.0F }, { 0.833000004F, 1.0F });
        }

        CubicBezierEasingFunction CubicBezierEasingFunction_2()
        {
            return _cubicBezierEasingFunction_2 = _c.CreateCubicBezierEasingFunction({ 0.166999996F, 0.0F }, { 0.833000004F, 1.0F });
        }

        CubicBezierEasingFunction CubicBezierEasingFunction_3()
        {
            return _cubicBezierEasingFunction_3 = _c.CreateCubicBezierEasingFunction({ 0.166999996F, 0.0F }, { 0.666999996F, 1.0F });
        }

        ExpressionAnimation RootProgress()
        {
            const auto result = _rootProgress = _c.CreateExpressionAnimation(L"_.Progress");
            result.SetReferenceParameter(L"_", _root);
            return result;
        }

        InsetClip InsetClip_0()
        {
            const auto result = _insetClip_0 = _c.CreateInsetClip();
            return result;
        }

        // - Shape tree root for layer: Layer 2
        // Rotation
        ScalarKeyFrameAnimation RotationAngleInDegreesScalarAnimation_17_to_17()
        {
            // Frame 0.
            const auto result = CreateScalarKeyFrameAnimation(0.0F, 17.0F, _holdThenStepEasingFunction);
            // Frame 15.
            result.InsertKeyFrame(0.115384616F, -21.0F, _cubicBezierEasingFunction_0);
            // Frame 20.
            result.InsertKeyFrame(0.15384616F, -11.0F, _cubicBezierEasingFunction_1);
            // Frame 80.
            result.InsertKeyFrame(0.615384638F, -11.0F, _cubicBezierEasingFunction_2);
            // Frame 91.
            result.InsertKeyFrame(0.699999988F, -21.0F, _cubicBezierEasingFunction_3);
            // Frame 100.
            result.InsertKeyFrame(0.769230783F, 17.0F, _cubicBezierEasingFunction_0);
            return result;
        }

        ScalarKeyFrameAnimation t0ScalarAnimation_0_to_1()
        {
            // Frame 9.
            const auto result = CreateScalarKeyFrameAnimation(0.06923078F, 0.0F, _stepThenHoldEasingFunction);
            result.SetReferenceParameter(L"_", _root);
            // Frame 20.
            result.InsertKeyFrame(0.153846145F, 1.0F, _cubicBezierEasingFunction_0);
            // Frame 80.
            result.InsertKeyFrame(0.615384698F, 0.0F, _stepThenHoldEasingFunction);
            // Frame 85.
            result.InsertKeyFrame(0.653846085F, 1.0F, _cubicBezierEasingFunction_0);
            return result;
        }

        // Layer aggregator
        ShapeVisual ShapeVisual_0()
        {
            const auto result = _c.CreateShapeVisual();
            result.Size({ 1200.0F, 1200.0F });
            const auto shapes = result.Shapes();
            // Offset:<600, 600>
            shapes.Append(SpriteShape_00());
            // ShapeGroup: Group 2
            shapes.Append(SpriteShape_01());
            return result;
        }

        // - PreComp layer: Creature
        // Shape tree root for layer: Layer 4
        ShapeVisual ShapeVisual_1()
        {
            const auto result = _c.CreateShapeVisual();
            result.Size({ 1200.0F, 1200.0F });
            // Offset:<600, 600>
            result.Shapes().Append(SpriteShape_02());
            return result;
        }

        // - - - - - - PreComp layer: Creature
        // Shape tree root for layer: Layer 3
        ShapeVisual ShapeVisual_2()
        {
            const auto result = _c.CreateShapeVisual();
            result.Size({ 1200.0F, 1200.0F });
            const auto shapes = result.Shapes();
            // Offset:<600, 600>
            shapes.Append(SpriteShape_03());
            // Offset:<600, 600>
            shapes.Append(SpriteShape_04());
            // Offset:<600, 600>
            shapes.Append(SpriteShape_05());
            // Offset:<600, 600>
            shapes.Append(SpriteShape_06());
            return result;
        }

        // - - - - - - - PreComp layer: Creature
        // PreComp layer: Eyelids_01
        // Layer aggregator
        ShapeVisual ShapeVisual_3()
        {
            const auto result = _c.CreateShapeVisual();
            result.Size({ 208.0F, 103.0F });
            const auto shapes = result.Shapes();
            shapes.Append(ContainerShape_0());
            shapes.Append(ContainerShape_1());
            return result;
        }

        // Shape tree root for layer: mask
        ShapeVisual ShapeVisual_4()
        {
            const auto result = _c.CreateShapeVisual();
            result.Size({ 1200.0F, 1200.0F });
            // Offset:<600, 600>
            result.Shapes().Append(SpriteShape_09());
            return result;
        }

        // Shape tree root for layer: Layer 2
        ShapeVisual ShapeVisual_5()
        {
            const auto result = _c.CreateShapeVisual();
            result.Size({ 1200.0F, 1200.0F });
            result.Shapes().Append(ContainerShape_2());
            return result;
        }

        SpriteVisual SpriteVisual_0()
        {
            const auto result = _c.CreateSpriteVisual();
            result.Size({ 1200.0F, 1200.0F });
            result.Brush(EffectBrush_0());
            return result;
        }

        // - PreComp layer: Creature
        SpriteVisual SpriteVisual_1()
        {
            const auto result = _c.CreateSpriteVisual();
            result.Size({ 1200.0F, 1200.0F });
            result.Brush(EffectBrush_1());
            return result;
        }

        StepEasingFunction HoldThenStepEasingFunction()
        {
            const auto result = _holdThenStepEasingFunction = _c.CreateStepEasingFunction();
            result.IsFinalStepSingleFrame(true);
            return result;
        }

        StepEasingFunction StepThenHoldEasingFunction()
        {
            const auto result = _stepThenHoldEasingFunction = _c.CreateStepEasingFunction();
            result.IsInitialStepSingleFrame(true);
            return result;
        }

        // - Layer aggregator
        // ShapeGroup: Group 2
        // Offset
        Vector2KeyFrameAnimation OffsetVector2Animation_0()
        {
            // Frame 0.
            const auto result = CreateVector2KeyFrameAnimation(0.0F, { 599.833008F, 606.593018F }, _holdThenStepEasingFunction);
            // Frame 15.
            result.InsertKeyFrame(0.115384616F, { 656.833008F, 606.593018F }, _cubicBezierEasingFunction_0);
            // Frame 91.
            result.InsertKeyFrame(0.699999988F, { 656.833008F, 606.593018F }, _holdThenStepEasingFunction);
            // Frame 100.
            result.InsertKeyFrame(0.769230783F, { 599.833008F, 606.593018F }, _cubicBezierEasingFunction_0);
            return result;
        }

        // - Shape tree root for layer: Layer 2
        // Offset
        Vector2KeyFrameAnimation OffsetVector2Animation_1()
        {
            // Frame 0.
            const auto result = CreateVector2KeyFrameAnimation(0.0F, { 588.0F, 605.0F }, _holdThenStepEasingFunction);
            // Frame 15.
            result.InsertKeyFrame(0.115384616F, { 600.0F, 605.0F }, _cubicBezierEasingFunction_0);
            // Frame 91.
            result.InsertKeyFrame(0.699999988F, { 600.0F, 605.0F }, _holdThenStepEasingFunction);
            // Frame 100.
            result.InsertKeyFrame(0.769230783F, { 588.0F, 605.0F }, _cubicBezierEasingFunction_0);
            return result;
        }

        // - Layer aggregator
        // ShapeGroup: Group 2
        // Scale
        Vector2KeyFrameAnimation ScaleVector2Animation_0()
        {
            // Frame 0.
            const auto result = CreateVector2KeyFrameAnimation(0.0F, { 0.910950005F, 0.910950005F }, HoldThenStepEasingFunction());
            // Frame 15.
            result.InsertKeyFrame(0.115384616F, { 1.19095004F, 1.19095004F }, CubicBezierEasingFunction_0());
            // Frame 20.
            result.InsertKeyFrame(0.15384616F, { 1.19095004F, 1.19095004F }, CubicBezierEasingFunction_1());
            // Frame 80.
            result.InsertKeyFrame(0.615384638F, { 1.19095004F, 1.19095004F }, CubicBezierEasingFunction_2());
            // Frame 91.
            result.InsertKeyFrame(0.699999988F, { 1.19095004F, 1.19095004F }, CubicBezierEasingFunction_3());
            // Frame 100.
            result.InsertKeyFrame(0.769230783F, { 0.910950005F, 0.910950005F }, _cubicBezierEasingFunction_0);
            return result;
        }

        // Scale
        Vector2KeyFrameAnimation ScaleVector2Animation_1()
        {
            // Frame 0.
            const auto result = _scaleVector2Animation_1 = CreateVector2KeyFrameAnimation(0.0F, { 1.0F, 1.0F }, StepThenHoldEasingFunction());
            // Frame 26.
            result.InsertKeyFrame(0.200000003F, { 1.0F, 1.0F }, _holdThenStepEasingFunction);
            // Frame 32.28.
            result.InsertKeyFrame(0.24834615F, { 1.0F, 0.0F }, _cubicBezierEasingFunction_0);
            // Frame 38.57.
            result.InsertKeyFrame(0.296700001F, { 1.0F, 0.0F }, _cubicBezierEasingFunction_0);
            // Frame 44.86.
            result.InsertKeyFrame(0.345053852F, { 1.0F, 1.0F }, _cubicBezierEasingFunction_0);
            // Frame 49.
            result.InsertKeyFrame(0.376923084F, { 1.0F, 1.0F }, _cubicBezierEasingFunction_0);
            // Frame 55.29.
            result.InsertKeyFrame(0.425276935F, { 1.0F, 0.0F }, _cubicBezierEasingFunction_0);
            // Frame 61.57.
            result.InsertKeyFrame(0.473630756F, { 1.0F, 0.0F }, _cubicBezierEasingFunction_0);
            // Frame 67.86.
            result.InsertKeyFrame(0.521980166F, { 1.0F, 1.0F }, _cubicBezierEasingFunction_0);
            return result;
        }

        // PreComp layer: Creature
        // Offset
        Vector3KeyFrameAnimation OffsetVector3Animation()
        {
            // Frame 0.
            const auto result = CreateVector3KeyFrameAnimation(0.0F, { 0.0F, 130.0F, 0.0F }, _holdThenStepEasingFunction);
            result.SetReferenceParameter(L"_", _root);
            // Frame 9.
            result.InsertKeyFrame(0.0692307726F, { 0.0F, -34.0F, 0.0F }, _cubicBezierEasingFunction_0);
            // Frame 20.
            result.InsertExpressionKeyFrame(0.153846145F, L"Pow(1-_.t0,3)*Vector3(0,-34,0)+(3*Square(1-_.t0)*_.t0*Vector3(0,-55.667,0))+(3*(1-_.t0)*Square(_.t0)*Vector3(0,-5.667,0))", _stepThenHoldEasingFunction);
            // Frame 20.
            result.InsertKeyFrame(0.15384616F, { 0.0F, 0.0F, 0.0F }, _stepThenHoldEasingFunction);
            // Frame 80.
            result.InsertKeyFrame(0.615384638F, { 0.0F, 0.0F, 0.0F }, _c.CreateCubicBezierEasingFunction({ 0.166999996F, 0.166999996F }, { 0.666999996F, 0.666999996F }));
            // Frame 85.
            result.InsertExpressionKeyFrame(0.653846085F, L"3*Square(1-_.t0)*_.t0*Vector3(0,-5.667,0)+(3*(1-_.t0)*Square(_.t0)*Vector3(0,-55.667,0))+(Pow(_.t0,3)*Vector3(0,-34,0))", _stepThenHoldEasingFunction);
            // Frame 100.
            result.InsertKeyFrame(0.769230783F, { 0.0F, -34.0F, 0.0F }, _stepThenHoldEasingFunction);
            // Frame 100.
            result.InsertKeyFrame(0.769230843F, { 0.0F, 130.0F, 0.0F }, _cubicBezierEasingFunction_0);
            return result;
        }

        static IGeometrySource2D CanvasGeometryToIGeometrySource2D(winrt::com_ptr<CanvasGeometry> geo)
        {
            return geo.as<IGeometrySource2D>();
        }

    public:
        UnderConstruction_AnimatedVisual(
            Compositor compositor,
            CompositionPropertySet themeProperties)
            : _c{compositor}
            , _themeProperties{themeProperties}
            , _reusableExpressionAnimation(compositor.CreateExpressionAnimation())
        {
            winrt::check_hresult(D2D1CreateFactory(D2D1_FACTORY_TYPE_SINGLE_THREADED, _d2dFactory.put()));
            const auto _ = Root();
        }

        void Close()
        {
            if (_root)
            {
                _root.Close();
            }
        }

        TimeSpan Duration() const
        {
            return TimeSpan{ c_durationTicks };
        }

        Visual RootVisual() const
        {
            return _root;
        }

        float2 Size() const
        {
            return { 1200.0F, 1200.0F };
        }

        static bool IsRuntimeCompatible()
        {
            return winrt::Windows::Foundation::Metadata::ApiInformation::IsApiContractPresent(L"Windows.Foundation.UniversalApiContract", 8);
        }
    };

    float4 UnderConstruction::ColorAsVector4(Color color)
    {
        return { static_cast<float>(color.R), static_cast<float>(color.G), static_cast<float>(color.B), static_cast<float>(color.A) };
    }

    CompositionPropertySet UnderConstruction::EnsureThemeProperties(Compositor compositor)
    {
        if (_themeProperties == nullptr)
        {
            _themeProperties = compositor.CreatePropertySet();
            _themeProperties.InsertVector4(L"Color_F7F8F9", ColorAsVector4((Color)_themeColor_F7F8F9));
            _themeProperties.InsertVector4(L"Color_FFFFFF", ColorAsVector4((Color)_themeColor_FFFFFF));
        }

        return _themeProperties;
    }

    Color UnderConstruction::Color_F7F8F9()
    {
        return _themeColor_F7F8F9;
    }

    void UnderConstruction::Color_F7F8F9(Color value)
    {
        _themeColor_F7F8F9 = value;
        if (_themeProperties != nullptr)
        {
            _themeProperties.InsertVector4(L"Color_F7F8F9", ColorAsVector4((Color)_themeColor_F7F8F9));
        }
    }

    Color UnderConstruction::Color_FFFFFF()
    {
        return _themeColor_FFFFFF;
    }

    void UnderConstruction::Color_FFFFFF(Color value)
    {
        _themeColor_FFFFFF = value;
        if (_themeProperties != nullptr)
        {
            _themeProperties.InsertVector4(L"Color_FFFFFF", ColorAsVector4((Color)_themeColor_FFFFFF));
        }
    }

    winrt::Microsoft::UI::Xaml::Controls::IAnimatedVisual UnderConstruction::TryCreateAnimatedVisual(
        Compositor const& compositor)
    {
        IInspectable diagnostics = nullptr;
        return TryCreateAnimatedVisual(compositor, diagnostics);
    }

    winrt::Microsoft::UI::Xaml::Controls::IAnimatedVisual UnderConstruction::TryCreateAnimatedVisual(
        Compositor const& compositor,
        IInspectable& diagnostics)
    {
        const auto _ = EnsureThemeProperties(compositor);
        diagnostics = nullptr;
        if (UnderConstruction_AnimatedVisual::IsRuntimeCompatible())
        {
            auto result = winrt::make<UnderConstruction_AnimatedVisual>(
                compositor,
                _themeProperties);
            return result;
        }

        return nullptr;
    }

    double UnderConstruction::FrameCount()
    {
        return 130.0;
    }

    double UnderConstruction::Framerate()
    {
        return 30.0;
    }

    TimeSpan UnderConstruction::Duration()
    {
        return TimeSpan{ 43333333L };
    }

    double UnderConstruction::FrameToProgress(double frameNumber)
    {
        return frameNumber / 130.0;
    }

    winrt::Windows::Foundation::Collections::IMapView<hstring, double> UnderConstruction::Markers()
    {
        return winrt::single_threaded_map<winrt::hstring, double>(
            std::map<winrt::hstring, double>
            {
            }
        ).GetView();
    }

    void UnderConstruction::SetColorProperty(hstring const& propertyName, Color value)
    {
        if (propertyName == L"Color_F7F8F9")
        {
            _themeColor_F7F8F9 = value;
        }
        else if (propertyName == L"Color_FFFFFF")
        {
            _themeColor_FFFFFF = value;
        }
        else
        {
            return;
        }

        if (_themeProperties != nullptr)
        {
            _themeProperties.InsertVector4(propertyName, ColorAsVector4(value));
        }
    }

    void UnderConstruction::SetScalarProperty(hstring const&, double)
    {
    }
} // end namespace
