#pragma once
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//       LottieGen version:
//           7.1.1
//       
//       Command:
//           LottieGen -GenerateColorBindings -Language Cppwinrt -MinimumUapVersion 8 -Namespace xmtmui -RootNamespace xmtmui -WinUIVersion 2.4 -InputFile UnderConstruction.json
//       
//       Input file:
//           UnderConstruction.json (21335 bytes created 10:15+07:00 May 29 2022)
//       
//       LottieGen source:
//           http://aka.ms/Lottie
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#include "UnderConstruction.g.h"

namespace winrt::xmtmui
{
    // Name:        Final_comp
    // Frame rate:  30 fps
    // Frame count: 130
    // Duration:    4333.3 mS
    // ___________________________________________________________
    // | Theme property |   Accessor   | Type  |  Default value  |
    // |________________|______________|_______|_________________|
    // | #F7F8F9        | Color_F7F8F9 | Color |    #FFF7F8F9    |
    // | #FFFFFF        | Color_FFFFFF | Color | #FFFFFFFF White |
    // -----------------------------------------------------------
    namespace implementation
    {
        class UnderConstruction
            : public UnderConstructionT<UnderConstruction>
        {
            winrt::Windows::UI::Composition::CompositionPropertySet _themeProperties{ nullptr };
            winrt::Windows::UI::Color _themeColor_F7F8F9{ 0xFF, 0xF7, 0xF8, 0xF9 };
            winrt::Windows::UI::Color _themeColor_FFFFFF{ 0xFF, 0xFF, 0xFF, 0xFF };
            winrt::Windows::UI::Composition::CompositionPropertySet EnsureThemeProperties(winrt::Windows::UI::Composition::Compositor compositor);

            static winrt::Windows::Foundation::Numerics::float4 ColorAsVector4(winrt::Windows::UI::Color color);
        public:
            // Animation duration: 4.333 seconds.
            static constexpr int64_t c_durationTicks{ 43333333L };

            // Theme property: Color_F7F8F9.
            static inline const winrt::Windows::UI::Color c_themeColor_F7F8F9{ 0xFF, 0xF7, 0xF8, 0xF9 };

            // Theme property: Color_FFFFFF.
            static inline const winrt::Windows::UI::Color c_themeColor_FFFFFF{ 0xFF, 0xFF, 0xFF, 0xFF };


            winrt::Windows::UI::Color Color_F7F8F9();
            void Color_F7F8F9(winrt::Windows::UI::Color value);

            winrt::Windows::UI::Color Color_FFFFFF();
            void Color_FFFFFF(winrt::Windows::UI::Color value);

            winrt::Microsoft::UI::Xaml::Controls::IAnimatedVisual TryCreateAnimatedVisual(
                winrt::Windows::UI::Composition::Compositor const& compositor);

            winrt::Microsoft::UI::Xaml::Controls::IAnimatedVisual TryCreateAnimatedVisual(
                winrt::Windows::UI::Composition::Compositor const& compositor,
                winrt::Windows::Foundation::IInspectable& diagnostics);

            // Gets the number of frames in the animation.
            double FrameCount();

            // Gets the framerate of the animation.
            double Framerate();

            // Gets the duration of the animation.
            winrt::Windows::Foundation::TimeSpan Duration();

            // Converts a zero-based frame number to the corresponding progress value denoting the
            // start of the frame.
            double FrameToProgress(double frameNumber);

            // Returns a map from marker names to corresponding progress values.
            winrt::Windows::Foundation::Collections::IMapView<hstring, double> Markers();

            // Sets the color property with the given name, or does nothing if no such property
            // exists.
            void SetColorProperty(hstring const& propertyName, winrt::Windows::UI::Color value);

            // Sets the scalar property with the given name, or does nothing if no such property
            // exists.
            void SetScalarProperty(hstring const& propertyName, double value);
        };
    }

    namespace factory_implementation
    {
        struct UnderConstruction : UnderConstructionT<UnderConstruction, implementation::UnderConstruction>
        {
        };
    }
}
