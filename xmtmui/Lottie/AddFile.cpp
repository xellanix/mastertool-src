//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//       LottieGen version:
//           7.1.1
//       
//       Command:
//           LottieGen -GenerateColorBindings -Language Cppwinrt -Namespace xmtmui -RootNamespace xmtmui -WinUIVersion 2.4 -InputFile AddFile.json
//       
//       Input file:
//           AddFile.json (31743 bytes created 15:03+07:00 Jun 7 2022)
//       
//       LottieGen source:
//           http://aka.ms/Lottie
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
// ___________________________________________________________
// |       Object stats       | UAP v12 count | UAP v7 count |
// |__________________________|_______________|______________|
// | All CompositionObjects   |           173 |          173 |
// |--------------------------+---------------+--------------|
// | Expression animators     |            10 |           10 |
// | KeyFrame animators       |             5 |            5 |
// | Reference parameters     |            10 |           10 |
// | Expression operations    |            20 |           20 |
// |--------------------------+---------------+--------------|
// | Animated brushes         |             5 |            5 |
// | Animated gradient stops  |             - |            - |
// | ExpressionAnimations     |             6 |            6 |
// | PathKeyFrameAnimations   |             - |            - |
// |--------------------------+---------------+--------------|
// | ContainerVisuals         |             6 |            6 |
// | ShapeVisuals             |             3 |            3 |
// |--------------------------+---------------+--------------|
// | ContainerShapes          |             - |            - |
// | CompositionSpriteShapes  |            24 |           24 |
// |--------------------------+---------------+--------------|
// | Brushes                  |             5 |            5 |
// | Gradient stops           |             - |            - |
// | CompositionVisualSurface |             - |            - |
// -----------------------------------------------------------
#include "pch.h"
#include "AddFile.h"
#if __has_include ("AddFile.g.cpp")
#include "AddFile.g.cpp"
#endif
#include <winrt/Windows.Foundation.Metadata.h>
#include <winrt/Windows.Foundation.Collections.h>
#include <winrt/Windows.UI.Composition.h>
#include "d2d1.h"
#include <d2d1_1.h>
#include <d2d1helper.h>
#include <Windows.Graphics.Interop.h>
#ifdef BUILD_WINDOWS
namespace ABI
{
#include <Windows.Graphics.Effects.Interop.h>
}
#else
#include <Windows.Graphics.Effects.Interop.h>
#endif
#include <winrt/Windows.Graphics.Effects.h>

using namespace winrt::Microsoft::UI::Xaml::Controls;
using namespace winrt::Windows::Foundation;
using namespace winrt::Windows::Foundation::Numerics;
using namespace winrt::Windows::Graphics;
using namespace winrt::Windows::UI;
using namespace winrt::Windows::UI::Composition;
using TimeSpan = winrt::Windows::Foundation::TimeSpan;

namespace winrt::xmtmui::implementation
{
    class CanvasGeometry : public winrt::implements<CanvasGeometry,
        IGeometrySource2D,
        ::ABI::Windows::Graphics::IGeometrySource2DInterop>
    {
        winrt::com_ptr<ID2D1Geometry> _geometry{ nullptr };

    public:
        CanvasGeometry(winrt::com_ptr<ID2D1Geometry> geometry)
            : _geometry{ geometry }
        { }

        // IGeometrySource2D.
        winrt::com_ptr<ID2D1Geometry> Geometry() { return _geometry; }

        // IGeometrySource2DInterop.
        IFACEMETHODIMP GetGeometry(ID2D1Geometry** value) override
        {
            _geometry.copy_to(value);
            return S_OK;
        }

        // IGeometrySource2DInterop.
        IFACEMETHODIMP TryGetGeometryUsingFactory(ID2D1Factory*, ID2D1Geometry**) override
        {
            return E_NOTIMPL;
        }
    };
    class AddFile_AnimatedVisual_UAPv12 : public winrt::implements<AddFile_AnimatedVisual_UAPv12,
            winrt::Microsoft::UI::Xaml::Controls::IAnimatedVisual,
            IClosable>
    {
        winrt::com_ptr<ID2D1Factory> _d2dFactory{ nullptr };
        static constexpr int64_t c_durationTicks{ 30166666L };
        Compositor const _c{ nullptr };
        ExpressionAnimation const _reusableExpressionAnimation{ nullptr };
        CompositionPropertySet const _themeProperties{ nullptr };
        CompositionColorBrush _themeColor_Color_0077D4{ nullptr };
        CompositionColorBrush _themeColor_Color_CCCCCC{ nullptr };
        CompositionColorBrush _themeColor_Color_E6E6E6{ nullptr };
        CompositionColorBrush _themeColor_Color_F2F2F2{ nullptr };
        CompositionColorBrush _themeColor_Color_FFFFFF{ nullptr };
        ContainerVisual _root{ nullptr };
        CubicBezierEasingFunction _cubicBezierEasingFunction_0{ nullptr };
        CubicBezierEasingFunction _cubicBezierEasingFunction_1{ nullptr };
        ExpressionAnimation _rootProgress{ nullptr };
        InsetClip _insetClip_0{ nullptr };
        ScalarKeyFrameAnimation _scalarAnimation_1_to_1_0{ nullptr };
        ScalarKeyFrameAnimation _scalarAnimation_1_to_1_1{ nullptr };
        StepEasingFunction _holdThenStepEasingFunction{ nullptr };
        StepEasingFunction _stepThenHoldEasingFunction{ nullptr };

        static void StartProgressBoundAnimation(
            CompositionObject target,
            winrt::hstring animatedPropertyName,
            CompositionAnimation animation,
            ExpressionAnimation controllerProgressExpression)
        {
            target.StartAnimation(animatedPropertyName, animation);
            const auto controller = target.TryGetAnimationController(animatedPropertyName);
            controller.Pause();
            controller.StartAnimation(L"Progress", controllerProgressExpression);
        }

        void BindProperty(
            CompositionObject target,
            winrt::hstring animatedPropertyName,
            winrt::hstring expression,
            winrt::hstring referenceParameterName,
            CompositionObject referencedObject)
        {
            _reusableExpressionAnimation.ClearAllParameters();
            _reusableExpressionAnimation.Expression(expression);
            _reusableExpressionAnimation.SetReferenceParameter(referenceParameterName, referencedObject);
            target.StartAnimation(animatedPropertyName, _reusableExpressionAnimation);
        }

        ScalarKeyFrameAnimation CreateScalarKeyFrameAnimation(float initialProgress, float initialValue, CompositionEasingFunction initialEasingFunction)
        {
            const auto result = _c.CreateScalarKeyFrameAnimation();
            result.Duration(TimeSpan{ c_durationTicks });
            result.InsertKeyFrame(initialProgress, initialValue, initialEasingFunction);
            return result;
        }

        CompositionSpriteShape CreateSpriteShape(CompositionGeometry geometry, float3x2 transformMatrix, CompositionBrush fillBrush)
        {
            const auto result = _c.CreateSpriteShape(geometry);
            result.TransformMatrix(transformMatrix);
            result.FillBrush(fillBrush);
            return result;
        }

        // - - - - - PreComp layer: file 2
        // - - - Layer aggregator
        // - -  Offset:<285.494, 309.049>
        winrt::com_ptr<CanvasGeometry> Geometry_00()
        {
            winrt::com_ptr<ID2D1PathGeometry> path{ nullptr };
            winrt::check_hresult(_d2dFactory->CreatePathGeometry(path.put()));
            winrt::com_ptr<ID2D1GeometrySink> sink{ nullptr };
            winrt::check_hresult(path->Open(sink.put()));
            sink->SetFillMode(D2D1_FILL_MODE_WINDING);
            sink->BeginFigure({ 400.503998F, 1.52400005F }, D2D1_FIGURE_BEGIN_FILLED);
            sink->AddLine({ 375.058014F, 8.08600044F });
            sink->AddLine({ 61.5540009F, 88.9329987F });
            sink->AddLine({ 36.1069984F, 95.4950027F });
            sink->AddBezier({ { 10.3900003F, 102.157997F }, { -5.08099985F, 128.380005F }, { 1.52400005F, 154.113007F } });
            sink->AddLine({ 111.864998F, 581.98999F });
            sink->AddBezier({ { 118.528F, 607.70697F }, { 144.751007F, 623.177979F }, { 170.483002F, 616.572998F } });
            sink->AddLine({ 170.548996F, 616.55603F });
            sink->AddLine({ 534.814026F, 522.619019F });
            sink->AddLine({ 534.880005F, 522.603027F });
            sink->AddBezier({ { 560.596985F, 515.940002F }, { 576.067993F, 489.71701F }, { 569.463013F, 463.984985F } });
            sink->AddLine({ 459.122009F, 36.1069984F });
            sink->AddBezier({ { 452.459015F, 10.3900003F }, { 426.235992F, -5.08099985F }, { 400.503998F, 1.52400005F } });
            sink->EndFigure(D2D1_FIGURE_END_CLOSED);
            winrt::check_hresult(sink->Close());
            auto result = winrt::make_self<CanvasGeometry>(path);
            return result;
        }

        // - - - - - PreComp layer: file 2
        // - - - Layer aggregator
        // - -  Offset:<285.494, 309.049>
        winrt::com_ptr<CanvasGeometry> Geometry_01()
        {
            winrt::com_ptr<ID2D1PathGeometry> path{ nullptr };
            winrt::check_hresult(_d2dFactory->CreatePathGeometry(path.put()));
            winrt::com_ptr<ID2D1GeometrySink> sink{ nullptr };
            winrt::check_hresult(path->Open(sink.put()));
            sink->SetFillMode(D2D1_FILL_MODE_WINDING);
            sink->BeginFigure({ 390.109985F, 1.08500004F }, D2D1_FIGURE_BEGIN_FILLED);
            sink->AddLine({ 359.971008F, 8.8579998F });
            sink->AddLine({ 55.8520012F, 87.2839966F });
            sink->AddLine({ 25.7129993F, 95.0559998F });
            sink->AddBezier({ { 7.39900017F, 99.8010025F }, { -3.61800003F, 118.474998F }, { 1.08500004F, 136.798996F } });
            sink->AddLine({ 111.426003F, 564.677002F });
            sink->AddBezier({ { 116.170998F, 582.98999F }, { 134.845001F, 594.007996F }, { 153.169006F, 589.304016F } });
            sink->AddLine({ 153.235001F, 589.286987F });
            sink->AddLine({ 517.5F, 495.350006F });
            sink->AddLine({ 517.567017F, 495.333008F });
            sink->AddBezier({ { 535.880005F, 490.588013F }, { 546.896973F, 471.915009F }, { 542.19397F, 453.589996F } });
            sink->AddLine({ 431.852997F, 25.7129993F });
            sink->AddBezier({ { 427.108002F, 7.39900017F }, { 408.43399F, -3.61800003F }, { 390.109985F, 1.08500004F } });
            sink->EndFigure(D2D1_FIGURE_END_CLOSED);
            winrt::check_hresult(sink->Close());
            auto result = winrt::make_self<CanvasGeometry>(path);
            return result;
        }

        // - - - - - PreComp layer: file 2
        // - - - Layer aggregator
        // - -  Offset:<285.494, 309.049>
        winrt::com_ptr<CanvasGeometry> Geometry_02()
        {
            winrt::com_ptr<ID2D1PathGeometry> path{ nullptr };
            winrt::check_hresult(_d2dFactory->CreatePathGeometry(path.put()));
            winrt::com_ptr<ID2D1GeometrySink> sink{ nullptr };
            winrt::check_hresult(path->Open(sink.put()));
            sink->SetFillMode(D2D1_FILL_MODE_WINDING);
            sink->BeginFigure({ 194.283005F, 15.7729998F }, D2D1_FIGURE_BEGIN_FILLED);
            sink->AddLine({ 10.0100002F, 63.2939987F });
            sink->AddBezier({ { 5.72300005F, 64.3949966F }, { 1.35500002F, 61.8120003F }, { 0.254000008F, 57.5250015F } });
            sink->AddBezier({ { -0.845000029F, 53.2439995F }, { 1.72899997F, 48.8810005F }, { 6.0079999F, 47.7729988F } });
            sink->AddLine({ 190.281006F, 0.252999991F });
            sink->AddBezier({ { 194.567993F, -0.845000029F }, { 198.934998F, 1.73899996F }, { 200.033005F, 6.02699995F } });
            sink->AddBezier({ { 201.128998F, 10.3039999F }, { 198.557007F, 14.6639996F }, { 194.283005F, 15.7729998F } });
            sink->EndFigure(D2D1_FIGURE_END_CLOSED);
            winrt::check_hresult(sink->Close());
            auto result = winrt::make_self<CanvasGeometry>(path);
            return result;
        }

        // - - - - - PreComp layer: file 2
        // - - - Layer aggregator
        // - -  Offset:<285.494, 309.049>
        winrt::com_ptr<CanvasGeometry> Geometry_03()
        {
            winrt::com_ptr<ID2D1PathGeometry> path{ nullptr };
            winrt::check_hresult(_d2dFactory->CreatePathGeometry(path.put()));
            winrt::com_ptr<ID2D1GeometrySink> sink{ nullptr };
            winrt::check_hresult(path->Open(sink.put()));
            sink->SetFillMode(D2D1_FILL_MODE_WINDING);
            sink->BeginFigure({ 226.309006F, 15.776F }, D2D1_FIGURE_BEGIN_FILLED);
            sink->AddLine({ 10.0249996F, 71.5510025F });
            sink->AddBezier({ { 5.73999977F, 72.6610031F }, { 1.36800003F, 70.086998F }, { 0.257999986F, 65.802002F } });
            sink->AddBezier({ { -0.851000011F, 61.5169983F }, { 1.72300005F, 57.144001F }, { 6.0079999F, 56.0349998F } });
            sink->AddLine({ 6.02299976F, 56.0309982F });
            sink->AddLine({ 222.307007F, 0.256000012F });
            sink->AddBezier({ { 226.593002F, -0.850000024F }, { 230.962997F, 1.72899997F }, { 232.067993F, 6.01499987F } });
            sink->AddBezier({ { 233.173004F, 10.3009996F }, { 230.595001F, 14.6709995F }, { 226.309006F, 15.776F } });
            sink->EndFigure(D2D1_FIGURE_END_CLOSED);
            winrt::check_hresult(sink->Close());
            auto result = winrt::make_self<CanvasGeometry>(path);
            return result;
        }

        // - - - - - PreComp layer: file 2
        // - - - Layer aggregator
        // - -  Offset:<285.494, 309.049>
        winrt::com_ptr<CanvasGeometry> Geometry_04()
        {
            winrt::com_ptr<ID2D1PathGeometry> path{ nullptr };
            winrt::check_hresult(_d2dFactory->CreatePathGeometry(path.put()));
            winrt::com_ptr<ID2D1GeometrySink> sink{ nullptr };
            winrt::check_hresult(path->Open(sink.put()));
            sink->SetFillMode(D2D1_FILL_MODE_WINDING);
            sink->BeginFigure({ 194.298004F, 15.7799997F }, D2D1_FIGURE_BEGIN_FILLED);
            sink->AddLine({ 10.0249996F, 63.2989998F });
            sink->AddBezier({ { 5.74100018F, 64.4089966F }, { 1.36800003F, 61.8349991F }, { 0.257999986F, 57.5509987F } });
            sink->AddBezier({ { -0.851000011F, 53.2659988F }, { 1.72300005F, 48.8930016F }, { 6.0079999F, 47.7840004F } });
            sink->AddLine({ 6.02299976F, 47.7799988F });
            sink->AddLine({ 190.296005F, 0.257999986F });
            sink->AddBezier({ { 194.580002F, -0.852999985F }, { 198.953995F, 1.72000003F }, { 200.065002F, 6.00400019F } });
            sink->AddBezier({ { 201.177002F, 10.2880001F }, { 198.604004F, 14.6619997F }, { 194.320007F, 15.7729998F } });
            sink->AddLine({ 194.298004F, 15.7799997F });
            sink->EndFigure(D2D1_FIGURE_END_CLOSED);
            winrt::check_hresult(sink->Close());
            auto result = winrt::make_self<CanvasGeometry>(path);
            return result;
        }

        // - - - - - PreComp layer: file 2
        // - - - Layer aggregator
        // - -  Offset:<285.494, 309.049>
        winrt::com_ptr<CanvasGeometry> Geometry_05()
        {
            winrt::com_ptr<ID2D1PathGeometry> path{ nullptr };
            winrt::check_hresult(_d2dFactory->CreatePathGeometry(path.put()));
            winrt::com_ptr<ID2D1GeometrySink> sink{ nullptr };
            winrt::check_hresult(path->Open(sink.put()));
            sink->SetFillMode(D2D1_FILL_MODE_WINDING);
            sink->BeginFigure({ 226.309006F, 15.7770004F }, D2D1_FIGURE_BEGIN_FILLED);
            sink->AddLine({ 10.0249996F, 71.552002F });
            sink->AddBezier({ { 5.74100018F, 72.6610031F }, { 1.36800003F, 70.086998F }, { 0.257999986F, 65.802002F } });
            sink->AddBezier({ { -0.851000011F, 61.5180016F }, { 1.72300005F, 57.1450005F }, { 6.0079999F, 56.0349998F } });
            sink->AddLine({ 6.02299976F, 56.0309982F });
            sink->AddLine({ 222.307007F, 0.256000012F });
            sink->AddBezier({ { 226.593002F, -0.848999977F }, { 230.962997F, 1.73000002F }, { 232.067993F, 6.01599979F } });
            sink->AddBezier({ { 233.171997F, 10.302F }, { 230.595001F, 14.6709995F }, { 226.309006F, 15.7770004F } });
            sink->EndFigure(D2D1_FIGURE_END_CLOSED);
            winrt::check_hresult(sink->Close());
            auto result = winrt::make_self<CanvasGeometry>(path);
            return result;
        }

        // - - - - - PreComp layer: file 2
        // - - - Layer aggregator
        // - -  Offset:<285.494, 309.049>
        winrt::com_ptr<CanvasGeometry> Geometry_06()
        {
            winrt::com_ptr<ID2D1PathGeometry> path{ nullptr };
            winrt::check_hresult(_d2dFactory->CreatePathGeometry(path.put()));
            winrt::com_ptr<ID2D1GeometrySink> sink{ nullptr };
            winrt::check_hresult(path->Open(sink.put()));
            sink->SetFillMode(D2D1_FILL_MODE_WINDING);
            sink->BeginFigure({ 84.9840012F, 65.612999F }, D2D1_FIGURE_BEGIN_FILLED);
            sink->AddLine({ 19.7719994F, 82.4300003F });
            sink->AddBezier({ { 17.7169991F, 82.9570007F }, { 15.6230001F, 81.7220001F }, { 15.0909996F, 79.6679993F } });
            sink->AddLine({ 0.122000001F, 21.6200008F });
            sink->AddBezier({ { -0.405999988F, 19.5650005F }, { 0.828999996F, 17.4710007F }, { 2.8829999F, 16.9389992F } });
            sink->AddLine({ 68.0950012F, 0.122000001F });
            sink->AddBezier({ { 70.1500015F, -0.405000001F }, { 72.2440033F, 0.829999983F }, { 72.776001F, 2.88400006F } });
            sink->AddLine({ 87.7460022F, 60.9319992F });
            sink->AddBezier({ { 88.2730026F, 62.9869995F }, { 87.038002F, 65.0810013F }, { 84.9840012F, 65.612999F } });
            sink->EndFigure(D2D1_FIGURE_END_CLOSED);
            winrt::check_hresult(sink->Close());
            auto result = winrt::make_self<CanvasGeometry>(path);
            return result;
        }

        // - - - - - PreComp layer: file 2
        // - - - Layer aggregator
        // - -  Offset:<285.494, 309.049>
        winrt::com_ptr<CanvasGeometry> Geometry_07()
        {
            winrt::com_ptr<ID2D1PathGeometry> path{ nullptr };
            winrt::check_hresult(_d2dFactory->CreatePathGeometry(path.put()));
            winrt::com_ptr<ID2D1GeometrySink> sink{ nullptr };
            winrt::check_hresult(path->Open(sink.put()));
            sink->SetFillMode(D2D1_FILL_MODE_WINDING);
            sink->BeginFigure({ 84.9840012F, 65.6119995F }, D2D1_FIGURE_BEGIN_FILLED);
            sink->AddLine({ 19.7719994F, 82.4290009F });
            sink->AddBezier({ { 17.7169991F, 82.9570007F }, { 15.6230001F, 81.7210007F }, { 15.0909996F, 79.6679993F } });
            sink->AddLine({ 0.122000001F, 21.6200008F });
            sink->AddBezier({ { -0.405999988F, 19.5650005F }, { 0.829999983F, 17.4710007F }, { 2.8829999F, 16.9389992F } });
            sink->AddLine({ 68.0960007F, 0.122000001F });
            sink->AddBezier({ { 70.1500015F, -0.405000001F }, { 72.2440033F, 0.829999983F }, { 72.776001F, 2.8829999F } });
            sink->AddLine({ 87.7460022F, 60.9319992F });
            sink->AddBezier({ { 88.2730026F, 62.9860001F }, { 87.038002F, 65.0800018F }, { 84.9840012F, 65.6119995F } });
            sink->EndFigure(D2D1_FIGURE_END_CLOSED);
            winrt::check_hresult(sink->Close());
            auto result = winrt::make_self<CanvasGeometry>(path);
            return result;
        }

        // - - - - - PreComp layer: file 2
        // - - - Layer aggregator
        // - -  Offset:<285.494, 309.049>
        winrt::com_ptr<CanvasGeometry> Geometry_08()
        {
            winrt::com_ptr<ID2D1PathGeometry> path{ nullptr };
            winrt::check_hresult(_d2dFactory->CreatePathGeometry(path.put()));
            winrt::com_ptr<ID2D1GeometrySink> sink{ nullptr };
            winrt::check_hresult(path->Open(sink.put()));
            sink->SetFillMode(D2D1_FILL_MODE_WINDING);
            sink->BeginFigure({ 84.9850006F, 65.612999F }, D2D1_FIGURE_BEGIN_FILLED);
            sink->AddLine({ 19.7719994F, 82.4300003F });
            sink->AddBezier({ { 17.7169991F, 82.9570007F }, { 15.6230001F, 81.7220001F }, { 15.0909996F, 79.6679993F } });
            sink->AddLine({ 0.122000001F, 21.6200008F });
            sink->AddBezier({ { -0.405000001F, 19.5650005F }, { 0.829999983F, 17.4710007F }, { 2.8829999F, 16.9389992F } });
            sink->AddLine({ 68.0960007F, 0.122000001F });
            sink->AddBezier({ { 70.151001F, -0.405000001F }, { 72.2450027F, 0.829999983F }, { 72.7770004F, 2.88400006F } });
            sink->AddLine({ 87.7460022F, 60.9319992F });
            sink->AddBezier({ { 88.2740021F, 62.9869995F }, { 87.038002F, 65.0810013F }, { 84.9850006F, 65.612999F } });
            sink->EndFigure(D2D1_FIGURE_END_CLOSED);
            winrt::check_hresult(sink->Close());
            auto result = winrt::make_self<CanvasGeometry>(path);
            return result;
        }

        // - - - - - PreComp layer: file 2
        // - - - Layer aggregator
        // - -  Offset:<285.494, 309.049>
        winrt::com_ptr<CanvasGeometry> Geometry_09()
        {
            winrt::com_ptr<ID2D1PathGeometry> path{ nullptr };
            winrt::check_hresult(_d2dFactory->CreatePathGeometry(path.put()));
            winrt::com_ptr<ID2D1GeometrySink> sink{ nullptr };
            winrt::check_hresult(path->Open(sink.put()));
            sink->SetFillMode(D2D1_FILL_MODE_WINDING);
            sink->BeginFigure({ 194.276001F, 15.776F }, D2D1_FIGURE_BEGIN_FILLED);
            sink->AddLine({ 10.0030003F, 63.2970009F });
            sink->AddBezier({ { 5.71500015F, 64.3939972F }, { 1.34899998F, 61.8069992F }, { 0.252000004F, 57.519001F } });
            sink->AddBezier({ { -0.842000008F, 53.243F }, { 1.72800004F, 48.8860016F }, { 6.0F, 47.776001F } });
            sink->AddLine({ 190.272995F, 0.256000012F });
            sink->AddBezier({ { 194.559006F, -0.848999977F }, { 198.929001F, 1.73000002F }, { 200.033997F, 6.01599979F } });
            sink->AddBezier({ { 201.139008F, 10.3009996F }, { 198.561005F, 14.6709995F }, { 194.276001F, 15.776F } });
            sink->EndFigure(D2D1_FIGURE_END_CLOSED);
            winrt::check_hresult(sink->Close());
            auto result = winrt::make_self<CanvasGeometry>(path);
            return result;
        }

        // - - - - - PreComp layer: file 2
        // - - - Layer aggregator
        // - -  Offset:<285.494, 309.049>
        winrt::com_ptr<CanvasGeometry> Geometry_10()
        {
            winrt::com_ptr<ID2D1PathGeometry> path{ nullptr };
            winrt::check_hresult(_d2dFactory->CreatePathGeometry(path.put()));
            winrt::com_ptr<ID2D1GeometrySink> sink{ nullptr };
            winrt::check_hresult(path->Open(sink.put()));
            sink->SetFillMode(D2D1_FILL_MODE_WINDING);
            sink->BeginFigure({ 226.317001F, 15.776F }, D2D1_FIGURE_BEGIN_FILLED);
            sink->AddLine({ 10.033F, 71.5510025F });
            sink->AddBezier({ { 5.74900007F, 72.6650009F }, { 1.37399995F, 70.0950012F }, { 0.25999999F, 65.810997F } });
            sink->AddBezier({ { -0.852999985F, 61.5270004F }, { 1.71700001F, 57.1520004F }, { 6.00099993F, 56.0379982F } });
            sink->AddLine({ 6.02899981F, 56.0309982F });
            sink->AddLine({ 222.313004F, 0.256000012F });
            sink->AddBezier({ { 226.598999F, -0.848999977F }, { 230.970001F, 1.73000002F }, { 232.074997F, 6.01599979F } });
            sink->AddBezier({ { 233.179993F, 10.3009996F }, { 230.602005F, 14.6700001F }, { 226.317001F, 15.776F } });
            sink->EndFigure(D2D1_FIGURE_END_CLOSED);
            winrt::check_hresult(sink->Close());
            auto result = winrt::make_self<CanvasGeometry>(path);
            return result;
        }

        // - - - - - PreComp layer: file 1
        // - - - Layer aggregator
        // - -  Offset:<236.285, 269.063>
        winrt::com_ptr<CanvasGeometry> Geometry_11()
        {
            winrt::com_ptr<ID2D1PathGeometry> path{ nullptr };
            winrt::check_hresult(_d2dFactory->CreatePathGeometry(path.put()));
            winrt::com_ptr<ID2D1GeometrySink> sink{ nullptr };
            winrt::check_hresult(path->Open(sink.put()));
            sink->SetFillMode(D2D1_FILL_MODE_WINDING);
            sink->BeginFigure({ 424.444F, 0.0F }, D2D1_FIGURE_BEGIN_FILLED);
            sink->AddLine({ 48.125F, 0.0F });
            sink->AddBezier({ { 21.559F, 0.0299999993F }, { 0.0299999993F, 21.5580006F }, { 0.0F, 48.125F } });
            sink->AddLine({ 0.0F, 490.001007F });
            sink->AddBezier({ { 0.0299999993F, 516.567017F }, { 21.559F, 538.096008F }, { 48.125F, 538.125977F } });
            sink->AddLine({ 424.444F, 538.125977F });
            sink->AddBezier({ { 451.01001F, 538.096008F }, { 472.539001F, 516.567017F }, { 472.569F, 490.001007F } });
            sink->AddLine({ 472.569F, 48.125F });
            sink->AddBezier({ { 472.539001F, 21.5580006F }, { 451.01001F, 0.0299999993F }, { 424.444F, 0.0F } });
            sink->EndFigure(D2D1_FIGURE_END_CLOSED);
            winrt::check_hresult(sink->Close());
            auto result = winrt::make_self<CanvasGeometry>(path);
            return result;
        }

        // - - - - - PreComp layer: file 1
        // - - - Layer aggregator
        // - -  Offset:<236.285, 269.063>
        winrt::com_ptr<CanvasGeometry> Geometry_12()
        {
            winrt::com_ptr<ID2D1PathGeometry> path{ nullptr };
            winrt::check_hresult(_d2dFactory->CreatePathGeometry(path.put()));
            winrt::com_ptr<ID2D1GeometrySink> sink{ nullptr };
            winrt::check_hresult(path->Open(sink.put()));
            sink->SetFillMode(D2D1_FILL_MODE_WINDING);
            sink->BeginFigure({ 410.589996F, 0.0F }, D2D1_FIGURE_BEGIN_FILLED);
            sink->AddLine({ 34.2709999F, 0.0F });
            sink->AddBezier({ { 15.3529997F, 0.0209999997F }, { 0.0219999999F, 15.3520002F }, { 0.0F, 34.2709999F } });
            sink->AddLine({ 0.0F, 476.147003F });
            sink->AddBezier({ { 0.0219999999F, 495.065002F }, { 15.3529997F, 510.395996F }, { 34.2709999F, 510.416992F } });
            sink->AddLine({ 410.589996F, 510.416992F });
            sink->AddBezier({ { 429.509003F, 510.395996F }, { 444.839996F, 495.065002F }, { 444.860992F, 476.147003F } });
            sink->AddLine({ 444.860992F, 34.2709999F });
            sink->AddBezier({ { 444.839996F, 15.3520002F }, { 429.509003F, 0.0209999997F }, { 410.589996F, 0.0F } });
            sink->EndFigure(D2D1_FIGURE_END_CLOSED);
            winrt::check_hresult(sink->Close());
            auto result = winrt::make_self<CanvasGeometry>(path);
            return result;
        }

        // - - - - - PreComp layer: file 1
        // - - - Layer aggregator
        // - -  Offset:<236.285, 269.063>
        winrt::com_ptr<CanvasGeometry> Geometry_13()
        {
            winrt::com_ptr<ID2D1PathGeometry> path{ nullptr };
            winrt::check_hresult(_d2dFactory->CreatePathGeometry(path.put()));
            winrt::com_ptr<ID2D1GeometrySink> sink{ nullptr };
            winrt::check_hresult(path->Open(sink.put()));
            sink->SetFillMode(D2D1_FILL_MODE_WINDING);
            sink->BeginFigure({ 201.731995F, 16.3040009F }, D2D1_FIGURE_BEGIN_FILLED);
            sink->AddLine({ 8.16100025F, 16.3040009F });
            sink->AddBezier({ { 3.65899992F, 16.309F }, { 0.00499999989F, 12.6639996F }, { 0.0F, 8.1619997F } });
            sink->AddBezier({ { -0.00499999989F, 3.65899992F }, { 3.6400001F, 0.00499999989F }, { 8.1420002F, 0.0F } });
            sink->AddLine({ 8.16100025F, 0.0F });
            sink->AddLine({ 201.731995F, 0.0F });
            sink->AddBezier({ { 206.233994F, 0.00499999989F }, { 209.880005F, 3.65899992F }, { 209.873993F, 8.1619997F } });
            sink->AddBezier({ { 209.869003F, 12.6560001F }, { 206.227005F, 16.2980003F }, { 201.731995F, 16.3040009F } });
            sink->EndFigure(D2D1_FIGURE_END_CLOSED);
            winrt::check_hresult(sink->Close());
            auto result = winrt::make_self<CanvasGeometry>(path);
            return result;
        }

        // - - - - - PreComp layer: file 1
        // - - - Layer aggregator
        // - -  Offset:<236.285, 269.063>
        winrt::com_ptr<CanvasGeometry> Geometry_14()
        {
            winrt::com_ptr<ID2D1PathGeometry> path{ nullptr };
            winrt::check_hresult(_d2dFactory->CreatePathGeometry(path.put()));
            winrt::com_ptr<ID2D1GeometrySink> sink{ nullptr };
            winrt::check_hresult(path->Open(sink.put()));
            sink->SetFillMode(D2D1_FILL_MODE_WINDING);
            sink->BeginFigure({ 235.358002F, 16.3040009F }, D2D1_FIGURE_BEGIN_FILLED);
            sink->AddLine({ 8.16100025F, 16.3040009F });
            sink->AddBezier({ { 3.65899992F, 16.309F }, { 0.00499999989F, 12.6639996F }, { 0.0F, 8.1619997F } });
            sink->AddBezier({ { -0.00499999989F, 3.66000009F }, { 3.6400001F, 0.00600000005F }, { 8.1420002F, 0.0F } });
            sink->AddLine({ 8.16100025F, 0.0F });
            sink->AddLine({ 235.358002F, 0.0F });
            sink->AddBezier({ { 239.860992F, 0.0F }, { 243.509995F, 3.6500001F }, { 243.509995F, 8.15200043F } });
            sink->AddBezier({ { 243.509995F, 12.6540003F }, { 239.860992F, 16.3040009F }, { 235.358002F, 16.3040009F } });
            sink->EndFigure(D2D1_FIGURE_END_CLOSED);
            winrt::check_hresult(sink->Close());
            auto result = winrt::make_self<CanvasGeometry>(path);
            return result;
        }

        // - - - - - PreComp layer: file 1
        // - - - Layer aggregator
        // - -  Offset:<236.285, 269.063>
        winrt::com_ptr<CanvasGeometry> Geometry_15()
        {
            winrt::com_ptr<ID2D1PathGeometry> path{ nullptr };
            winrt::check_hresult(_d2dFactory->CreatePathGeometry(path.put()));
            winrt::com_ptr<ID2D1GeometrySink> sink{ nullptr };
            winrt::check_hresult(path->Open(sink.put()));
            sink->SetFillMode(D2D1_FILL_MODE_WINDING);
            sink->BeginFigure({ 201.722F, 16.3029995F }, D2D1_FIGURE_BEGIN_FILLED);
            sink->AddLine({ 8.15100002F, 16.3029995F });
            sink->AddBezier({ { 3.64899993F, 16.3029995F }, { 0.0F, 12.6540003F }, { 0.0F, 8.15200043F } });
            sink->AddBezier({ { 0.0F, 3.6500001F }, { 3.64899993F, 0.0F }, { 8.15100002F, 0.0F } });
            sink->AddLine({ 201.722F, 0.0F });
            sink->AddBezier({ { 206.223999F, 0.0F }, { 209.873993F, 3.6500001F }, { 209.873993F, 8.15200043F } });
            sink->AddBezier({ { 209.873993F, 12.6540003F }, { 206.223999F, 16.3029995F }, { 201.722F, 16.3029995F } });
            sink->EndFigure(D2D1_FIGURE_END_CLOSED);
            winrt::check_hresult(sink->Close());
            auto result = winrt::make_self<CanvasGeometry>(path);
            return result;
        }

        // - - - - - PreComp layer: file 1
        // - - - Layer aggregator
        // - -  Offset:<236.285, 269.063>
        winrt::com_ptr<CanvasGeometry> Geometry_16()
        {
            winrt::com_ptr<ID2D1PathGeometry> path{ nullptr };
            winrt::check_hresult(_d2dFactory->CreatePathGeometry(path.put()));
            winrt::com_ptr<ID2D1GeometrySink> sink{ nullptr };
            winrt::check_hresult(path->Open(sink.put()));
            sink->SetFillMode(D2D1_FILL_MODE_WINDING);
            sink->BeginFigure({ 235.348007F, 16.3040009F }, D2D1_FIGURE_BEGIN_FILLED);
            sink->AddLine({ 8.15100002F, 16.3040009F });
            sink->AddBezier({ { 3.64899993F, 16.3040009F }, { 0.0F, 12.6540003F }, { 0.0F, 8.15200043F } });
            sink->AddBezier({ { 0.0F, 3.6500001F }, { 3.64899993F, 0.0F }, { 8.15100002F, 0.0F } });
            sink->AddLine({ 235.348007F, 0.0F });
            sink->AddBezier({ { 239.850998F, 0.0F }, { 243.5F, 3.6500001F }, { 243.5F, 8.15200043F } });
            sink->AddBezier({ { 243.5F, 12.6540003F }, { 239.850998F, 16.3040009F }, { 235.348007F, 16.3040009F } });
            sink->EndFigure(D2D1_FIGURE_END_CLOSED);
            winrt::check_hresult(sink->Close());
            auto result = winrt::make_self<CanvasGeometry>(path);
            return result;
        }

        // - - - - - PreComp layer: file 1
        // - - - Layer aggregator
        // - -  Offset:<236.285, 269.063>
        winrt::com_ptr<CanvasGeometry> Geometry_17()
        {
            winrt::com_ptr<ID2D1PathGeometry> path{ nullptr };
            winrt::check_hresult(_d2dFactory->CreatePathGeometry(path.put()));
            winrt::com_ptr<ID2D1GeometrySink> sink{ nullptr };
            winrt::check_hresult(path->Open(sink.put()));
            sink->SetFillMode(D2D1_FILL_MODE_WINDING);
            sink->BeginFigure({ 72.4110031F, 68.7939987F }, D2D1_FIGURE_BEGIN_FILLED);
            sink->AddLine({ 3.90899992F, 68.7939987F });
            sink->AddBezier({ { 1.75100005F, 68.7919998F }, { 0.00200000009F, 67.0429993F }, { 0.0F, 64.8860016F } });
            sink->AddLine({ 0.0F, 3.90799999F });
            sink->AddBezier({ { 0.00200000009F, 1.75100005F }, { 1.75100005F, 0.00200000009F }, { 3.90899992F, 0.0F } });
            sink->AddLine({ 72.4110031F, 0.0F });
            sink->AddBezier({ { 74.5690002F, 0.00200000009F }, { 76.3180008F, 1.75100005F }, { 76.3199997F, 3.90799999F } });
            sink->AddLine({ 76.3199997F, 64.8860016F });
            sink->AddBezier({ { 76.3180008F, 67.0429993F }, { 74.5690002F, 68.7919998F }, { 72.4110031F, 68.7939987F } });
            sink->EndFigure(D2D1_FIGURE_END_CLOSED);
            winrt::check_hresult(sink->Close());
            auto result = winrt::make_self<CanvasGeometry>(path);
            return result;
        }

        // - - - - - PreComp layer: file 1
        // - - - Layer aggregator
        // - -  Offset:<236.285, 269.063>
        winrt::com_ptr<CanvasGeometry> Geometry_18()
        {
            winrt::com_ptr<ID2D1PathGeometry> path{ nullptr };
            winrt::check_hresult(_d2dFactory->CreatePathGeometry(path.put()));
            winrt::com_ptr<ID2D1GeometrySink> sink{ nullptr };
            winrt::check_hresult(path->Open(sink.put()));
            sink->SetFillMode(D2D1_FILL_MODE_WINDING);
            sink->BeginFigure({ 72.4110031F, 68.7949982F }, D2D1_FIGURE_BEGIN_FILLED);
            sink->AddLine({ 3.90899992F, 68.7949982F });
            sink->AddBezier({ { 1.75100005F, 68.7929993F }, { 0.00200000009F, 67.0439987F }, { 0.0F, 64.8860016F } });
            sink->AddLine({ 0.0F, 3.90899992F });
            sink->AddBezier({ { 0.00200000009F, 1.75100005F }, { 1.75100005F, 0.00300000003F }, { 3.90899992F, 0.0F } });
            sink->AddLine({ 72.4110031F, 0.0F });
            sink->AddBezier({ { 74.5690002F, 0.00300000003F }, { 76.3180008F, 1.75100005F }, { 76.3199997F, 3.90899992F } });
            sink->AddLine({ 76.3199997F, 64.8860016F });
            sink->AddBezier({ { 76.3180008F, 67.0439987F }, { 74.5690002F, 68.7929993F }, { 72.4110031F, 68.7949982F } });
            sink->EndFigure(D2D1_FIGURE_END_CLOSED);
            winrt::check_hresult(sink->Close());
            auto result = winrt::make_self<CanvasGeometry>(path);
            return result;
        }

        // - - - - - PreComp layer: file 1
        // - - - Layer aggregator
        // - -  Offset:<236.285, 269.063>
        winrt::com_ptr<CanvasGeometry> Geometry_19()
        {
            winrt::com_ptr<ID2D1PathGeometry> path{ nullptr };
            winrt::check_hresult(_d2dFactory->CreatePathGeometry(path.put()));
            winrt::com_ptr<ID2D1GeometrySink> sink{ nullptr };
            winrt::check_hresult(path->Open(sink.put()));
            sink->SetFillMode(D2D1_FILL_MODE_WINDING);
            sink->BeginFigure({ 150.863998F, 16.3029995F }, D2D1_FIGURE_BEGIN_FILLED);
            sink->AddLine({ 8.15200043F, 16.3029995F });
            sink->AddBezier({ { 3.6500001F, 16.3029995F }, { 0.0F, 12.6529999F }, { 0.0F, 8.15100002F } });
            sink->AddBezier({ { 0.0F, 3.64899993F }, { 3.6500001F, 0.0F }, { 8.15200043F, 0.0F } });
            sink->AddLine({ 150.863998F, 0.0F });
            sink->AddBezier({ { 155.365997F, 0.0F }, { 159.016006F, 3.64899993F }, { 159.016006F, 8.15100002F } });
            sink->AddBezier({ { 159.016006F, 12.6529999F }, { 155.365997F, 16.3029995F }, { 150.863998F, 16.3029995F } });
            sink->EndFigure(D2D1_FIGURE_END_CLOSED);
            winrt::check_hresult(sink->Close());
            auto result = winrt::make_self<CanvasGeometry>(path);
            return result;
        }

        // - - - - - PreComp layer: file 1
        // - - - Layer aggregator
        // - -  Offset:<236.285, 269.063>
        winrt::com_ptr<CanvasGeometry> Geometry_20()
        {
            winrt::com_ptr<ID2D1PathGeometry> path{ nullptr };
            winrt::check_hresult(_d2dFactory->CreatePathGeometry(path.put()));
            winrt::com_ptr<ID2D1GeometrySink> sink{ nullptr };
            winrt::check_hresult(path->Open(sink.put()));
            sink->SetFillMode(D2D1_FILL_MODE_WINDING);
            sink->BeginFigure({ 184.490005F, 16.3029995F }, D2D1_FIGURE_BEGIN_FILLED);
            sink->AddLine({ 8.15200043F, 16.3029995F });
            sink->AddBezier({ { 3.6500001F, 16.3029995F }, { 0.0F, 12.6540003F }, { 0.0F, 8.15200043F } });
            sink->AddBezier({ { 0.0F, 3.6500001F }, { 3.6500001F, 0.0F }, { 8.15200043F, 0.0F } });
            sink->AddLine({ 184.490005F, 0.0F });
            sink->AddBezier({ { 188.992004F, 0.0F }, { 192.641998F, 3.6500001F }, { 192.641998F, 8.15200043F } });
            sink->AddBezier({ { 192.641998F, 12.6540003F }, { 188.992004F, 16.3029995F }, { 184.490005F, 16.3029995F } });
            sink->EndFigure(D2D1_FIGURE_END_CLOSED);
            winrt::check_hresult(sink->Close());
            auto result = winrt::make_self<CanvasGeometry>(path);
            return result;
        }

        // - - - - - PreComp layer: file 1
        // - - - Layer aggregator
        // - -  Offset:<236.285, 269.063>
        winrt::com_ptr<CanvasGeometry> Geometry_21()
        {
            winrt::com_ptr<ID2D1PathGeometry> path{ nullptr };
            winrt::check_hresult(_d2dFactory->CreatePathGeometry(path.put()));
            winrt::com_ptr<ID2D1GeometrySink> sink{ nullptr };
            winrt::check_hresult(path->Open(sink.put()));
            sink->SetFillMode(D2D1_FILL_MODE_WINDING);
            sink->BeginFigure({ 135.477005F, 110.499001F }, D2D1_FIGURE_BEGIN_FILLED);
            sink->AddLine({ 3.90899992F, 110.499001F });
            sink->AddBezier({ { 1.75100005F, 110.497002F }, { 0.00200000009F, 108.748001F }, { 0.0F, 106.589996F } });
            sink->AddLine({ 0.0F, 3.90899992F });
            sink->AddBezier({ { 0.00200000009F, 1.75100005F }, { 1.75100005F, 0.00200000009F }, { 3.90899992F, 0.0F } });
            sink->AddLine({ 135.477005F, 0.0F });
            sink->AddBezier({ { 137.634995F, 0.00200000009F }, { 139.382996F, 1.75100005F }, { 139.386002F, 3.90899992F } });
            sink->AddLine({ 139.386002F, 106.589996F });
            sink->AddBezier({ { 139.382996F, 108.748001F }, { 137.634995F, 110.497002F }, { 135.477005F, 110.499001F } });
            sink->EndFigure(D2D1_FIGURE_END_CLOSED);
            winrt::check_hresult(sink->Close());
            auto result = winrt::make_self<CanvasGeometry>(path);
            return result;
        }

        // - - - - PreComp layer: Add button
        // - - - Layer aggregator
        // - - ShapeGroup: Path 23
        winrt::com_ptr<CanvasGeometry> Geometry_22()
        {
            winrt::com_ptr<ID2D1PathGeometry> path{ nullptr };
            winrt::check_hresult(_d2dFactory->CreatePathGeometry(path.put()));
            winrt::com_ptr<ID2D1GeometrySink> sink{ nullptr };
            winrt::check_hresult(path->Open(sink.put()));
            sink->SetFillMode(D2D1_FILL_MODE_WINDING);
            sink->BeginFigure({ 95.473999F, 42.0009995F }, D2D1_FIGURE_BEGIN_FILLED);
            sink->AddLine({ 64.9179993F, 42.0009995F });
            sink->AddLine({ 64.9179993F, 11.4440002F });
            sink->AddBezier({ { 64.9100037F, 5.11600018F }, { 59.7729988F, -0.00800000038F }, { 53.4440002F, 0.0F } });
            sink->AddBezier({ { 47.1269989F, 0.00800000038F }, { 42.0079994F, 5.12699986F }, { 42.0F, 11.4440002F } });
            sink->AddLine({ 42.0F, 42.0009995F });
            sink->AddLine({ 11.4440002F, 42.0009995F });
            sink->AddBezier({ { 5.11499977F, 42.0089989F }, { -0.00899999961F, 47.1459999F }, { 0.0F, 53.473999F } });
            sink->AddBezier({ { 0.00800000038F, 59.7910004F }, { 5.12699986F, 64.9100037F }, { 11.4440002F, 64.9179993F } });
            sink->AddLine({ 42.0F, 64.9179993F });
            sink->AddLine({ 42.0F, 95.4749985F });
            sink->AddBezier({ { 41.9920006F, 101.803001F }, { 47.1160011F, 106.940002F }, { 53.4440002F, 106.948997F } });
            sink->AddBezier({ { 59.7729988F, 106.957001F }, { 64.9100037F, 101.833F }, { 64.9179993F, 95.5049973F } });
            sink->AddLine({ 64.9179993F, 95.4749985F });
            sink->AddLine({ 64.9179993F, 64.9179993F });
            sink->AddLine({ 95.473999F, 64.9179993F });
            sink->AddBezier({ { 101.803001F, 64.9100037F }, { 106.926003F, 59.7729988F }, { 106.917999F, 53.4449997F } });
            sink->AddBezier({ { 106.910004F, 47.1279984F }, { 101.791F, 42.0089989F }, { 95.473999F, 42.0009995F } });
            sink->EndFigure(D2D1_FIGURE_END_CLOSED);
            winrt::check_hresult(sink->Close());
            auto result = winrt::make_self<CanvasGeometry>(path);
            return result;
        }

        // Color bound to theme property value: Color_0077D4
        CompositionColorBrush ThemeColor_Color_0077D4()
        {
            const auto result = _themeColor_Color_0077D4 = _c.CreateColorBrush();
            BindProperty(result, L"Color", L"ColorRGB(_theme.Color_0077D4.W,_theme.Color_0077D4.X,_theme.Color_0077D4.Y,_theme.Color_0077D4.Z)", L"_theme", _themeProperties);
            return result;
        }

        // Color bound to theme property value: Color_CCCCCC
        CompositionColorBrush ThemeColor_Color_CCCCCC()
        {
            const auto result = _themeColor_Color_CCCCCC = _c.CreateColorBrush();
            BindProperty(result, L"Color", L"ColorRGB(_theme.Color_CCCCCC.W,_theme.Color_CCCCCC.X,_theme.Color_CCCCCC.Y,_theme.Color_CCCCCC.Z)", L"_theme", _themeProperties);
            return result;
        }

        // Color bound to theme property value: Color_E6E6E6
        CompositionColorBrush ThemeColor_Color_E6E6E6()
        {
            const auto result = _themeColor_Color_E6E6E6 = _c.CreateColorBrush();
            BindProperty(result, L"Color", L"ColorRGB(_theme.Color_E6E6E6.W,_theme.Color_E6E6E6.X,_theme.Color_E6E6E6.Y,_theme.Color_E6E6E6.Z)", L"_theme", _themeProperties);
            return result;
        }

        // Color bound to theme property value: Color_F2F2F2
        CompositionColorBrush ThemeColor_Color_F2F2F2()
        {
            const auto result = _themeColor_Color_F2F2F2 = _c.CreateColorBrush();
            BindProperty(result, L"Color", L"ColorRGB(_theme.Color_F2F2F2.W,_theme.Color_F2F2F2.X,_theme.Color_F2F2F2.Y,_theme.Color_F2F2F2.Z)", L"_theme", _themeProperties);
            return result;
        }

        // Color bound to theme property value: Color_FFFFFF
        CompositionColorBrush ThemeColor_Color_FFFFFF()
        {
            const auto result = _themeColor_Color_FFFFFF = _c.CreateColorBrush();
            BindProperty(result, L"Color", L"ColorRGB(_theme.Color_FFFFFF.W,_theme.Color_FFFFFF.X,_theme.Color_FFFFFF.Y,_theme.Color_FFFFFF.Z)", L"_theme", _themeProperties);
            return result;
        }

        // - - PreComp layer: Add button
        // - Layer aggregator
        // Offset:<87.85, 87.85>
        // Ellipse Path 1.EllipseGeometry
        CompositionEllipseGeometry Ellipse_87p851()
        {
            const auto result = _c.CreateEllipseGeometry();
            result.Radius({ 87.850502F, 87.850502F });
            return result;
        }

        // - - - PreComp layer: file 2
        // - Layer aggregator
        // Offset:<285.494, 309.049>
        CompositionPathGeometry PathGeometry_00()
        {
            return _c.CreatePathGeometry(CompositionPath(CanvasGeometryToIGeometrySource2D(Geometry_00())));
        }

        // - - - PreComp layer: file 2
        // - Layer aggregator
        // Offset:<285.494, 309.049>
        CompositionPathGeometry PathGeometry_01()
        {
            return _c.CreatePathGeometry(CompositionPath(CanvasGeometryToIGeometrySource2D(Geometry_01())));
        }

        // - - - PreComp layer: file 2
        // - Layer aggregator
        // Offset:<285.494, 309.049>
        CompositionPathGeometry PathGeometry_02()
        {
            return _c.CreatePathGeometry(CompositionPath(CanvasGeometryToIGeometrySource2D(Geometry_02())));
        }

        // - - - PreComp layer: file 2
        // - Layer aggregator
        // Offset:<285.494, 309.049>
        CompositionPathGeometry PathGeometry_03()
        {
            return _c.CreatePathGeometry(CompositionPath(CanvasGeometryToIGeometrySource2D(Geometry_03())));
        }

        // - - - PreComp layer: file 2
        // - Layer aggregator
        // Offset:<285.494, 309.049>
        CompositionPathGeometry PathGeometry_04()
        {
            return _c.CreatePathGeometry(CompositionPath(CanvasGeometryToIGeometrySource2D(Geometry_04())));
        }

        // - - - PreComp layer: file 2
        // - Layer aggregator
        // Offset:<285.494, 309.049>
        CompositionPathGeometry PathGeometry_05()
        {
            return _c.CreatePathGeometry(CompositionPath(CanvasGeometryToIGeometrySource2D(Geometry_05())));
        }

        // - - - PreComp layer: file 2
        // - Layer aggregator
        // Offset:<285.494, 309.049>
        CompositionPathGeometry PathGeometry_06()
        {
            return _c.CreatePathGeometry(CompositionPath(CanvasGeometryToIGeometrySource2D(Geometry_06())));
        }

        // - - - PreComp layer: file 2
        // - Layer aggregator
        // Offset:<285.494, 309.049>
        CompositionPathGeometry PathGeometry_07()
        {
            return _c.CreatePathGeometry(CompositionPath(CanvasGeometryToIGeometrySource2D(Geometry_07())));
        }

        // - - - PreComp layer: file 2
        // - Layer aggregator
        // Offset:<285.494, 309.049>
        CompositionPathGeometry PathGeometry_08()
        {
            return _c.CreatePathGeometry(CompositionPath(CanvasGeometryToIGeometrySource2D(Geometry_08())));
        }

        // - - - PreComp layer: file 2
        // - Layer aggregator
        // Offset:<285.494, 309.049>
        CompositionPathGeometry PathGeometry_09()
        {
            return _c.CreatePathGeometry(CompositionPath(CanvasGeometryToIGeometrySource2D(Geometry_09())));
        }

        // - - - PreComp layer: file 2
        // - Layer aggregator
        // Offset:<285.494, 309.049>
        CompositionPathGeometry PathGeometry_10()
        {
            return _c.CreatePathGeometry(CompositionPath(CanvasGeometryToIGeometrySource2D(Geometry_10())));
        }

        // - - - PreComp layer: file 1
        // - Layer aggregator
        // Offset:<236.285, 269.063>
        CompositionPathGeometry PathGeometry_11()
        {
            return _c.CreatePathGeometry(CompositionPath(CanvasGeometryToIGeometrySource2D(Geometry_11())));
        }

        // - - - PreComp layer: file 1
        // - Layer aggregator
        // Offset:<236.285, 269.063>
        CompositionPathGeometry PathGeometry_12()
        {
            return _c.CreatePathGeometry(CompositionPath(CanvasGeometryToIGeometrySource2D(Geometry_12())));
        }

        // - - - PreComp layer: file 1
        // - Layer aggregator
        // Offset:<236.285, 269.063>
        CompositionPathGeometry PathGeometry_13()
        {
            return _c.CreatePathGeometry(CompositionPath(CanvasGeometryToIGeometrySource2D(Geometry_13())));
        }

        // - - - PreComp layer: file 1
        // - Layer aggregator
        // Offset:<236.285, 269.063>
        CompositionPathGeometry PathGeometry_14()
        {
            return _c.CreatePathGeometry(CompositionPath(CanvasGeometryToIGeometrySource2D(Geometry_14())));
        }

        // - - - PreComp layer: file 1
        // - Layer aggregator
        // Offset:<236.285, 269.063>
        CompositionPathGeometry PathGeometry_15()
        {
            return _c.CreatePathGeometry(CompositionPath(CanvasGeometryToIGeometrySource2D(Geometry_15())));
        }

        // - - - PreComp layer: file 1
        // - Layer aggregator
        // Offset:<236.285, 269.063>
        CompositionPathGeometry PathGeometry_16()
        {
            return _c.CreatePathGeometry(CompositionPath(CanvasGeometryToIGeometrySource2D(Geometry_16())));
        }

        // - - - PreComp layer: file 1
        // - Layer aggregator
        // Offset:<236.285, 269.063>
        CompositionPathGeometry PathGeometry_17()
        {
            return _c.CreatePathGeometry(CompositionPath(CanvasGeometryToIGeometrySource2D(Geometry_17())));
        }

        // - - - PreComp layer: file 1
        // - Layer aggregator
        // Offset:<236.285, 269.063>
        CompositionPathGeometry PathGeometry_18()
        {
            return _c.CreatePathGeometry(CompositionPath(CanvasGeometryToIGeometrySource2D(Geometry_18())));
        }

        // - - - PreComp layer: file 1
        // - Layer aggregator
        // Offset:<236.285, 269.063>
        CompositionPathGeometry PathGeometry_19()
        {
            return _c.CreatePathGeometry(CompositionPath(CanvasGeometryToIGeometrySource2D(Geometry_19())));
        }

        // - - - PreComp layer: file 1
        // - Layer aggregator
        // Offset:<236.285, 269.063>
        CompositionPathGeometry PathGeometry_20()
        {
            return _c.CreatePathGeometry(CompositionPath(CanvasGeometryToIGeometrySource2D(Geometry_20())));
        }

        // - - - PreComp layer: file 1
        // - Layer aggregator
        // Offset:<236.285, 269.063>
        CompositionPathGeometry PathGeometry_21()
        {
            return _c.CreatePathGeometry(CompositionPath(CanvasGeometryToIGeometrySource2D(Geometry_21())));
        }

        // - - PreComp layer: Add button
        // - Layer aggregator
        // ShapeGroup: Path 23
        CompositionPathGeometry PathGeometry_22()
        {
            return _c.CreatePathGeometry(CompositionPath(CanvasGeometryToIGeometrySource2D(Geometry_22())));
        }

        // - - PreComp layer: file 2
        // Layer aggregator
        // Path 1
        CompositionSpriteShape SpriteShape_00()
        {
            const auto result = _c.CreateSpriteShape(PathGeometry_00());
            result.FillBrush(ThemeColor_Color_F2F2F2());
            return result;
        }

        // - - PreComp layer: file 2
        // Layer aggregator
        // Path 1
        CompositionSpriteShape SpriteShape_01()
        {
            // Offset:<13.853973, 13.854004>
            const auto geometry = PathGeometry_01();
            const auto result = CreateSpriteShape(geometry, { 1.0F, 0.0F, 0.0F, 1.0F, 13.8539734F, 13.8540039F }, ThemeColor_Color_FFFFFF());;
            return result;
        }

        // - - PreComp layer: file 2
        // Layer aggregator
        // Path 1
        CompositionSpriteShape SpriteShape_02()
        {
            // Offset:<186.92398, 137.725>
            const auto geometry = PathGeometry_02();
            const auto result = CreateSpriteShape(geometry, { 1.0F, 0.0F, 0.0F, 1.0F, 186.923981F, 137.725006F }, _themeColor_Color_F2F2F2);;
            return result;
        }

        // - - PreComp layer: file 2
        // Layer aggregator
        // Path 1
        CompositionSpriteShape SpriteShape_03()
        {
            // Offset:<193.663, 155.65701>
            const auto geometry = PathGeometry_03();
            const auto result = CreateSpriteShape(geometry, { 1.0F, 0.0F, 0.0F, 1.0F, 193.662994F, 155.657013F }, _themeColor_Color_F2F2F2);;
            return result;
        }

        // - - PreComp layer: file 2
        // Layer aggregator
        // Path 1
        CompositionSpriteShape SpriteShape_04()
        {
            // Offset:<217.17699, 255.09201>
            const auto geometry = PathGeometry_04();
            const auto result = CreateSpriteShape(geometry, { 1.0F, 0.0F, 0.0F, 1.0F, 217.176987F, 255.09201F }, _themeColor_Color_F2F2F2);;
            return result;
        }

        // - - PreComp layer: file 2
        // Layer aggregator
        // Path 1
        CompositionSpriteShape SpriteShape_05()
        {
            // Offset:<223.93, 273.03003>
            const auto geometry = PathGeometry_05();
            const auto result = CreateSpriteShape(geometry, { 1.0F, 0.0F, 0.0F, 1.0F, 223.929993F, 273.030029F }, _themeColor_Color_F2F2F2);;
            return result;
        }

        // - - PreComp layer: file 2
        // Layer aggregator
        // Path 1
        CompositionSpriteShape SpriteShape_06()
        {
            // Offset:<80.491, 184.13101>
            const auto geometry = PathGeometry_06();
            const auto result = CreateSpriteShape(geometry, { 1.0F, 0.0F, 0.0F, 1.0F, 80.4909973F, 184.131012F }, ThemeColor_Color_E6E6E6());;
            return result;
        }

        // - - PreComp layer: file 2
        // Layer aggregator
        // Path 1
        CompositionSpriteShape SpriteShape_07()
        {
            // Offset:<110.759, 301.505>
            const auto geometry = PathGeometry_07();
            const auto result = CreateSpriteShape(geometry, { 1.0F, 0.0F, 0.0F, 1.0F, 110.759003F, 301.505005F }, _themeColor_Color_E6E6E6);;
            return result;
        }

        // - - PreComp layer: file 2
        // Layer aggregator
        // Path 1
        CompositionSpriteShape SpriteShape_08()
        {
            // Offset:<141.02798, 418.877>
            const auto geometry = PathGeometry_08();
            const auto result = CreateSpriteShape(geometry, { 1.0F, 0.0F, 0.0F, 1.0F, 141.027985F, 418.877014F }, _themeColor_Color_E6E6E6);;
            return result;
        }

        // - - PreComp layer: file 2
        // Layer aggregator
        // Path 1
        CompositionSpriteShape SpriteShape_09()
        {
            // Offset:<247.467, 372.469>
            const auto geometry = PathGeometry_09();
            const auto result = CreateSpriteShape(geometry, { 1.0F, 0.0F, 0.0F, 1.0F, 247.466995F, 372.468994F }, _themeColor_Color_F2F2F2);;
            return result;
        }

        // - - PreComp layer: file 2
        // Layer aggregator
        // Path 1
        CompositionSpriteShape SpriteShape_10()
        {
            // Offset:<254.19199, 390.40503>
            const auto geometry = PathGeometry_10();
            const auto result = CreateSpriteShape(geometry, { 1.0F, 0.0F, 0.0F, 1.0F, 254.191986F, 390.405029F }, _themeColor_Color_F2F2F2);;
            return result;
        }

        // - - PreComp layer: file 1
        // Layer aggregator
        // Path 1
        CompositionSpriteShape SpriteShape_11()
        {
            const auto result = _c.CreateSpriteShape(PathGeometry_11());
            result.FillBrush(_themeColor_Color_E6E6E6);
            return result;
        }

        // - - PreComp layer: file 1
        // Layer aggregator
        // Path 1
        CompositionSpriteShape SpriteShape_12()
        {
            // Offset:<13.855011, 13.854996>
            const auto geometry = PathGeometry_12();
            const auto result = CreateSpriteShape(geometry, { 1.0F, 0.0F, 0.0F, 1.0F, 13.855011F, 13.8549957F }, _themeColor_Color_FFFFFF);;
            return result;
        }

        // - - PreComp layer: file 1
        // Layer aggregator
        // Path 1
        CompositionSpriteShape SpriteShape_13()
        {
            // Offset:<168.336, 237.60199>
            const auto geometry = PathGeometry_13();
            const auto result = CreateSpriteShape(geometry, { 1.0F, 0.0F, 0.0F, 1.0F, 168.335999F, 237.60199F }, _themeColor_Color_E6E6E6);;
            return result;
        }

        // - - PreComp layer: file 1
        // Layer aggregator
        // Path 1
        CompositionSpriteShape SpriteShape_14()
        {
            // Offset:<168.335, 265.11398>
            const auto geometry = PathGeometry_14();
            const auto result = CreateSpriteShape(geometry, { 1.0F, 0.0F, 0.0F, 1.0F, 168.335007F, 265.113983F }, _themeColor_Color_E6E6E6);;
            return result;
        }

        // - - PreComp layer: file 1
        // Layer aggregator
        // Path 1
        CompositionSpriteShape SpriteShape_15()
        {
            // Offset:<168.34601, 360.899>
            const auto geometry = PathGeometry_15();
            const auto result = CreateSpriteShape(geometry, { 1.0F, 0.0F, 0.0F, 1.0F, 168.346008F, 360.898987F }, _themeColor_Color_E6E6E6);;
            return result;
        }

        // - - PreComp layer: file 1
        // Layer aggregator
        // Path 1
        CompositionSpriteShape SpriteShape_16()
        {
            // Offset:<168.34601, 388.40997>
            const auto geometry = PathGeometry_16();
            const auto result = CreateSpriteShape(geometry, { 1.0F, 0.0F, 0.0F, 1.0F, 168.346008F, 388.409973F }, _themeColor_Color_E6E6E6);;
            return result;
        }

        // - - PreComp layer: file 1
        // Layer aggregator
        // Path 1
        CompositionSpriteShape SpriteShape_17()
        {
            // Offset:<60.725006, 225.11299>
            const auto geometry = PathGeometry_17();
            const auto result = CreateSpriteShape(geometry, { 1.0F, 0.0F, 0.0F, 1.0F, 60.7250061F, 225.112991F }, _themeColor_Color_E6E6E6);;
            return result;
        }

        // - - PreComp layer: file 1
        // Layer aggregator
        // Path 1
        CompositionSpriteShape SpriteShape_18()
        {
            // Offset:<60.725006, 348.408>
            const auto geometry = PathGeometry_18();
            const auto result = CreateSpriteShape(geometry, { 1.0F, 0.0F, 0.0F, 1.0F, 60.7250061F, 348.40799F }, _themeColor_Color_E6E6E6);;
            return result;
        }

        // - - PreComp layer: file 1
        // Layer aggregator
        // Path 1
        CompositionSpriteShape SpriteShape_19()
        {
            // Offset:<219.418, 100.349976>
            const auto geometry = PathGeometry_19();
            const auto result = CreateSpriteShape(geometry, { 1.0F, 0.0F, 0.0F, 1.0F, 219.417999F, 100.349976F }, ThemeColor_Color_CCCCCC());;
            return result;
        }

        // - - PreComp layer: file 1
        // Layer aggregator
        // Path 1
        CompositionSpriteShape SpriteShape_20()
        {
            // Offset:<219.419, 127.86299>
            const auto geometry = PathGeometry_20();
            const auto result = CreateSpriteShape(geometry, { 1.0F, 0.0F, 0.0F, 1.0F, 219.419006F, 127.862991F }, _themeColor_Color_CCCCCC);;
            return result;
        }

        // - - PreComp layer: file 1
        // Layer aggregator
        // Path 1
        CompositionSpriteShape SpriteShape_21()
        {
            // Offset:<60.509003, 67.009>
            const auto geometry = PathGeometry_21();
            const auto result = CreateSpriteShape(geometry, { 1.0F, 0.0F, 0.0F, 1.0F, 60.5090027F, 67.0090027F }, ThemeColor_Color_0077D4());;
            return result;
        }

        // - PreComp layer: Add button
        // Layer aggregator
        // Ellipse Path 1
        CompositionSpriteShape SpriteShape_22()
        {
            // Offset:<87.85, 87.85>
            const auto geometry = Ellipse_87p851();
            const auto result = CreateSpriteShape(geometry, { 1.0F, 0.0F, 0.0F, 1.0F, 87.8499985F, 87.8499985F }, _themeColor_Color_0077D4);;
            return result;
        }

        // - PreComp layer: Add button
        // Layer aggregator
        // Path 1
        CompositionSpriteShape SpriteShape_23()
        {
            const auto result = _c.CreateSpriteShape(PathGeometry_22());
            result.CenterPoint({ 53.4589996F, 53.473999F });
            result.Offset({ 34.3909988F, 34.3909988F });
            result.FillBrush(_themeColor_Color_FFFFFF);
            StartProgressBoundAnimation(result, L"RotationAngleInDegrees", RotationAngleInDegreesScalarAnimation_0_to_0(), _rootProgress);
            return result;
        }

        // Transforms for file 2
        ContainerVisual ContainerVisual_0()
        {
            const auto result = _c.CreateContainerVisual();
            result.CenterPoint({ 673.656006F, 619.221008F, 0.0F });
            result.Offset({ 133.830017F, 176.197998F, 0.0F });
            result.Children().InsertAtTop(ContainerVisual_1());
            StartProgressBoundAnimation(result, L"Scale.X", ScalarAnimation_1_to_1_0(), RootProgress());
            StartProgressBoundAnimation(result, L"Scale.Y", _scalarAnimation_1_to_1_0, _rootProgress);
            return result;
        }

        // PreComp layer: file 2
        ContainerVisual ContainerVisual_1()
        {
            const auto result = _c.CreateContainerVisual();
            result.Clip(InsetClip_0());
            result.Size({ 571.0F, 619.0F });
            // Layer aggregator
            result.Children().InsertAtTop(ShapeVisual_0());
            return result;
        }

        // Transforms for file 1
        ContainerVisual ContainerVisual_2()
        {
            const auto result = _c.CreateContainerVisual();
            result.CenterPoint({ 459.73999F, 526.929993F, 0.0F });
            result.Offset({ 347.746033F, 270.5F, 0.0F });
            result.Children().InsertAtTop(ContainerVisual_3());
            StartProgressBoundAnimation(result, L"Scale.X", ScalarAnimation_1_to_1_1(), _rootProgress);
            StartProgressBoundAnimation(result, L"Scale.Y", _scalarAnimation_1_to_1_1, _rootProgress);
            return result;
        }

        // PreComp layer: file 1
        ContainerVisual ContainerVisual_3()
        {
            const auto result = _c.CreateContainerVisual();
            result.Clip(_insetClip_0);
            result.Size({ 473.0F, 539.0F });
            // Layer aggregator
            result.Children().InsertAtTop(ShapeVisual_1());
            return result;
        }

        // Transforms for Add button Scale(1,1,0), Offset(721.497,707.419,0)
        ContainerVisual ContainerVisual_4()
        {
            const auto result = _c.CreateContainerVisual();
            result.Clip(_insetClip_0);
            result.Size({ 176.0F, 176.0F });
            // Offset:<721.497, 707.419>, Scale:<1, 1>
            result.TransformMatrix({ 1.0F, 0.0F, 0.0F, 0.0F, 0.0F, 1.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 721.497009F, 707.419006F, 0.0F, 1.0F });
            // Layer aggregator
            result.Children().InsertAtTop(ShapeVisual_2());
            return result;
        }

        // The root of the composition.
        ContainerVisual Root()
        {
            const auto result = _root = _c.CreateContainerVisual();
            const auto propertySet = result.Properties();
            propertySet.InsertScalar(L"Progress", 0.0F);
            const auto children = result.Children();
            // PreComp layer: file 2
            children.InsertAtTop(ContainerVisual_0());
            // PreComp layer: file 1
            children.InsertAtTop(ContainerVisual_2());
            // PreComp layer: Add button
            children.InsertAtTop(ContainerVisual_4());
            return result;
        }

        CubicBezierEasingFunction CubicBezierEasingFunction_0()
        {
            return _cubicBezierEasingFunction_0 = _c.CreateCubicBezierEasingFunction({ 0.875F, 0.0F }, { 0.333000004F, 1.0F });
        }

        CubicBezierEasingFunction CubicBezierEasingFunction_1()
        {
            return _cubicBezierEasingFunction_1 = _c.CreateCubicBezierEasingFunction({ 0.166999996F, 0.166999996F }, { 0.833000004F, 0.833000004F });
        }

        ExpressionAnimation RootProgress()
        {
            const auto result = _rootProgress = _c.CreateExpressionAnimation(L"_.Progress");
            result.SetReferenceParameter(L"_", _root);
            return result;
        }

        InsetClip InsetClip_0()
        {
            const auto result = _insetClip_0 = _c.CreateInsetClip();
            return result;
        }

        // - - PreComp layer: Add button
        // - Layer aggregator
        // ShapeGroup: Path 23
        // Rotation
        ScalarKeyFrameAnimation RotationAngleInDegreesScalarAnimation_0_to_0()
        {
            // Frame 0.
            const auto result = CreateScalarKeyFrameAnimation(0.0F, 0.0F, _stepThenHoldEasingFunction);
            // Frame 30.
            result.InsertKeyFrame(0.165745854F, 0.0F, _holdThenStepEasingFunction);
            // Frame 75.
            result.InsertKeyFrame(0.414364636F, 270.0F, CubicBezierEasingFunction_1());
            // Frame 105.
            result.InsertKeyFrame(0.58011049F, 270.0F, _c.CreateCubicBezierEasingFunction({ 0.166999996F, 0.0F }, { 0.833000004F, 1.0F }));
            // Frame 142.
            result.InsertKeyFrame(0.784530401F, 0.0F, _cubicBezierEasingFunction_1);
            return result;
        }

        // Scale
        ScalarKeyFrameAnimation ScalarAnimation_1_to_1_0()
        {
            // Frame 0.
            const auto result = _scalarAnimation_1_to_1_0 = CreateScalarKeyFrameAnimation(0.0F, 1.0F, StepThenHoldEasingFunction());
            // Frame 30.
            result.InsertKeyFrame(0.165745854F, 1.0F, HoldThenStepEasingFunction());
            // Frame 59.
            result.InsertKeyFrame(0.325966865F, 0.0F, _c.CreateCubicBezierEasingFunction({ 0.81099999F, 0.0F }, { 0.486000001F, 1.0F }));
            // Frame 105.
            result.InsertKeyFrame(0.58011049F, 0.0F, _c.CreateCubicBezierEasingFunction({ 0.333000004F, 0.0F }, { 0.458000004F, 1.0F }));
            // Frame 150.
            result.InsertKeyFrame(0.828729272F, 1.0F, _c.CreateCubicBezierEasingFunction({ 0.912999988F, 0.0F }, { 0.453999996F, 1.0F }));
            return result;
        }

        // Scale
        ScalarKeyFrameAnimation ScalarAnimation_1_to_1_1()
        {
            // Frame 0.
            const auto result = _scalarAnimation_1_to_1_1 = CreateScalarKeyFrameAnimation(0.0F, 1.0F, _stepThenHoldEasingFunction);
            // Frame 30.
            result.InsertKeyFrame(0.165745854F, 1.0F, _holdThenStepEasingFunction);
            // Frame 75.
            result.InsertKeyFrame(0.414364636F, 0.0F, CubicBezierEasingFunction_0());
            // Frame 105.
            result.InsertKeyFrame(0.58011049F, 0.0F, _c.CreateCubicBezierEasingFunction({ 1.0F, 0.0F }, { 0.166999996F, 1.0F }));
            // Frame 150.
            result.InsertKeyFrame(0.828729272F, 1.0F, _cubicBezierEasingFunction_0);
            return result;
        }

        // - PreComp layer: file 2
        // Layer aggregator
        ShapeVisual ShapeVisual_0()
        {
            const auto result = _c.CreateShapeVisual();
            result.Size({ 571.0F, 619.0F });
            const auto shapes = result.Shapes();
            // Offset:<285.494, 309.049>
            shapes.Append(SpriteShape_00());
            // Offset:<285.494, 309.049>
            shapes.Append(SpriteShape_01());
            // Offset:<285.494, 309.049>
            shapes.Append(SpriteShape_02());
            // Offset:<285.494, 309.049>
            shapes.Append(SpriteShape_03());
            // Offset:<285.494, 309.049>
            shapes.Append(SpriteShape_04());
            // Offset:<285.494, 309.049>
            shapes.Append(SpriteShape_05());
            // Offset:<285.494, 309.049>
            shapes.Append(SpriteShape_06());
            // Offset:<285.494, 309.049>
            shapes.Append(SpriteShape_07());
            // Offset:<285.494, 309.049>
            shapes.Append(SpriteShape_08());
            // Offset:<285.494, 309.049>
            shapes.Append(SpriteShape_09());
            // Offset:<285.494, 309.049>
            shapes.Append(SpriteShape_10());
            return result;
        }

        // - PreComp layer: file 1
        // Layer aggregator
        ShapeVisual ShapeVisual_1()
        {
            const auto result = _c.CreateShapeVisual();
            result.Size({ 473.0F, 539.0F });
            const auto shapes = result.Shapes();
            // Offset:<236.285, 269.063>
            shapes.Append(SpriteShape_11());
            // Offset:<236.285, 269.063>
            shapes.Append(SpriteShape_12());
            // Offset:<236.285, 269.063>
            shapes.Append(SpriteShape_13());
            // Offset:<236.285, 269.063>
            shapes.Append(SpriteShape_14());
            // Offset:<236.285, 269.063>
            shapes.Append(SpriteShape_15());
            // Offset:<236.285, 269.063>
            shapes.Append(SpriteShape_16());
            // Offset:<236.285, 269.063>
            shapes.Append(SpriteShape_17());
            // Offset:<236.285, 269.063>
            shapes.Append(SpriteShape_18());
            // Offset:<236.285, 269.063>
            shapes.Append(SpriteShape_19());
            // Offset:<236.285, 269.063>
            shapes.Append(SpriteShape_20());
            // Offset:<236.285, 269.063>
            shapes.Append(SpriteShape_21());
            return result;
        }

        // PreComp layer: Add button
        // Layer aggregator
        ShapeVisual ShapeVisual_2()
        {
            const auto result = _c.CreateShapeVisual();
            result.Size({ 176.0F, 176.0F });
            const auto shapes = result.Shapes();
            // Offset:<87.85, 87.85>
            shapes.Append(SpriteShape_22());
            // ShapeGroup: Path 23
            shapes.Append(SpriteShape_23());
            return result;
        }

        StepEasingFunction HoldThenStepEasingFunction()
        {
            const auto result = _holdThenStepEasingFunction = _c.CreateStepEasingFunction();
            result.IsFinalStepSingleFrame(true);
            return result;
        }

        StepEasingFunction StepThenHoldEasingFunction()
        {
            const auto result = _stepThenHoldEasingFunction = _c.CreateStepEasingFunction();
            result.IsInitialStepSingleFrame(true);
            return result;
        }

        static IGeometrySource2D CanvasGeometryToIGeometrySource2D(winrt::com_ptr<CanvasGeometry> geo)
        {
            return geo.as<IGeometrySource2D>();
        }

    public:
        AddFile_AnimatedVisual_UAPv12(
            Compositor compositor,
            CompositionPropertySet themeProperties)
            : _c{compositor}
            , _themeProperties{themeProperties}
            , _reusableExpressionAnimation(compositor.CreateExpressionAnimation())
        {
            winrt::check_hresult(D2D1CreateFactory(D2D1_FACTORY_TYPE_SINGLE_THREADED, _d2dFactory.put()));
            const auto _ = Root();
        }

        void Close()
        {
            if (_root)
            {
                _root.Close();
            }
        }

        TimeSpan Duration() const
        {
            return TimeSpan{ c_durationTicks };
        }

        Visual RootVisual() const
        {
            return _root;
        }

        float2 Size() const
        {
            return { 1080.0F, 1080.0F };
        }

        static bool IsRuntimeCompatible()
        {
            return winrt::Windows::Foundation::Metadata::ApiInformation::IsApiContractPresent(L"Windows.Foundation.UniversalApiContract", 12);
        }
    };

    class AddFile_AnimatedVisual_UAPv7 : public winrt::implements<AddFile_AnimatedVisual_UAPv7,
            winrt::Microsoft::UI::Xaml::Controls::IAnimatedVisual,
            IClosable>
    {
        winrt::com_ptr<ID2D1Factory> _d2dFactory{ nullptr };
        static constexpr int64_t c_durationTicks{ 30166666L };
        Compositor const _c{ nullptr };
        ExpressionAnimation const _reusableExpressionAnimation{ nullptr };
        CompositionPropertySet const _themeProperties{ nullptr };
        CompositionColorBrush _themeColor_Color_0077D4{ nullptr };
        CompositionColorBrush _themeColor_Color_CCCCCC{ nullptr };
        CompositionColorBrush _themeColor_Color_E6E6E6{ nullptr };
        CompositionColorBrush _themeColor_Color_F2F2F2{ nullptr };
        CompositionColorBrush _themeColor_Color_FFFFFF{ nullptr };
        ContainerVisual _root{ nullptr };
        CubicBezierEasingFunction _cubicBezierEasingFunction_0{ nullptr };
        CubicBezierEasingFunction _cubicBezierEasingFunction_1{ nullptr };
        ExpressionAnimation _rootProgress{ nullptr };
        InsetClip _insetClip_0{ nullptr };
        ScalarKeyFrameAnimation _scalarAnimation_1_to_1_0{ nullptr };
        ScalarKeyFrameAnimation _scalarAnimation_1_to_1_1{ nullptr };
        StepEasingFunction _holdThenStepEasingFunction{ nullptr };
        StepEasingFunction _stepThenHoldEasingFunction{ nullptr };

        static void StartProgressBoundAnimation(
            CompositionObject target,
            winrt::hstring animatedPropertyName,
            CompositionAnimation animation,
            ExpressionAnimation controllerProgressExpression)
        {
            target.StartAnimation(animatedPropertyName, animation);
            const auto controller = target.TryGetAnimationController(animatedPropertyName);
            controller.Pause();
            controller.StartAnimation(L"Progress", controllerProgressExpression);
        }

        void BindProperty(
            CompositionObject target,
            winrt::hstring animatedPropertyName,
            winrt::hstring expression,
            winrt::hstring referenceParameterName,
            CompositionObject referencedObject)
        {
            _reusableExpressionAnimation.ClearAllParameters();
            _reusableExpressionAnimation.Expression(expression);
            _reusableExpressionAnimation.SetReferenceParameter(referenceParameterName, referencedObject);
            target.StartAnimation(animatedPropertyName, _reusableExpressionAnimation);
        }

        ScalarKeyFrameAnimation CreateScalarKeyFrameAnimation(float initialProgress, float initialValue, CompositionEasingFunction initialEasingFunction)
        {
            const auto result = _c.CreateScalarKeyFrameAnimation();
            result.Duration(TimeSpan{ c_durationTicks });
            result.InsertKeyFrame(initialProgress, initialValue, initialEasingFunction);
            return result;
        }

        CompositionSpriteShape CreateSpriteShape(CompositionGeometry geometry, float3x2 transformMatrix, CompositionBrush fillBrush)
        {
            const auto result = _c.CreateSpriteShape(geometry);
            result.TransformMatrix(transformMatrix);
            result.FillBrush(fillBrush);
            return result;
        }

        // - - - - - PreComp layer: file 2
        // - - - Layer aggregator
        // - -  Offset:<285.494, 309.049>
        winrt::com_ptr<CanvasGeometry> Geometry_00()
        {
            winrt::com_ptr<ID2D1PathGeometry> path{ nullptr };
            winrt::check_hresult(_d2dFactory->CreatePathGeometry(path.put()));
            winrt::com_ptr<ID2D1GeometrySink> sink{ nullptr };
            winrt::check_hresult(path->Open(sink.put()));
            sink->SetFillMode(D2D1_FILL_MODE_WINDING);
            sink->BeginFigure({ 400.503998F, 1.52400005F }, D2D1_FIGURE_BEGIN_FILLED);
            sink->AddLine({ 375.058014F, 8.08600044F });
            sink->AddLine({ 61.5540009F, 88.9329987F });
            sink->AddLine({ 36.1069984F, 95.4950027F });
            sink->AddBezier({ { 10.3900003F, 102.157997F }, { -5.08099985F, 128.380005F }, { 1.52400005F, 154.113007F } });
            sink->AddLine({ 111.864998F, 581.98999F });
            sink->AddBezier({ { 118.528F, 607.70697F }, { 144.751007F, 623.177979F }, { 170.483002F, 616.572998F } });
            sink->AddLine({ 170.548996F, 616.55603F });
            sink->AddLine({ 534.814026F, 522.619019F });
            sink->AddLine({ 534.880005F, 522.603027F });
            sink->AddBezier({ { 560.596985F, 515.940002F }, { 576.067993F, 489.71701F }, { 569.463013F, 463.984985F } });
            sink->AddLine({ 459.122009F, 36.1069984F });
            sink->AddBezier({ { 452.459015F, 10.3900003F }, { 426.235992F, -5.08099985F }, { 400.503998F, 1.52400005F } });
            sink->EndFigure(D2D1_FIGURE_END_CLOSED);
            winrt::check_hresult(sink->Close());
            auto result = winrt::make_self<CanvasGeometry>(path);
            return result;
        }

        // - - - - - PreComp layer: file 2
        // - - - Layer aggregator
        // - -  Offset:<285.494, 309.049>
        winrt::com_ptr<CanvasGeometry> Geometry_01()
        {
            winrt::com_ptr<ID2D1PathGeometry> path{ nullptr };
            winrt::check_hresult(_d2dFactory->CreatePathGeometry(path.put()));
            winrt::com_ptr<ID2D1GeometrySink> sink{ nullptr };
            winrt::check_hresult(path->Open(sink.put()));
            sink->SetFillMode(D2D1_FILL_MODE_WINDING);
            sink->BeginFigure({ 390.109985F, 1.08500004F }, D2D1_FIGURE_BEGIN_FILLED);
            sink->AddLine({ 359.971008F, 8.8579998F });
            sink->AddLine({ 55.8520012F, 87.2839966F });
            sink->AddLine({ 25.7129993F, 95.0559998F });
            sink->AddBezier({ { 7.39900017F, 99.8010025F }, { -3.61800003F, 118.474998F }, { 1.08500004F, 136.798996F } });
            sink->AddLine({ 111.426003F, 564.677002F });
            sink->AddBezier({ { 116.170998F, 582.98999F }, { 134.845001F, 594.007996F }, { 153.169006F, 589.304016F } });
            sink->AddLine({ 153.235001F, 589.286987F });
            sink->AddLine({ 517.5F, 495.350006F });
            sink->AddLine({ 517.567017F, 495.333008F });
            sink->AddBezier({ { 535.880005F, 490.588013F }, { 546.896973F, 471.915009F }, { 542.19397F, 453.589996F } });
            sink->AddLine({ 431.852997F, 25.7129993F });
            sink->AddBezier({ { 427.108002F, 7.39900017F }, { 408.43399F, -3.61800003F }, { 390.109985F, 1.08500004F } });
            sink->EndFigure(D2D1_FIGURE_END_CLOSED);
            winrt::check_hresult(sink->Close());
            auto result = winrt::make_self<CanvasGeometry>(path);
            return result;
        }

        // - - - - - PreComp layer: file 2
        // - - - Layer aggregator
        // - -  Offset:<285.494, 309.049>
        winrt::com_ptr<CanvasGeometry> Geometry_02()
        {
            winrt::com_ptr<ID2D1PathGeometry> path{ nullptr };
            winrt::check_hresult(_d2dFactory->CreatePathGeometry(path.put()));
            winrt::com_ptr<ID2D1GeometrySink> sink{ nullptr };
            winrt::check_hresult(path->Open(sink.put()));
            sink->SetFillMode(D2D1_FILL_MODE_WINDING);
            sink->BeginFigure({ 194.283005F, 15.7729998F }, D2D1_FIGURE_BEGIN_FILLED);
            sink->AddLine({ 10.0100002F, 63.2939987F });
            sink->AddBezier({ { 5.72300005F, 64.3949966F }, { 1.35500002F, 61.8120003F }, { 0.254000008F, 57.5250015F } });
            sink->AddBezier({ { -0.845000029F, 53.2439995F }, { 1.72899997F, 48.8810005F }, { 6.0079999F, 47.7729988F } });
            sink->AddLine({ 190.281006F, 0.252999991F });
            sink->AddBezier({ { 194.567993F, -0.845000029F }, { 198.934998F, 1.73899996F }, { 200.033005F, 6.02699995F } });
            sink->AddBezier({ { 201.128998F, 10.3039999F }, { 198.557007F, 14.6639996F }, { 194.283005F, 15.7729998F } });
            sink->EndFigure(D2D1_FIGURE_END_CLOSED);
            winrt::check_hresult(sink->Close());
            auto result = winrt::make_self<CanvasGeometry>(path);
            return result;
        }

        // - - - - - PreComp layer: file 2
        // - - - Layer aggregator
        // - -  Offset:<285.494, 309.049>
        winrt::com_ptr<CanvasGeometry> Geometry_03()
        {
            winrt::com_ptr<ID2D1PathGeometry> path{ nullptr };
            winrt::check_hresult(_d2dFactory->CreatePathGeometry(path.put()));
            winrt::com_ptr<ID2D1GeometrySink> sink{ nullptr };
            winrt::check_hresult(path->Open(sink.put()));
            sink->SetFillMode(D2D1_FILL_MODE_WINDING);
            sink->BeginFigure({ 226.309006F, 15.776F }, D2D1_FIGURE_BEGIN_FILLED);
            sink->AddLine({ 10.0249996F, 71.5510025F });
            sink->AddBezier({ { 5.73999977F, 72.6610031F }, { 1.36800003F, 70.086998F }, { 0.257999986F, 65.802002F } });
            sink->AddBezier({ { -0.851000011F, 61.5169983F }, { 1.72300005F, 57.144001F }, { 6.0079999F, 56.0349998F } });
            sink->AddLine({ 6.02299976F, 56.0309982F });
            sink->AddLine({ 222.307007F, 0.256000012F });
            sink->AddBezier({ { 226.593002F, -0.850000024F }, { 230.962997F, 1.72899997F }, { 232.067993F, 6.01499987F } });
            sink->AddBezier({ { 233.173004F, 10.3009996F }, { 230.595001F, 14.6709995F }, { 226.309006F, 15.776F } });
            sink->EndFigure(D2D1_FIGURE_END_CLOSED);
            winrt::check_hresult(sink->Close());
            auto result = winrt::make_self<CanvasGeometry>(path);
            return result;
        }

        // - - - - - PreComp layer: file 2
        // - - - Layer aggregator
        // - -  Offset:<285.494, 309.049>
        winrt::com_ptr<CanvasGeometry> Geometry_04()
        {
            winrt::com_ptr<ID2D1PathGeometry> path{ nullptr };
            winrt::check_hresult(_d2dFactory->CreatePathGeometry(path.put()));
            winrt::com_ptr<ID2D1GeometrySink> sink{ nullptr };
            winrt::check_hresult(path->Open(sink.put()));
            sink->SetFillMode(D2D1_FILL_MODE_WINDING);
            sink->BeginFigure({ 194.298004F, 15.7799997F }, D2D1_FIGURE_BEGIN_FILLED);
            sink->AddLine({ 10.0249996F, 63.2989998F });
            sink->AddBezier({ { 5.74100018F, 64.4089966F }, { 1.36800003F, 61.8349991F }, { 0.257999986F, 57.5509987F } });
            sink->AddBezier({ { -0.851000011F, 53.2659988F }, { 1.72300005F, 48.8930016F }, { 6.0079999F, 47.7840004F } });
            sink->AddLine({ 6.02299976F, 47.7799988F });
            sink->AddLine({ 190.296005F, 0.257999986F });
            sink->AddBezier({ { 194.580002F, -0.852999985F }, { 198.953995F, 1.72000003F }, { 200.065002F, 6.00400019F } });
            sink->AddBezier({ { 201.177002F, 10.2880001F }, { 198.604004F, 14.6619997F }, { 194.320007F, 15.7729998F } });
            sink->AddLine({ 194.298004F, 15.7799997F });
            sink->EndFigure(D2D1_FIGURE_END_CLOSED);
            winrt::check_hresult(sink->Close());
            auto result = winrt::make_self<CanvasGeometry>(path);
            return result;
        }

        // - - - - - PreComp layer: file 2
        // - - - Layer aggregator
        // - -  Offset:<285.494, 309.049>
        winrt::com_ptr<CanvasGeometry> Geometry_05()
        {
            winrt::com_ptr<ID2D1PathGeometry> path{ nullptr };
            winrt::check_hresult(_d2dFactory->CreatePathGeometry(path.put()));
            winrt::com_ptr<ID2D1GeometrySink> sink{ nullptr };
            winrt::check_hresult(path->Open(sink.put()));
            sink->SetFillMode(D2D1_FILL_MODE_WINDING);
            sink->BeginFigure({ 226.309006F, 15.7770004F }, D2D1_FIGURE_BEGIN_FILLED);
            sink->AddLine({ 10.0249996F, 71.552002F });
            sink->AddBezier({ { 5.74100018F, 72.6610031F }, { 1.36800003F, 70.086998F }, { 0.257999986F, 65.802002F } });
            sink->AddBezier({ { -0.851000011F, 61.5180016F }, { 1.72300005F, 57.1450005F }, { 6.0079999F, 56.0349998F } });
            sink->AddLine({ 6.02299976F, 56.0309982F });
            sink->AddLine({ 222.307007F, 0.256000012F });
            sink->AddBezier({ { 226.593002F, -0.848999977F }, { 230.962997F, 1.73000002F }, { 232.067993F, 6.01599979F } });
            sink->AddBezier({ { 233.171997F, 10.302F }, { 230.595001F, 14.6709995F }, { 226.309006F, 15.7770004F } });
            sink->EndFigure(D2D1_FIGURE_END_CLOSED);
            winrt::check_hresult(sink->Close());
            auto result = winrt::make_self<CanvasGeometry>(path);
            return result;
        }

        // - - - - - PreComp layer: file 2
        // - - - Layer aggregator
        // - -  Offset:<285.494, 309.049>
        winrt::com_ptr<CanvasGeometry> Geometry_06()
        {
            winrt::com_ptr<ID2D1PathGeometry> path{ nullptr };
            winrt::check_hresult(_d2dFactory->CreatePathGeometry(path.put()));
            winrt::com_ptr<ID2D1GeometrySink> sink{ nullptr };
            winrt::check_hresult(path->Open(sink.put()));
            sink->SetFillMode(D2D1_FILL_MODE_WINDING);
            sink->BeginFigure({ 84.9840012F, 65.612999F }, D2D1_FIGURE_BEGIN_FILLED);
            sink->AddLine({ 19.7719994F, 82.4300003F });
            sink->AddBezier({ { 17.7169991F, 82.9570007F }, { 15.6230001F, 81.7220001F }, { 15.0909996F, 79.6679993F } });
            sink->AddLine({ 0.122000001F, 21.6200008F });
            sink->AddBezier({ { -0.405999988F, 19.5650005F }, { 0.828999996F, 17.4710007F }, { 2.8829999F, 16.9389992F } });
            sink->AddLine({ 68.0950012F, 0.122000001F });
            sink->AddBezier({ { 70.1500015F, -0.405000001F }, { 72.2440033F, 0.829999983F }, { 72.776001F, 2.88400006F } });
            sink->AddLine({ 87.7460022F, 60.9319992F });
            sink->AddBezier({ { 88.2730026F, 62.9869995F }, { 87.038002F, 65.0810013F }, { 84.9840012F, 65.612999F } });
            sink->EndFigure(D2D1_FIGURE_END_CLOSED);
            winrt::check_hresult(sink->Close());
            auto result = winrt::make_self<CanvasGeometry>(path);
            return result;
        }

        // - - - - - PreComp layer: file 2
        // - - - Layer aggregator
        // - -  Offset:<285.494, 309.049>
        winrt::com_ptr<CanvasGeometry> Geometry_07()
        {
            winrt::com_ptr<ID2D1PathGeometry> path{ nullptr };
            winrt::check_hresult(_d2dFactory->CreatePathGeometry(path.put()));
            winrt::com_ptr<ID2D1GeometrySink> sink{ nullptr };
            winrt::check_hresult(path->Open(sink.put()));
            sink->SetFillMode(D2D1_FILL_MODE_WINDING);
            sink->BeginFigure({ 84.9840012F, 65.6119995F }, D2D1_FIGURE_BEGIN_FILLED);
            sink->AddLine({ 19.7719994F, 82.4290009F });
            sink->AddBezier({ { 17.7169991F, 82.9570007F }, { 15.6230001F, 81.7210007F }, { 15.0909996F, 79.6679993F } });
            sink->AddLine({ 0.122000001F, 21.6200008F });
            sink->AddBezier({ { -0.405999988F, 19.5650005F }, { 0.829999983F, 17.4710007F }, { 2.8829999F, 16.9389992F } });
            sink->AddLine({ 68.0960007F, 0.122000001F });
            sink->AddBezier({ { 70.1500015F, -0.405000001F }, { 72.2440033F, 0.829999983F }, { 72.776001F, 2.8829999F } });
            sink->AddLine({ 87.7460022F, 60.9319992F });
            sink->AddBezier({ { 88.2730026F, 62.9860001F }, { 87.038002F, 65.0800018F }, { 84.9840012F, 65.6119995F } });
            sink->EndFigure(D2D1_FIGURE_END_CLOSED);
            winrt::check_hresult(sink->Close());
            auto result = winrt::make_self<CanvasGeometry>(path);
            return result;
        }

        // - - - - - PreComp layer: file 2
        // - - - Layer aggregator
        // - -  Offset:<285.494, 309.049>
        winrt::com_ptr<CanvasGeometry> Geometry_08()
        {
            winrt::com_ptr<ID2D1PathGeometry> path{ nullptr };
            winrt::check_hresult(_d2dFactory->CreatePathGeometry(path.put()));
            winrt::com_ptr<ID2D1GeometrySink> sink{ nullptr };
            winrt::check_hresult(path->Open(sink.put()));
            sink->SetFillMode(D2D1_FILL_MODE_WINDING);
            sink->BeginFigure({ 84.9850006F, 65.612999F }, D2D1_FIGURE_BEGIN_FILLED);
            sink->AddLine({ 19.7719994F, 82.4300003F });
            sink->AddBezier({ { 17.7169991F, 82.9570007F }, { 15.6230001F, 81.7220001F }, { 15.0909996F, 79.6679993F } });
            sink->AddLine({ 0.122000001F, 21.6200008F });
            sink->AddBezier({ { -0.405000001F, 19.5650005F }, { 0.829999983F, 17.4710007F }, { 2.8829999F, 16.9389992F } });
            sink->AddLine({ 68.0960007F, 0.122000001F });
            sink->AddBezier({ { 70.151001F, -0.405000001F }, { 72.2450027F, 0.829999983F }, { 72.7770004F, 2.88400006F } });
            sink->AddLine({ 87.7460022F, 60.9319992F });
            sink->AddBezier({ { 88.2740021F, 62.9869995F }, { 87.038002F, 65.0810013F }, { 84.9850006F, 65.612999F } });
            sink->EndFigure(D2D1_FIGURE_END_CLOSED);
            winrt::check_hresult(sink->Close());
            auto result = winrt::make_self<CanvasGeometry>(path);
            return result;
        }

        // - - - - - PreComp layer: file 2
        // - - - Layer aggregator
        // - -  Offset:<285.494, 309.049>
        winrt::com_ptr<CanvasGeometry> Geometry_09()
        {
            winrt::com_ptr<ID2D1PathGeometry> path{ nullptr };
            winrt::check_hresult(_d2dFactory->CreatePathGeometry(path.put()));
            winrt::com_ptr<ID2D1GeometrySink> sink{ nullptr };
            winrt::check_hresult(path->Open(sink.put()));
            sink->SetFillMode(D2D1_FILL_MODE_WINDING);
            sink->BeginFigure({ 194.276001F, 15.776F }, D2D1_FIGURE_BEGIN_FILLED);
            sink->AddLine({ 10.0030003F, 63.2970009F });
            sink->AddBezier({ { 5.71500015F, 64.3939972F }, { 1.34899998F, 61.8069992F }, { 0.252000004F, 57.519001F } });
            sink->AddBezier({ { -0.842000008F, 53.243F }, { 1.72800004F, 48.8860016F }, { 6.0F, 47.776001F } });
            sink->AddLine({ 190.272995F, 0.256000012F });
            sink->AddBezier({ { 194.559006F, -0.848999977F }, { 198.929001F, 1.73000002F }, { 200.033997F, 6.01599979F } });
            sink->AddBezier({ { 201.139008F, 10.3009996F }, { 198.561005F, 14.6709995F }, { 194.276001F, 15.776F } });
            sink->EndFigure(D2D1_FIGURE_END_CLOSED);
            winrt::check_hresult(sink->Close());
            auto result = winrt::make_self<CanvasGeometry>(path);
            return result;
        }

        // - - - - - PreComp layer: file 2
        // - - - Layer aggregator
        // - -  Offset:<285.494, 309.049>
        winrt::com_ptr<CanvasGeometry> Geometry_10()
        {
            winrt::com_ptr<ID2D1PathGeometry> path{ nullptr };
            winrt::check_hresult(_d2dFactory->CreatePathGeometry(path.put()));
            winrt::com_ptr<ID2D1GeometrySink> sink{ nullptr };
            winrt::check_hresult(path->Open(sink.put()));
            sink->SetFillMode(D2D1_FILL_MODE_WINDING);
            sink->BeginFigure({ 226.317001F, 15.776F }, D2D1_FIGURE_BEGIN_FILLED);
            sink->AddLine({ 10.033F, 71.5510025F });
            sink->AddBezier({ { 5.74900007F, 72.6650009F }, { 1.37399995F, 70.0950012F }, { 0.25999999F, 65.810997F } });
            sink->AddBezier({ { -0.852999985F, 61.5270004F }, { 1.71700001F, 57.1520004F }, { 6.00099993F, 56.0379982F } });
            sink->AddLine({ 6.02899981F, 56.0309982F });
            sink->AddLine({ 222.313004F, 0.256000012F });
            sink->AddBezier({ { 226.598999F, -0.848999977F }, { 230.970001F, 1.73000002F }, { 232.074997F, 6.01599979F } });
            sink->AddBezier({ { 233.179993F, 10.3009996F }, { 230.602005F, 14.6700001F }, { 226.317001F, 15.776F } });
            sink->EndFigure(D2D1_FIGURE_END_CLOSED);
            winrt::check_hresult(sink->Close());
            auto result = winrt::make_self<CanvasGeometry>(path);
            return result;
        }

        // - - - - - PreComp layer: file 1
        // - - - Layer aggregator
        // - -  Offset:<236.285, 269.063>
        winrt::com_ptr<CanvasGeometry> Geometry_11()
        {
            winrt::com_ptr<ID2D1PathGeometry> path{ nullptr };
            winrt::check_hresult(_d2dFactory->CreatePathGeometry(path.put()));
            winrt::com_ptr<ID2D1GeometrySink> sink{ nullptr };
            winrt::check_hresult(path->Open(sink.put()));
            sink->SetFillMode(D2D1_FILL_MODE_WINDING);
            sink->BeginFigure({ 424.444F, 0.0F }, D2D1_FIGURE_BEGIN_FILLED);
            sink->AddLine({ 48.125F, 0.0F });
            sink->AddBezier({ { 21.559F, 0.0299999993F }, { 0.0299999993F, 21.5580006F }, { 0.0F, 48.125F } });
            sink->AddLine({ 0.0F, 490.001007F });
            sink->AddBezier({ { 0.0299999993F, 516.567017F }, { 21.559F, 538.096008F }, { 48.125F, 538.125977F } });
            sink->AddLine({ 424.444F, 538.125977F });
            sink->AddBezier({ { 451.01001F, 538.096008F }, { 472.539001F, 516.567017F }, { 472.569F, 490.001007F } });
            sink->AddLine({ 472.569F, 48.125F });
            sink->AddBezier({ { 472.539001F, 21.5580006F }, { 451.01001F, 0.0299999993F }, { 424.444F, 0.0F } });
            sink->EndFigure(D2D1_FIGURE_END_CLOSED);
            winrt::check_hresult(sink->Close());
            auto result = winrt::make_self<CanvasGeometry>(path);
            return result;
        }

        // - - - - - PreComp layer: file 1
        // - - - Layer aggregator
        // - -  Offset:<236.285, 269.063>
        winrt::com_ptr<CanvasGeometry> Geometry_12()
        {
            winrt::com_ptr<ID2D1PathGeometry> path{ nullptr };
            winrt::check_hresult(_d2dFactory->CreatePathGeometry(path.put()));
            winrt::com_ptr<ID2D1GeometrySink> sink{ nullptr };
            winrt::check_hresult(path->Open(sink.put()));
            sink->SetFillMode(D2D1_FILL_MODE_WINDING);
            sink->BeginFigure({ 410.589996F, 0.0F }, D2D1_FIGURE_BEGIN_FILLED);
            sink->AddLine({ 34.2709999F, 0.0F });
            sink->AddBezier({ { 15.3529997F, 0.0209999997F }, { 0.0219999999F, 15.3520002F }, { 0.0F, 34.2709999F } });
            sink->AddLine({ 0.0F, 476.147003F });
            sink->AddBezier({ { 0.0219999999F, 495.065002F }, { 15.3529997F, 510.395996F }, { 34.2709999F, 510.416992F } });
            sink->AddLine({ 410.589996F, 510.416992F });
            sink->AddBezier({ { 429.509003F, 510.395996F }, { 444.839996F, 495.065002F }, { 444.860992F, 476.147003F } });
            sink->AddLine({ 444.860992F, 34.2709999F });
            sink->AddBezier({ { 444.839996F, 15.3520002F }, { 429.509003F, 0.0209999997F }, { 410.589996F, 0.0F } });
            sink->EndFigure(D2D1_FIGURE_END_CLOSED);
            winrt::check_hresult(sink->Close());
            auto result = winrt::make_self<CanvasGeometry>(path);
            return result;
        }

        // - - - - - PreComp layer: file 1
        // - - - Layer aggregator
        // - -  Offset:<236.285, 269.063>
        winrt::com_ptr<CanvasGeometry> Geometry_13()
        {
            winrt::com_ptr<ID2D1PathGeometry> path{ nullptr };
            winrt::check_hresult(_d2dFactory->CreatePathGeometry(path.put()));
            winrt::com_ptr<ID2D1GeometrySink> sink{ nullptr };
            winrt::check_hresult(path->Open(sink.put()));
            sink->SetFillMode(D2D1_FILL_MODE_WINDING);
            sink->BeginFigure({ 201.731995F, 16.3040009F }, D2D1_FIGURE_BEGIN_FILLED);
            sink->AddLine({ 8.16100025F, 16.3040009F });
            sink->AddBezier({ { 3.65899992F, 16.309F }, { 0.00499999989F, 12.6639996F }, { 0.0F, 8.1619997F } });
            sink->AddBezier({ { -0.00499999989F, 3.65899992F }, { 3.6400001F, 0.00499999989F }, { 8.1420002F, 0.0F } });
            sink->AddLine({ 8.16100025F, 0.0F });
            sink->AddLine({ 201.731995F, 0.0F });
            sink->AddBezier({ { 206.233994F, 0.00499999989F }, { 209.880005F, 3.65899992F }, { 209.873993F, 8.1619997F } });
            sink->AddBezier({ { 209.869003F, 12.6560001F }, { 206.227005F, 16.2980003F }, { 201.731995F, 16.3040009F } });
            sink->EndFigure(D2D1_FIGURE_END_CLOSED);
            winrt::check_hresult(sink->Close());
            auto result = winrt::make_self<CanvasGeometry>(path);
            return result;
        }

        // - - - - - PreComp layer: file 1
        // - - - Layer aggregator
        // - -  Offset:<236.285, 269.063>
        winrt::com_ptr<CanvasGeometry> Geometry_14()
        {
            winrt::com_ptr<ID2D1PathGeometry> path{ nullptr };
            winrt::check_hresult(_d2dFactory->CreatePathGeometry(path.put()));
            winrt::com_ptr<ID2D1GeometrySink> sink{ nullptr };
            winrt::check_hresult(path->Open(sink.put()));
            sink->SetFillMode(D2D1_FILL_MODE_WINDING);
            sink->BeginFigure({ 235.358002F, 16.3040009F }, D2D1_FIGURE_BEGIN_FILLED);
            sink->AddLine({ 8.16100025F, 16.3040009F });
            sink->AddBezier({ { 3.65899992F, 16.309F }, { 0.00499999989F, 12.6639996F }, { 0.0F, 8.1619997F } });
            sink->AddBezier({ { -0.00499999989F, 3.66000009F }, { 3.6400001F, 0.00600000005F }, { 8.1420002F, 0.0F } });
            sink->AddLine({ 8.16100025F, 0.0F });
            sink->AddLine({ 235.358002F, 0.0F });
            sink->AddBezier({ { 239.860992F, 0.0F }, { 243.509995F, 3.6500001F }, { 243.509995F, 8.15200043F } });
            sink->AddBezier({ { 243.509995F, 12.6540003F }, { 239.860992F, 16.3040009F }, { 235.358002F, 16.3040009F } });
            sink->EndFigure(D2D1_FIGURE_END_CLOSED);
            winrt::check_hresult(sink->Close());
            auto result = winrt::make_self<CanvasGeometry>(path);
            return result;
        }

        // - - - - - PreComp layer: file 1
        // - - - Layer aggregator
        // - -  Offset:<236.285, 269.063>
        winrt::com_ptr<CanvasGeometry> Geometry_15()
        {
            winrt::com_ptr<ID2D1PathGeometry> path{ nullptr };
            winrt::check_hresult(_d2dFactory->CreatePathGeometry(path.put()));
            winrt::com_ptr<ID2D1GeometrySink> sink{ nullptr };
            winrt::check_hresult(path->Open(sink.put()));
            sink->SetFillMode(D2D1_FILL_MODE_WINDING);
            sink->BeginFigure({ 201.722F, 16.3029995F }, D2D1_FIGURE_BEGIN_FILLED);
            sink->AddLine({ 8.15100002F, 16.3029995F });
            sink->AddBezier({ { 3.64899993F, 16.3029995F }, { 0.0F, 12.6540003F }, { 0.0F, 8.15200043F } });
            sink->AddBezier({ { 0.0F, 3.6500001F }, { 3.64899993F, 0.0F }, { 8.15100002F, 0.0F } });
            sink->AddLine({ 201.722F, 0.0F });
            sink->AddBezier({ { 206.223999F, 0.0F }, { 209.873993F, 3.6500001F }, { 209.873993F, 8.15200043F } });
            sink->AddBezier({ { 209.873993F, 12.6540003F }, { 206.223999F, 16.3029995F }, { 201.722F, 16.3029995F } });
            sink->EndFigure(D2D1_FIGURE_END_CLOSED);
            winrt::check_hresult(sink->Close());
            auto result = winrt::make_self<CanvasGeometry>(path);
            return result;
        }

        // - - - - - PreComp layer: file 1
        // - - - Layer aggregator
        // - -  Offset:<236.285, 269.063>
        winrt::com_ptr<CanvasGeometry> Geometry_16()
        {
            winrt::com_ptr<ID2D1PathGeometry> path{ nullptr };
            winrt::check_hresult(_d2dFactory->CreatePathGeometry(path.put()));
            winrt::com_ptr<ID2D1GeometrySink> sink{ nullptr };
            winrt::check_hresult(path->Open(sink.put()));
            sink->SetFillMode(D2D1_FILL_MODE_WINDING);
            sink->BeginFigure({ 235.348007F, 16.3040009F }, D2D1_FIGURE_BEGIN_FILLED);
            sink->AddLine({ 8.15100002F, 16.3040009F });
            sink->AddBezier({ { 3.64899993F, 16.3040009F }, { 0.0F, 12.6540003F }, { 0.0F, 8.15200043F } });
            sink->AddBezier({ { 0.0F, 3.6500001F }, { 3.64899993F, 0.0F }, { 8.15100002F, 0.0F } });
            sink->AddLine({ 235.348007F, 0.0F });
            sink->AddBezier({ { 239.850998F, 0.0F }, { 243.5F, 3.6500001F }, { 243.5F, 8.15200043F } });
            sink->AddBezier({ { 243.5F, 12.6540003F }, { 239.850998F, 16.3040009F }, { 235.348007F, 16.3040009F } });
            sink->EndFigure(D2D1_FIGURE_END_CLOSED);
            winrt::check_hresult(sink->Close());
            auto result = winrt::make_self<CanvasGeometry>(path);
            return result;
        }

        // - - - - - PreComp layer: file 1
        // - - - Layer aggregator
        // - -  Offset:<236.285, 269.063>
        winrt::com_ptr<CanvasGeometry> Geometry_17()
        {
            winrt::com_ptr<ID2D1PathGeometry> path{ nullptr };
            winrt::check_hresult(_d2dFactory->CreatePathGeometry(path.put()));
            winrt::com_ptr<ID2D1GeometrySink> sink{ nullptr };
            winrt::check_hresult(path->Open(sink.put()));
            sink->SetFillMode(D2D1_FILL_MODE_WINDING);
            sink->BeginFigure({ 72.4110031F, 68.7939987F }, D2D1_FIGURE_BEGIN_FILLED);
            sink->AddLine({ 3.90899992F, 68.7939987F });
            sink->AddBezier({ { 1.75100005F, 68.7919998F }, { 0.00200000009F, 67.0429993F }, { 0.0F, 64.8860016F } });
            sink->AddLine({ 0.0F, 3.90799999F });
            sink->AddBezier({ { 0.00200000009F, 1.75100005F }, { 1.75100005F, 0.00200000009F }, { 3.90899992F, 0.0F } });
            sink->AddLine({ 72.4110031F, 0.0F });
            sink->AddBezier({ { 74.5690002F, 0.00200000009F }, { 76.3180008F, 1.75100005F }, { 76.3199997F, 3.90799999F } });
            sink->AddLine({ 76.3199997F, 64.8860016F });
            sink->AddBezier({ { 76.3180008F, 67.0429993F }, { 74.5690002F, 68.7919998F }, { 72.4110031F, 68.7939987F } });
            sink->EndFigure(D2D1_FIGURE_END_CLOSED);
            winrt::check_hresult(sink->Close());
            auto result = winrt::make_self<CanvasGeometry>(path);
            return result;
        }

        // - - - - - PreComp layer: file 1
        // - - - Layer aggregator
        // - -  Offset:<236.285, 269.063>
        winrt::com_ptr<CanvasGeometry> Geometry_18()
        {
            winrt::com_ptr<ID2D1PathGeometry> path{ nullptr };
            winrt::check_hresult(_d2dFactory->CreatePathGeometry(path.put()));
            winrt::com_ptr<ID2D1GeometrySink> sink{ nullptr };
            winrt::check_hresult(path->Open(sink.put()));
            sink->SetFillMode(D2D1_FILL_MODE_WINDING);
            sink->BeginFigure({ 72.4110031F, 68.7949982F }, D2D1_FIGURE_BEGIN_FILLED);
            sink->AddLine({ 3.90899992F, 68.7949982F });
            sink->AddBezier({ { 1.75100005F, 68.7929993F }, { 0.00200000009F, 67.0439987F }, { 0.0F, 64.8860016F } });
            sink->AddLine({ 0.0F, 3.90899992F });
            sink->AddBezier({ { 0.00200000009F, 1.75100005F }, { 1.75100005F, 0.00300000003F }, { 3.90899992F, 0.0F } });
            sink->AddLine({ 72.4110031F, 0.0F });
            sink->AddBezier({ { 74.5690002F, 0.00300000003F }, { 76.3180008F, 1.75100005F }, { 76.3199997F, 3.90899992F } });
            sink->AddLine({ 76.3199997F, 64.8860016F });
            sink->AddBezier({ { 76.3180008F, 67.0439987F }, { 74.5690002F, 68.7929993F }, { 72.4110031F, 68.7949982F } });
            sink->EndFigure(D2D1_FIGURE_END_CLOSED);
            winrt::check_hresult(sink->Close());
            auto result = winrt::make_self<CanvasGeometry>(path);
            return result;
        }

        // - - - - - PreComp layer: file 1
        // - - - Layer aggregator
        // - -  Offset:<236.285, 269.063>
        winrt::com_ptr<CanvasGeometry> Geometry_19()
        {
            winrt::com_ptr<ID2D1PathGeometry> path{ nullptr };
            winrt::check_hresult(_d2dFactory->CreatePathGeometry(path.put()));
            winrt::com_ptr<ID2D1GeometrySink> sink{ nullptr };
            winrt::check_hresult(path->Open(sink.put()));
            sink->SetFillMode(D2D1_FILL_MODE_WINDING);
            sink->BeginFigure({ 150.863998F, 16.3029995F }, D2D1_FIGURE_BEGIN_FILLED);
            sink->AddLine({ 8.15200043F, 16.3029995F });
            sink->AddBezier({ { 3.6500001F, 16.3029995F }, { 0.0F, 12.6529999F }, { 0.0F, 8.15100002F } });
            sink->AddBezier({ { 0.0F, 3.64899993F }, { 3.6500001F, 0.0F }, { 8.15200043F, 0.0F } });
            sink->AddLine({ 150.863998F, 0.0F });
            sink->AddBezier({ { 155.365997F, 0.0F }, { 159.016006F, 3.64899993F }, { 159.016006F, 8.15100002F } });
            sink->AddBezier({ { 159.016006F, 12.6529999F }, { 155.365997F, 16.3029995F }, { 150.863998F, 16.3029995F } });
            sink->EndFigure(D2D1_FIGURE_END_CLOSED);
            winrt::check_hresult(sink->Close());
            auto result = winrt::make_self<CanvasGeometry>(path);
            return result;
        }

        // - - - - - PreComp layer: file 1
        // - - - Layer aggregator
        // - -  Offset:<236.285, 269.063>
        winrt::com_ptr<CanvasGeometry> Geometry_20()
        {
            winrt::com_ptr<ID2D1PathGeometry> path{ nullptr };
            winrt::check_hresult(_d2dFactory->CreatePathGeometry(path.put()));
            winrt::com_ptr<ID2D1GeometrySink> sink{ nullptr };
            winrt::check_hresult(path->Open(sink.put()));
            sink->SetFillMode(D2D1_FILL_MODE_WINDING);
            sink->BeginFigure({ 184.490005F, 16.3029995F }, D2D1_FIGURE_BEGIN_FILLED);
            sink->AddLine({ 8.15200043F, 16.3029995F });
            sink->AddBezier({ { 3.6500001F, 16.3029995F }, { 0.0F, 12.6540003F }, { 0.0F, 8.15200043F } });
            sink->AddBezier({ { 0.0F, 3.6500001F }, { 3.6500001F, 0.0F }, { 8.15200043F, 0.0F } });
            sink->AddLine({ 184.490005F, 0.0F });
            sink->AddBezier({ { 188.992004F, 0.0F }, { 192.641998F, 3.6500001F }, { 192.641998F, 8.15200043F } });
            sink->AddBezier({ { 192.641998F, 12.6540003F }, { 188.992004F, 16.3029995F }, { 184.490005F, 16.3029995F } });
            sink->EndFigure(D2D1_FIGURE_END_CLOSED);
            winrt::check_hresult(sink->Close());
            auto result = winrt::make_self<CanvasGeometry>(path);
            return result;
        }

        // - - - - - PreComp layer: file 1
        // - - - Layer aggregator
        // - -  Offset:<236.285, 269.063>
        winrt::com_ptr<CanvasGeometry> Geometry_21()
        {
            winrt::com_ptr<ID2D1PathGeometry> path{ nullptr };
            winrt::check_hresult(_d2dFactory->CreatePathGeometry(path.put()));
            winrt::com_ptr<ID2D1GeometrySink> sink{ nullptr };
            winrt::check_hresult(path->Open(sink.put()));
            sink->SetFillMode(D2D1_FILL_MODE_WINDING);
            sink->BeginFigure({ 135.477005F, 110.499001F }, D2D1_FIGURE_BEGIN_FILLED);
            sink->AddLine({ 3.90899992F, 110.499001F });
            sink->AddBezier({ { 1.75100005F, 110.497002F }, { 0.00200000009F, 108.748001F }, { 0.0F, 106.589996F } });
            sink->AddLine({ 0.0F, 3.90899992F });
            sink->AddBezier({ { 0.00200000009F, 1.75100005F }, { 1.75100005F, 0.00200000009F }, { 3.90899992F, 0.0F } });
            sink->AddLine({ 135.477005F, 0.0F });
            sink->AddBezier({ { 137.634995F, 0.00200000009F }, { 139.382996F, 1.75100005F }, { 139.386002F, 3.90899992F } });
            sink->AddLine({ 139.386002F, 106.589996F });
            sink->AddBezier({ { 139.382996F, 108.748001F }, { 137.634995F, 110.497002F }, { 135.477005F, 110.499001F } });
            sink->EndFigure(D2D1_FIGURE_END_CLOSED);
            winrt::check_hresult(sink->Close());
            auto result = winrt::make_self<CanvasGeometry>(path);
            return result;
        }

        // - - - - PreComp layer: Add button
        // - - - Layer aggregator
        // - - ShapeGroup: Path 23
        winrt::com_ptr<CanvasGeometry> Geometry_22()
        {
            winrt::com_ptr<ID2D1PathGeometry> path{ nullptr };
            winrt::check_hresult(_d2dFactory->CreatePathGeometry(path.put()));
            winrt::com_ptr<ID2D1GeometrySink> sink{ nullptr };
            winrt::check_hresult(path->Open(sink.put()));
            sink->SetFillMode(D2D1_FILL_MODE_WINDING);
            sink->BeginFigure({ 95.473999F, 42.0009995F }, D2D1_FIGURE_BEGIN_FILLED);
            sink->AddLine({ 64.9179993F, 42.0009995F });
            sink->AddLine({ 64.9179993F, 11.4440002F });
            sink->AddBezier({ { 64.9100037F, 5.11600018F }, { 59.7729988F, -0.00800000038F }, { 53.4440002F, 0.0F } });
            sink->AddBezier({ { 47.1269989F, 0.00800000038F }, { 42.0079994F, 5.12699986F }, { 42.0F, 11.4440002F } });
            sink->AddLine({ 42.0F, 42.0009995F });
            sink->AddLine({ 11.4440002F, 42.0009995F });
            sink->AddBezier({ { 5.11499977F, 42.0089989F }, { -0.00899999961F, 47.1459999F }, { 0.0F, 53.473999F } });
            sink->AddBezier({ { 0.00800000038F, 59.7910004F }, { 5.12699986F, 64.9100037F }, { 11.4440002F, 64.9179993F } });
            sink->AddLine({ 42.0F, 64.9179993F });
            sink->AddLine({ 42.0F, 95.4749985F });
            sink->AddBezier({ { 41.9920006F, 101.803001F }, { 47.1160011F, 106.940002F }, { 53.4440002F, 106.948997F } });
            sink->AddBezier({ { 59.7729988F, 106.957001F }, { 64.9100037F, 101.833F }, { 64.9179993F, 95.5049973F } });
            sink->AddLine({ 64.9179993F, 95.4749985F });
            sink->AddLine({ 64.9179993F, 64.9179993F });
            sink->AddLine({ 95.473999F, 64.9179993F });
            sink->AddBezier({ { 101.803001F, 64.9100037F }, { 106.926003F, 59.7729988F }, { 106.917999F, 53.4449997F } });
            sink->AddBezier({ { 106.910004F, 47.1279984F }, { 101.791F, 42.0089989F }, { 95.473999F, 42.0009995F } });
            sink->EndFigure(D2D1_FIGURE_END_CLOSED);
            winrt::check_hresult(sink->Close());
            auto result = winrt::make_self<CanvasGeometry>(path);
            return result;
        }

        // Color bound to theme property value: Color_0077D4
        CompositionColorBrush ThemeColor_Color_0077D4()
        {
            const auto result = _themeColor_Color_0077D4 = _c.CreateColorBrush();
            BindProperty(result, L"Color", L"ColorRGB(_theme.Color_0077D4.W,_theme.Color_0077D4.X,_theme.Color_0077D4.Y,_theme.Color_0077D4.Z)", L"_theme", _themeProperties);
            return result;
        }

        // Color bound to theme property value: Color_CCCCCC
        CompositionColorBrush ThemeColor_Color_CCCCCC()
        {
            const auto result = _themeColor_Color_CCCCCC = _c.CreateColorBrush();
            BindProperty(result, L"Color", L"ColorRGB(_theme.Color_CCCCCC.W,_theme.Color_CCCCCC.X,_theme.Color_CCCCCC.Y,_theme.Color_CCCCCC.Z)", L"_theme", _themeProperties);
            return result;
        }

        // Color bound to theme property value: Color_E6E6E6
        CompositionColorBrush ThemeColor_Color_E6E6E6()
        {
            const auto result = _themeColor_Color_E6E6E6 = _c.CreateColorBrush();
            BindProperty(result, L"Color", L"ColorRGB(_theme.Color_E6E6E6.W,_theme.Color_E6E6E6.X,_theme.Color_E6E6E6.Y,_theme.Color_E6E6E6.Z)", L"_theme", _themeProperties);
            return result;
        }

        // Color bound to theme property value: Color_F2F2F2
        CompositionColorBrush ThemeColor_Color_F2F2F2()
        {
            const auto result = _themeColor_Color_F2F2F2 = _c.CreateColorBrush();
            BindProperty(result, L"Color", L"ColorRGB(_theme.Color_F2F2F2.W,_theme.Color_F2F2F2.X,_theme.Color_F2F2F2.Y,_theme.Color_F2F2F2.Z)", L"_theme", _themeProperties);
            return result;
        }

        // Color bound to theme property value: Color_FFFFFF
        CompositionColorBrush ThemeColor_Color_FFFFFF()
        {
            const auto result = _themeColor_Color_FFFFFF = _c.CreateColorBrush();
            BindProperty(result, L"Color", L"ColorRGB(_theme.Color_FFFFFF.W,_theme.Color_FFFFFF.X,_theme.Color_FFFFFF.Y,_theme.Color_FFFFFF.Z)", L"_theme", _themeProperties);
            return result;
        }

        // - - PreComp layer: Add button
        // - Layer aggregator
        // Offset:<87.85, 87.85>
        // Ellipse Path 1.EllipseGeometry
        CompositionEllipseGeometry Ellipse_87p851()
        {
            const auto result = _c.CreateEllipseGeometry();
            result.Radius({ 87.850502F, 87.850502F });
            return result;
        }

        // - - - PreComp layer: file 2
        // - Layer aggregator
        // Offset:<285.494, 309.049>
        CompositionPathGeometry PathGeometry_00()
        {
            return _c.CreatePathGeometry(CompositionPath(CanvasGeometryToIGeometrySource2D(Geometry_00())));
        }

        // - - - PreComp layer: file 2
        // - Layer aggregator
        // Offset:<285.494, 309.049>
        CompositionPathGeometry PathGeometry_01()
        {
            return _c.CreatePathGeometry(CompositionPath(CanvasGeometryToIGeometrySource2D(Geometry_01())));
        }

        // - - - PreComp layer: file 2
        // - Layer aggregator
        // Offset:<285.494, 309.049>
        CompositionPathGeometry PathGeometry_02()
        {
            return _c.CreatePathGeometry(CompositionPath(CanvasGeometryToIGeometrySource2D(Geometry_02())));
        }

        // - - - PreComp layer: file 2
        // - Layer aggregator
        // Offset:<285.494, 309.049>
        CompositionPathGeometry PathGeometry_03()
        {
            return _c.CreatePathGeometry(CompositionPath(CanvasGeometryToIGeometrySource2D(Geometry_03())));
        }

        // - - - PreComp layer: file 2
        // - Layer aggregator
        // Offset:<285.494, 309.049>
        CompositionPathGeometry PathGeometry_04()
        {
            return _c.CreatePathGeometry(CompositionPath(CanvasGeometryToIGeometrySource2D(Geometry_04())));
        }

        // - - - PreComp layer: file 2
        // - Layer aggregator
        // Offset:<285.494, 309.049>
        CompositionPathGeometry PathGeometry_05()
        {
            return _c.CreatePathGeometry(CompositionPath(CanvasGeometryToIGeometrySource2D(Geometry_05())));
        }

        // - - - PreComp layer: file 2
        // - Layer aggregator
        // Offset:<285.494, 309.049>
        CompositionPathGeometry PathGeometry_06()
        {
            return _c.CreatePathGeometry(CompositionPath(CanvasGeometryToIGeometrySource2D(Geometry_06())));
        }

        // - - - PreComp layer: file 2
        // - Layer aggregator
        // Offset:<285.494, 309.049>
        CompositionPathGeometry PathGeometry_07()
        {
            return _c.CreatePathGeometry(CompositionPath(CanvasGeometryToIGeometrySource2D(Geometry_07())));
        }

        // - - - PreComp layer: file 2
        // - Layer aggregator
        // Offset:<285.494, 309.049>
        CompositionPathGeometry PathGeometry_08()
        {
            return _c.CreatePathGeometry(CompositionPath(CanvasGeometryToIGeometrySource2D(Geometry_08())));
        }

        // - - - PreComp layer: file 2
        // - Layer aggregator
        // Offset:<285.494, 309.049>
        CompositionPathGeometry PathGeometry_09()
        {
            return _c.CreatePathGeometry(CompositionPath(CanvasGeometryToIGeometrySource2D(Geometry_09())));
        }

        // - - - PreComp layer: file 2
        // - Layer aggregator
        // Offset:<285.494, 309.049>
        CompositionPathGeometry PathGeometry_10()
        {
            return _c.CreatePathGeometry(CompositionPath(CanvasGeometryToIGeometrySource2D(Geometry_10())));
        }

        // - - - PreComp layer: file 1
        // - Layer aggregator
        // Offset:<236.285, 269.063>
        CompositionPathGeometry PathGeometry_11()
        {
            return _c.CreatePathGeometry(CompositionPath(CanvasGeometryToIGeometrySource2D(Geometry_11())));
        }

        // - - - PreComp layer: file 1
        // - Layer aggregator
        // Offset:<236.285, 269.063>
        CompositionPathGeometry PathGeometry_12()
        {
            return _c.CreatePathGeometry(CompositionPath(CanvasGeometryToIGeometrySource2D(Geometry_12())));
        }

        // - - - PreComp layer: file 1
        // - Layer aggregator
        // Offset:<236.285, 269.063>
        CompositionPathGeometry PathGeometry_13()
        {
            return _c.CreatePathGeometry(CompositionPath(CanvasGeometryToIGeometrySource2D(Geometry_13())));
        }

        // - - - PreComp layer: file 1
        // - Layer aggregator
        // Offset:<236.285, 269.063>
        CompositionPathGeometry PathGeometry_14()
        {
            return _c.CreatePathGeometry(CompositionPath(CanvasGeometryToIGeometrySource2D(Geometry_14())));
        }

        // - - - PreComp layer: file 1
        // - Layer aggregator
        // Offset:<236.285, 269.063>
        CompositionPathGeometry PathGeometry_15()
        {
            return _c.CreatePathGeometry(CompositionPath(CanvasGeometryToIGeometrySource2D(Geometry_15())));
        }

        // - - - PreComp layer: file 1
        // - Layer aggregator
        // Offset:<236.285, 269.063>
        CompositionPathGeometry PathGeometry_16()
        {
            return _c.CreatePathGeometry(CompositionPath(CanvasGeometryToIGeometrySource2D(Geometry_16())));
        }

        // - - - PreComp layer: file 1
        // - Layer aggregator
        // Offset:<236.285, 269.063>
        CompositionPathGeometry PathGeometry_17()
        {
            return _c.CreatePathGeometry(CompositionPath(CanvasGeometryToIGeometrySource2D(Geometry_17())));
        }

        // - - - PreComp layer: file 1
        // - Layer aggregator
        // Offset:<236.285, 269.063>
        CompositionPathGeometry PathGeometry_18()
        {
            return _c.CreatePathGeometry(CompositionPath(CanvasGeometryToIGeometrySource2D(Geometry_18())));
        }

        // - - - PreComp layer: file 1
        // - Layer aggregator
        // Offset:<236.285, 269.063>
        CompositionPathGeometry PathGeometry_19()
        {
            return _c.CreatePathGeometry(CompositionPath(CanvasGeometryToIGeometrySource2D(Geometry_19())));
        }

        // - - - PreComp layer: file 1
        // - Layer aggregator
        // Offset:<236.285, 269.063>
        CompositionPathGeometry PathGeometry_20()
        {
            return _c.CreatePathGeometry(CompositionPath(CanvasGeometryToIGeometrySource2D(Geometry_20())));
        }

        // - - - PreComp layer: file 1
        // - Layer aggregator
        // Offset:<236.285, 269.063>
        CompositionPathGeometry PathGeometry_21()
        {
            return _c.CreatePathGeometry(CompositionPath(CanvasGeometryToIGeometrySource2D(Geometry_21())));
        }

        // - - PreComp layer: Add button
        // - Layer aggregator
        // ShapeGroup: Path 23
        CompositionPathGeometry PathGeometry_22()
        {
            return _c.CreatePathGeometry(CompositionPath(CanvasGeometryToIGeometrySource2D(Geometry_22())));
        }

        // - - PreComp layer: file 2
        // Layer aggregator
        // Path 1
        CompositionSpriteShape SpriteShape_00()
        {
            const auto result = _c.CreateSpriteShape(PathGeometry_00());
            result.FillBrush(ThemeColor_Color_F2F2F2());
            return result;
        }

        // - - PreComp layer: file 2
        // Layer aggregator
        // Path 1
        CompositionSpriteShape SpriteShape_01()
        {
            // Offset:<13.853973, 13.854004>
            const auto geometry = PathGeometry_01();
            const auto result = CreateSpriteShape(geometry, { 1.0F, 0.0F, 0.0F, 1.0F, 13.8539734F, 13.8540039F }, ThemeColor_Color_FFFFFF());;
            return result;
        }

        // - - PreComp layer: file 2
        // Layer aggregator
        // Path 1
        CompositionSpriteShape SpriteShape_02()
        {
            // Offset:<186.92398, 137.725>
            const auto geometry = PathGeometry_02();
            const auto result = CreateSpriteShape(geometry, { 1.0F, 0.0F, 0.0F, 1.0F, 186.923981F, 137.725006F }, _themeColor_Color_F2F2F2);;
            return result;
        }

        // - - PreComp layer: file 2
        // Layer aggregator
        // Path 1
        CompositionSpriteShape SpriteShape_03()
        {
            // Offset:<193.663, 155.65701>
            const auto geometry = PathGeometry_03();
            const auto result = CreateSpriteShape(geometry, { 1.0F, 0.0F, 0.0F, 1.0F, 193.662994F, 155.657013F }, _themeColor_Color_F2F2F2);;
            return result;
        }

        // - - PreComp layer: file 2
        // Layer aggregator
        // Path 1
        CompositionSpriteShape SpriteShape_04()
        {
            // Offset:<217.17699, 255.09201>
            const auto geometry = PathGeometry_04();
            const auto result = CreateSpriteShape(geometry, { 1.0F, 0.0F, 0.0F, 1.0F, 217.176987F, 255.09201F }, _themeColor_Color_F2F2F2);;
            return result;
        }

        // - - PreComp layer: file 2
        // Layer aggregator
        // Path 1
        CompositionSpriteShape SpriteShape_05()
        {
            // Offset:<223.93, 273.03003>
            const auto geometry = PathGeometry_05();
            const auto result = CreateSpriteShape(geometry, { 1.0F, 0.0F, 0.0F, 1.0F, 223.929993F, 273.030029F }, _themeColor_Color_F2F2F2);;
            return result;
        }

        // - - PreComp layer: file 2
        // Layer aggregator
        // Path 1
        CompositionSpriteShape SpriteShape_06()
        {
            // Offset:<80.491, 184.13101>
            const auto geometry = PathGeometry_06();
            const auto result = CreateSpriteShape(geometry, { 1.0F, 0.0F, 0.0F, 1.0F, 80.4909973F, 184.131012F }, ThemeColor_Color_E6E6E6());;
            return result;
        }

        // - - PreComp layer: file 2
        // Layer aggregator
        // Path 1
        CompositionSpriteShape SpriteShape_07()
        {
            // Offset:<110.759, 301.505>
            const auto geometry = PathGeometry_07();
            const auto result = CreateSpriteShape(geometry, { 1.0F, 0.0F, 0.0F, 1.0F, 110.759003F, 301.505005F }, _themeColor_Color_E6E6E6);;
            return result;
        }

        // - - PreComp layer: file 2
        // Layer aggregator
        // Path 1
        CompositionSpriteShape SpriteShape_08()
        {
            // Offset:<141.02798, 418.877>
            const auto geometry = PathGeometry_08();
            const auto result = CreateSpriteShape(geometry, { 1.0F, 0.0F, 0.0F, 1.0F, 141.027985F, 418.877014F }, _themeColor_Color_E6E6E6);;
            return result;
        }

        // - - PreComp layer: file 2
        // Layer aggregator
        // Path 1
        CompositionSpriteShape SpriteShape_09()
        {
            // Offset:<247.467, 372.469>
            const auto geometry = PathGeometry_09();
            const auto result = CreateSpriteShape(geometry, { 1.0F, 0.0F, 0.0F, 1.0F, 247.466995F, 372.468994F }, _themeColor_Color_F2F2F2);;
            return result;
        }

        // - - PreComp layer: file 2
        // Layer aggregator
        // Path 1
        CompositionSpriteShape SpriteShape_10()
        {
            // Offset:<254.19199, 390.40503>
            const auto geometry = PathGeometry_10();
            const auto result = CreateSpriteShape(geometry, { 1.0F, 0.0F, 0.0F, 1.0F, 254.191986F, 390.405029F }, _themeColor_Color_F2F2F2);;
            return result;
        }

        // - - PreComp layer: file 1
        // Layer aggregator
        // Path 1
        CompositionSpriteShape SpriteShape_11()
        {
            const auto result = _c.CreateSpriteShape(PathGeometry_11());
            result.FillBrush(_themeColor_Color_E6E6E6);
            return result;
        }

        // - - PreComp layer: file 1
        // Layer aggregator
        // Path 1
        CompositionSpriteShape SpriteShape_12()
        {
            // Offset:<13.855011, 13.854996>
            const auto geometry = PathGeometry_12();
            const auto result = CreateSpriteShape(geometry, { 1.0F, 0.0F, 0.0F, 1.0F, 13.855011F, 13.8549957F }, _themeColor_Color_FFFFFF);;
            return result;
        }

        // - - PreComp layer: file 1
        // Layer aggregator
        // Path 1
        CompositionSpriteShape SpriteShape_13()
        {
            // Offset:<168.336, 237.60199>
            const auto geometry = PathGeometry_13();
            const auto result = CreateSpriteShape(geometry, { 1.0F, 0.0F, 0.0F, 1.0F, 168.335999F, 237.60199F }, _themeColor_Color_E6E6E6);;
            return result;
        }

        // - - PreComp layer: file 1
        // Layer aggregator
        // Path 1
        CompositionSpriteShape SpriteShape_14()
        {
            // Offset:<168.335, 265.11398>
            const auto geometry = PathGeometry_14();
            const auto result = CreateSpriteShape(geometry, { 1.0F, 0.0F, 0.0F, 1.0F, 168.335007F, 265.113983F }, _themeColor_Color_E6E6E6);;
            return result;
        }

        // - - PreComp layer: file 1
        // Layer aggregator
        // Path 1
        CompositionSpriteShape SpriteShape_15()
        {
            // Offset:<168.34601, 360.899>
            const auto geometry = PathGeometry_15();
            const auto result = CreateSpriteShape(geometry, { 1.0F, 0.0F, 0.0F, 1.0F, 168.346008F, 360.898987F }, _themeColor_Color_E6E6E6);;
            return result;
        }

        // - - PreComp layer: file 1
        // Layer aggregator
        // Path 1
        CompositionSpriteShape SpriteShape_16()
        {
            // Offset:<168.34601, 388.40997>
            const auto geometry = PathGeometry_16();
            const auto result = CreateSpriteShape(geometry, { 1.0F, 0.0F, 0.0F, 1.0F, 168.346008F, 388.409973F }, _themeColor_Color_E6E6E6);;
            return result;
        }

        // - - PreComp layer: file 1
        // Layer aggregator
        // Path 1
        CompositionSpriteShape SpriteShape_17()
        {
            // Offset:<60.725006, 225.11299>
            const auto geometry = PathGeometry_17();
            const auto result = CreateSpriteShape(geometry, { 1.0F, 0.0F, 0.0F, 1.0F, 60.7250061F, 225.112991F }, _themeColor_Color_E6E6E6);;
            return result;
        }

        // - - PreComp layer: file 1
        // Layer aggregator
        // Path 1
        CompositionSpriteShape SpriteShape_18()
        {
            // Offset:<60.725006, 348.408>
            const auto geometry = PathGeometry_18();
            const auto result = CreateSpriteShape(geometry, { 1.0F, 0.0F, 0.0F, 1.0F, 60.7250061F, 348.40799F }, _themeColor_Color_E6E6E6);;
            return result;
        }

        // - - PreComp layer: file 1
        // Layer aggregator
        // Path 1
        CompositionSpriteShape SpriteShape_19()
        {
            // Offset:<219.418, 100.349976>
            const auto geometry = PathGeometry_19();
            const auto result = CreateSpriteShape(geometry, { 1.0F, 0.0F, 0.0F, 1.0F, 219.417999F, 100.349976F }, ThemeColor_Color_CCCCCC());;
            return result;
        }

        // - - PreComp layer: file 1
        // Layer aggregator
        // Path 1
        CompositionSpriteShape SpriteShape_20()
        {
            // Offset:<219.419, 127.86299>
            const auto geometry = PathGeometry_20();
            const auto result = CreateSpriteShape(geometry, { 1.0F, 0.0F, 0.0F, 1.0F, 219.419006F, 127.862991F }, _themeColor_Color_CCCCCC);;
            return result;
        }

        // - - PreComp layer: file 1
        // Layer aggregator
        // Path 1
        CompositionSpriteShape SpriteShape_21()
        {
            // Offset:<60.509003, 67.009>
            const auto geometry = PathGeometry_21();
            const auto result = CreateSpriteShape(geometry, { 1.0F, 0.0F, 0.0F, 1.0F, 60.5090027F, 67.0090027F }, ThemeColor_Color_0077D4());;
            return result;
        }

        // - PreComp layer: Add button
        // Layer aggregator
        // Ellipse Path 1
        CompositionSpriteShape SpriteShape_22()
        {
            // Offset:<87.85, 87.85>
            const auto geometry = Ellipse_87p851();
            const auto result = CreateSpriteShape(geometry, { 1.0F, 0.0F, 0.0F, 1.0F, 87.8499985F, 87.8499985F }, _themeColor_Color_0077D4);;
            return result;
        }

        // - PreComp layer: Add button
        // Layer aggregator
        // Path 1
        CompositionSpriteShape SpriteShape_23()
        {
            const auto result = _c.CreateSpriteShape(PathGeometry_22());
            result.CenterPoint({ 53.4589996F, 53.473999F });
            result.Offset({ 34.3909988F, 34.3909988F });
            result.FillBrush(_themeColor_Color_FFFFFF);
            StartProgressBoundAnimation(result, L"RotationAngleInDegrees", RotationAngleInDegreesScalarAnimation_0_to_0(), _rootProgress);
            return result;
        }

        // Transforms for file 2
        ContainerVisual ContainerVisual_0()
        {
            const auto result = _c.CreateContainerVisual();
            result.CenterPoint({ 673.656006F, 619.221008F, 0.0F });
            result.Offset({ 133.830017F, 176.197998F, 0.0F });
            result.Children().InsertAtTop(ContainerVisual_1());
            StartProgressBoundAnimation(result, L"Scale.X", ScalarAnimation_1_to_1_0(), RootProgress());
            StartProgressBoundAnimation(result, L"Scale.Y", _scalarAnimation_1_to_1_0, _rootProgress);
            return result;
        }

        // PreComp layer: file 2
        ContainerVisual ContainerVisual_1()
        {
            const auto result = _c.CreateContainerVisual();
            result.Clip(InsetClip_0());
            result.Size({ 571.0F, 619.0F });
            // Layer aggregator
            result.Children().InsertAtTop(ShapeVisual_0());
            return result;
        }

        // Transforms for file 1
        ContainerVisual ContainerVisual_2()
        {
            const auto result = _c.CreateContainerVisual();
            result.CenterPoint({ 459.73999F, 526.929993F, 0.0F });
            result.Offset({ 347.746033F, 270.5F, 0.0F });
            result.Children().InsertAtTop(ContainerVisual_3());
            StartProgressBoundAnimation(result, L"Scale.X", ScalarAnimation_1_to_1_1(), _rootProgress);
            StartProgressBoundAnimation(result, L"Scale.Y", _scalarAnimation_1_to_1_1, _rootProgress);
            return result;
        }

        // PreComp layer: file 1
        ContainerVisual ContainerVisual_3()
        {
            const auto result = _c.CreateContainerVisual();
            result.Clip(_insetClip_0);
            result.Size({ 473.0F, 539.0F });
            // Layer aggregator
            result.Children().InsertAtTop(ShapeVisual_1());
            return result;
        }

        // Transforms for Add button Scale(1,1,0), Offset(721.497,707.419,0)
        ContainerVisual ContainerVisual_4()
        {
            const auto result = _c.CreateContainerVisual();
            result.Clip(_insetClip_0);
            result.Size({ 176.0F, 176.0F });
            // Offset:<721.497, 707.419>, Scale:<1, 1>
            result.TransformMatrix({ 1.0F, 0.0F, 0.0F, 0.0F, 0.0F, 1.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 721.497009F, 707.419006F, 0.0F, 1.0F });
            // Layer aggregator
            result.Children().InsertAtTop(ShapeVisual_2());
            return result;
        }

        // The root of the composition.
        ContainerVisual Root()
        {
            const auto result = _root = _c.CreateContainerVisual();
            const auto propertySet = result.Properties();
            propertySet.InsertScalar(L"Progress", 0.0F);
            const auto children = result.Children();
            // PreComp layer: file 2
            children.InsertAtTop(ContainerVisual_0());
            // PreComp layer: file 1
            children.InsertAtTop(ContainerVisual_2());
            // PreComp layer: Add button
            children.InsertAtTop(ContainerVisual_4());
            return result;
        }

        CubicBezierEasingFunction CubicBezierEasingFunction_0()
        {
            return _cubicBezierEasingFunction_0 = _c.CreateCubicBezierEasingFunction({ 0.875F, 0.0F }, { 0.333000004F, 1.0F });
        }

        CubicBezierEasingFunction CubicBezierEasingFunction_1()
        {
            return _cubicBezierEasingFunction_1 = _c.CreateCubicBezierEasingFunction({ 0.166999996F, 0.166999996F }, { 0.833000004F, 0.833000004F });
        }

        ExpressionAnimation RootProgress()
        {
            const auto result = _rootProgress = _c.CreateExpressionAnimation(L"_.Progress");
            result.SetReferenceParameter(L"_", _root);
            return result;
        }

        InsetClip InsetClip_0()
        {
            const auto result = _insetClip_0 = _c.CreateInsetClip();
            return result;
        }

        // - - PreComp layer: Add button
        // - Layer aggregator
        // ShapeGroup: Path 23
        // Rotation
        ScalarKeyFrameAnimation RotationAngleInDegreesScalarAnimation_0_to_0()
        {
            // Frame 0.
            const auto result = CreateScalarKeyFrameAnimation(0.0F, 0.0F, _stepThenHoldEasingFunction);
            // Frame 30.
            result.InsertKeyFrame(0.165745854F, 0.0F, _holdThenStepEasingFunction);
            // Frame 75.
            result.InsertKeyFrame(0.414364636F, 270.0F, CubicBezierEasingFunction_1());
            // Frame 105.
            result.InsertKeyFrame(0.58011049F, 270.0F, _c.CreateCubicBezierEasingFunction({ 0.166999996F, 0.0F }, { 0.833000004F, 1.0F }));
            // Frame 142.
            result.InsertKeyFrame(0.784530401F, 0.0F, _cubicBezierEasingFunction_1);
            return result;
        }

        // Scale
        ScalarKeyFrameAnimation ScalarAnimation_1_to_1_0()
        {
            // Frame 0.
            const auto result = _scalarAnimation_1_to_1_0 = CreateScalarKeyFrameAnimation(0.0F, 1.0F, StepThenHoldEasingFunction());
            // Frame 30.
            result.InsertKeyFrame(0.165745854F, 1.0F, HoldThenStepEasingFunction());
            // Frame 59.
            result.InsertKeyFrame(0.325966865F, 0.0F, _c.CreateCubicBezierEasingFunction({ 0.81099999F, 0.0F }, { 0.486000001F, 1.0F }));
            // Frame 105.
            result.InsertKeyFrame(0.58011049F, 0.0F, _c.CreateCubicBezierEasingFunction({ 0.333000004F, 0.0F }, { 0.458000004F, 1.0F }));
            // Frame 150.
            result.InsertKeyFrame(0.828729272F, 1.0F, _c.CreateCubicBezierEasingFunction({ 0.912999988F, 0.0F }, { 0.453999996F, 1.0F }));
            return result;
        }

        // Scale
        ScalarKeyFrameAnimation ScalarAnimation_1_to_1_1()
        {
            // Frame 0.
            const auto result = _scalarAnimation_1_to_1_1 = CreateScalarKeyFrameAnimation(0.0F, 1.0F, _stepThenHoldEasingFunction);
            // Frame 30.
            result.InsertKeyFrame(0.165745854F, 1.0F, _holdThenStepEasingFunction);
            // Frame 75.
            result.InsertKeyFrame(0.414364636F, 0.0F, CubicBezierEasingFunction_0());
            // Frame 105.
            result.InsertKeyFrame(0.58011049F, 0.0F, _c.CreateCubicBezierEasingFunction({ 1.0F, 0.0F }, { 0.166999996F, 1.0F }));
            // Frame 150.
            result.InsertKeyFrame(0.828729272F, 1.0F, _cubicBezierEasingFunction_0);
            return result;
        }

        // - PreComp layer: file 2
        // Layer aggregator
        ShapeVisual ShapeVisual_0()
        {
            const auto result = _c.CreateShapeVisual();
            result.Size({ 571.0F, 619.0F });
            const auto shapes = result.Shapes();
            // Offset:<285.494, 309.049>
            shapes.Append(SpriteShape_00());
            // Offset:<285.494, 309.049>
            shapes.Append(SpriteShape_01());
            // Offset:<285.494, 309.049>
            shapes.Append(SpriteShape_02());
            // Offset:<285.494, 309.049>
            shapes.Append(SpriteShape_03());
            // Offset:<285.494, 309.049>
            shapes.Append(SpriteShape_04());
            // Offset:<285.494, 309.049>
            shapes.Append(SpriteShape_05());
            // Offset:<285.494, 309.049>
            shapes.Append(SpriteShape_06());
            // Offset:<285.494, 309.049>
            shapes.Append(SpriteShape_07());
            // Offset:<285.494, 309.049>
            shapes.Append(SpriteShape_08());
            // Offset:<285.494, 309.049>
            shapes.Append(SpriteShape_09());
            // Offset:<285.494, 309.049>
            shapes.Append(SpriteShape_10());
            return result;
        }

        // - PreComp layer: file 1
        // Layer aggregator
        ShapeVisual ShapeVisual_1()
        {
            const auto result = _c.CreateShapeVisual();
            result.Size({ 473.0F, 539.0F });
            const auto shapes = result.Shapes();
            // Offset:<236.285, 269.063>
            shapes.Append(SpriteShape_11());
            // Offset:<236.285, 269.063>
            shapes.Append(SpriteShape_12());
            // Offset:<236.285, 269.063>
            shapes.Append(SpriteShape_13());
            // Offset:<236.285, 269.063>
            shapes.Append(SpriteShape_14());
            // Offset:<236.285, 269.063>
            shapes.Append(SpriteShape_15());
            // Offset:<236.285, 269.063>
            shapes.Append(SpriteShape_16());
            // Offset:<236.285, 269.063>
            shapes.Append(SpriteShape_17());
            // Offset:<236.285, 269.063>
            shapes.Append(SpriteShape_18());
            // Offset:<236.285, 269.063>
            shapes.Append(SpriteShape_19());
            // Offset:<236.285, 269.063>
            shapes.Append(SpriteShape_20());
            // Offset:<236.285, 269.063>
            shapes.Append(SpriteShape_21());
            return result;
        }

        // PreComp layer: Add button
        // Layer aggregator
        ShapeVisual ShapeVisual_2()
        {
            const auto result = _c.CreateShapeVisual();
            result.Size({ 176.0F, 176.0F });
            const auto shapes = result.Shapes();
            // Offset:<87.85, 87.85>
            shapes.Append(SpriteShape_22());
            // ShapeGroup: Path 23
            shapes.Append(SpriteShape_23());
            return result;
        }

        StepEasingFunction HoldThenStepEasingFunction()
        {
            const auto result = _holdThenStepEasingFunction = _c.CreateStepEasingFunction();
            result.IsFinalStepSingleFrame(true);
            return result;
        }

        StepEasingFunction StepThenHoldEasingFunction()
        {
            const auto result = _stepThenHoldEasingFunction = _c.CreateStepEasingFunction();
            result.IsInitialStepSingleFrame(true);
            return result;
        }

        static IGeometrySource2D CanvasGeometryToIGeometrySource2D(winrt::com_ptr<CanvasGeometry> geo)
        {
            return geo.as<IGeometrySource2D>();
        }

    public:
        AddFile_AnimatedVisual_UAPv7(
            Compositor compositor,
            CompositionPropertySet themeProperties)
            : _c{compositor}
            , _themeProperties{themeProperties}
            , _reusableExpressionAnimation(compositor.CreateExpressionAnimation())
        {
            winrt::check_hresult(D2D1CreateFactory(D2D1_FACTORY_TYPE_SINGLE_THREADED, _d2dFactory.put()));
            const auto _ = Root();
        }

        void Close()
        {
            if (_root)
            {
                _root.Close();
            }
        }

        TimeSpan Duration() const
        {
            return TimeSpan{ c_durationTicks };
        }

        Visual RootVisual() const
        {
            return _root;
        }

        float2 Size() const
        {
            return { 1080.0F, 1080.0F };
        }

        static bool IsRuntimeCompatible()
        {
            return winrt::Windows::Foundation::Metadata::ApiInformation::IsApiContractPresent(L"Windows.Foundation.UniversalApiContract", 7);
        }
    };

    float4 AddFile::ColorAsVector4(Color color)
    {
        return { static_cast<float>(color.R), static_cast<float>(color.G), static_cast<float>(color.B), static_cast<float>(color.A) };
    }

    CompositionPropertySet AddFile::EnsureThemeProperties(Compositor compositor)
    {
        if (_themeProperties == nullptr)
        {
            _themeProperties = compositor.CreatePropertySet();
            _themeProperties.InsertVector4(L"Color_0077D4", ColorAsVector4((Color)_themeColor_0077D4));
            _themeProperties.InsertVector4(L"Color_CCCCCC", ColorAsVector4((Color)_themeColor_CCCCCC));
            _themeProperties.InsertVector4(L"Color_E6E6E6", ColorAsVector4((Color)_themeColor_E6E6E6));
            _themeProperties.InsertVector4(L"Color_F2F2F2", ColorAsVector4((Color)_themeColor_F2F2F2));
            _themeProperties.InsertVector4(L"Color_FFFFFF", ColorAsVector4((Color)_themeColor_FFFFFF));
        }

        return _themeProperties;
    }

    Color AddFile::Color_0077D4()
    {
        return _themeColor_0077D4;
    }

    void AddFile::Color_0077D4(Color value)
    {
        _themeColor_0077D4 = value;
        if (_themeProperties != nullptr)
        {
            _themeProperties.InsertVector4(L"Color_0077D4", ColorAsVector4((Color)_themeColor_0077D4));
        }
    }

    Color AddFile::Color_CCCCCC()
    {
        return _themeColor_CCCCCC;
    }

    void AddFile::Color_CCCCCC(Color value)
    {
        _themeColor_CCCCCC = value;
        if (_themeProperties != nullptr)
        {
            _themeProperties.InsertVector4(L"Color_CCCCCC", ColorAsVector4((Color)_themeColor_CCCCCC));
        }
    }

    Color AddFile::Color_E6E6E6()
    {
        return _themeColor_E6E6E6;
    }

    void AddFile::Color_E6E6E6(Color value)
    {
        _themeColor_E6E6E6 = value;
        if (_themeProperties != nullptr)
        {
            _themeProperties.InsertVector4(L"Color_E6E6E6", ColorAsVector4((Color)_themeColor_E6E6E6));
        }
    }

    Color AddFile::Color_F2F2F2()
    {
        return _themeColor_F2F2F2;
    }

    void AddFile::Color_F2F2F2(Color value)
    {
        _themeColor_F2F2F2 = value;
        if (_themeProperties != nullptr)
        {
            _themeProperties.InsertVector4(L"Color_F2F2F2", ColorAsVector4((Color)_themeColor_F2F2F2));
        }
    }

    Color AddFile::Color_FFFFFF()
    {
        return _themeColor_FFFFFF;
    }

    void AddFile::Color_FFFFFF(Color value)
    {
        _themeColor_FFFFFF = value;
        if (_themeProperties != nullptr)
        {
            _themeProperties.InsertVector4(L"Color_FFFFFF", ColorAsVector4((Color)_themeColor_FFFFFF));
        }
    }

    winrt::Microsoft::UI::Xaml::Controls::IAnimatedVisual AddFile::TryCreateAnimatedVisual(
        Compositor const& compositor)
    {
        IInspectable diagnostics = nullptr;
        return TryCreateAnimatedVisual(compositor, diagnostics);
    }

    winrt::Microsoft::UI::Xaml::Controls::IAnimatedVisual AddFile::TryCreateAnimatedVisual(
        Compositor const& compositor,
        IInspectable& diagnostics)
    {
        const auto _ = EnsureThemeProperties(compositor);
        diagnostics = nullptr;
        if (AddFile_AnimatedVisual_UAPv12::IsRuntimeCompatible())
        {
            auto result = winrt::make<AddFile_AnimatedVisual_UAPv12>(
                compositor,
                _themeProperties);
            return result;
        }
        if (AddFile_AnimatedVisual_UAPv7::IsRuntimeCompatible())
        {
            auto result = winrt::make<AddFile_AnimatedVisual_UAPv7>(
                compositor,
                _themeProperties);
            return result;
        }

        return nullptr;
    }

    double AddFile::FrameCount()
    {
        return 180.999999046326;
    }

    double AddFile::Framerate()
    {
        return 60.0;
    }

    TimeSpan AddFile::Duration()
    {
        return TimeSpan{ 30166666L };
    }

    double AddFile::FrameToProgress(double frameNumber)
    {
        return frameNumber / 180.999999046326;
    }

    winrt::Windows::Foundation::Collections::IMapView<hstring, double> AddFile::Markers()
    {
        return winrt::single_threaded_map<winrt::hstring, double>(
            std::map<winrt::hstring, double>
            {
            }
        ).GetView();
    }

    void AddFile::SetColorProperty(hstring const& propertyName, Color value)
    {
        if (propertyName == L"Color_0077D4")
        {
            _themeColor_0077D4 = value;
        }
        else if (propertyName == L"Color_CCCCCC")
        {
            _themeColor_CCCCCC = value;
        }
        else if (propertyName == L"Color_E6E6E6")
        {
            _themeColor_E6E6E6 = value;
        }
        else if (propertyName == L"Color_F2F2F2")
        {
            _themeColor_F2F2F2 = value;
        }
        else if (propertyName == L"Color_FFFFFF")
        {
            _themeColor_FFFFFF = value;
        }
        else
        {
            return;
        }

        if (_themeProperties != nullptr)
        {
            _themeProperties.InsertVector4(propertyName, ColorAsVector4(value));
        }
    }

    void AddFile::SetScalarProperty(hstring const&, double)
    {
    }
} // end namespace
